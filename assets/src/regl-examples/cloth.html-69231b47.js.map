{"version":3,"file":"cloth.html-69231b47.js","sources":["../../../../examples/src/regl-examples/hughsk/element-size.ts","../../../../examples/src/regl-examples/hughsk/canvas-fit.ts","../../../../examples/src/regl-examples/toji/gl-matrix/common.ts","../../../../examples/src/regl-examples/toji/gl-matrix/mat3.ts","../../../../examples/src/regl-examples/toji/gl-matrix/mat4.ts","../../../../examples/src/regl-examples/toji/gl-matrix/vec3.ts","../../../../examples/src/regl-examples/toji/gl-matrix/vec4.ts","../../../../examples/src/regl-examples/toji/gl-matrix/quat.ts","../../../../examples/src/regl-examples/toji/gl-matrix/vec2.ts","../../../../examples/src/regl-examples/mikolalysenko/orbit-camera.ts","../../../../examples/src/regl-examples/hughsk/vkey.ts","../../../../examples/src/regl-examples/hughsk/key-pressed.ts","../../../../examples/src/regl-examples/Gozala/events.ts","../../../../examples/src/regl-examples/hughsk/mouse-position.ts","../../../../examples/src/regl-examples/hughsk/mouse-pressed.ts","../../../../examples/src/regl-examples/anvaka/wheel.ts","../../../../examples/src/regl-examples/hughsk/scroll-speed.ts","../../../../examples/src/regl-examples/hughsk/canvas-orbit-camera.ts","../../../../examples/src/regl-examples/stackgl/gl-vec3.ts","../../../../examples/src/regl-examples/cloth.ts"],"sourcesContent":["// @see https://github.com/hughsk/element-size\n\nexport function getSize(element)\n{\n    // Handle cases where the element is not already\n    // attached to the DOM by briefly appending it\n    // to document.body, and removing it again later.\n    if (element === window || element === document.body)\n    {\n        return [window.innerWidth, window.innerHeight];\n    }\n\n    let temporary = false;\n    if (!element.parentNode)\n    {\n        temporary = true;\n        document.body.appendChild(element);\n    }\n\n    const bounds = element.getBoundingClientRect();\n    const styles = getComputedStyle(element);\n    const height = (bounds.height | 0)\n        + parse(styles.getPropertyValue(\"margin-top\"))\n        + parse(styles.getPropertyValue(\"margin-bottom\"));\n    const width = (bounds.width | 0)\n        + parse(styles.getPropertyValue(\"margin-left\"))\n        + parse(styles.getPropertyValue(\"margin-right\"));\n\n    if (temporary)\n    {\n        document.body.removeChild(element);\n    }\n\n    return [width, height];\n}\n\nfunction parse(prop)\n{\n    return parseFloat(prop) || 0;\n}\n","// @see https://github.com/hughsk/canvas-fit\n\nimport { getSize as size } from \"./element-size\";\n\nconst scratch = new Float32Array(2);\n\nexport function fit(canvas, parent?, scale?)\n{\n    const isSVG = canvas.nodeName.toUpperCase() === \"SVG\";\n\n    canvas.style.position = canvas.style.position || \"absolute\";\n    canvas.style.top = 0;\n    canvas.style.left = 0;\n\n    resize.scale = parseFloat(scale || 1);\n    resize.parent = parent;\n\n    return resize();\n\n    function resize()\n    {\n        const p = resize.parent || canvas.parentNode;\n        let width: number;\n        let height: number;\n        if (typeof p === \"function\")\n        {\n            const dims = p(scratch) || scratch;\n            width = dims[0];\n            height = dims[1];\n        }\n        else\n            if (p && p !== document.body)\n            {\n                const psize = size(p);\n                width = psize[0] | 0;\n                height = psize[1] | 0;\n            }\n            else\n            {\n                width = window.innerWidth;\n                height = window.innerHeight;\n            }\n\n        if (isSVG)\n        {\n            canvas.setAttribute(\"width\", `${width * resize.scale}px`);\n            canvas.setAttribute(\"height\", `${height * resize.scale}px`);\n        }\n        else\n        {\n            canvas.width = width * resize.scale;\n            canvas.height = height * resize.scale;\n        }\n\n        canvas.style.width = `${width}px`;\n        canvas.style.height = `${height}px`;\n\n        return resize;\n    }\n}\n","/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== \"undefined\") ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type)\n{\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a)\n{\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b)\n{\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import * as glMatrix from \"./common\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create()\n{\n  const out = new glMatrix.ARRAY_TYPE(9);\n  if (glMatrix.ARRAY_TYPE !== Float32Array)\n  {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a)\n{\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a)\n{\n  const out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a)\n{\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22)\n{\n  const out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22)\n{\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out)\n{\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a)\n{\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a)\n  {\n    const a01 = a[1]; const a02 = a[2]; const\n      a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  }\n  else\n  {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a)\n{\n  const a00 = a[0]; const a01 = a[1]; const\n    a02 = a[2];\n  const a10 = a[3]; const a11 = a[4]; const\n    a12 = a[5];\n  const a20 = a[6]; const a21 = a[7]; const\n    a22 = a[8];\n\n  const b01 = a22 * a11 - a12 * a21;\n  const b11 = -a22 * a10 + a12 * a20;\n  const b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det)\n  {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a)\n{\n  const a00 = a[0]; const a01 = a[1]; const\n    a02 = a[2];\n  const a10 = a[3]; const a11 = a[4]; const\n    a12 = a[5];\n  const a20 = a[6]; const a21 = a[7]; const\n    a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a)\n{\n  const a00 = a[0]; const a01 = a[1]; const\n    a02 = a[2];\n  const a10 = a[3]; const a11 = a[4]; const\n    a12 = a[5];\n  const a20 = a[6]; const a21 = a[7]; const\n    a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b)\n{\n  const a00 = a[0]; const a01 = a[1]; const\n    a02 = a[2];\n  const a10 = a[3]; const a11 = a[4]; const\n    a12 = a[5];\n  const a20 = a[6]; const a21 = a[7]; const\n    a22 = a[8];\n\n  const b00 = b[0]; const b01 = b[1]; const\n    b02 = b[2];\n  const b10 = b[3]; const b11 = b[4]; const\n    b12 = b[5];\n  const b20 = b[6]; const b21 = b[7]; const\n    b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v)\n{\n  const a00 = a[0]; const a01 = a[1]; const a02 = a[2];\n  const a10 = a[3]; const a11 = a[4]; const a12 = a[5];\n  const a20 = a[6]; const a21 = a[7]; const a22 = a[8];\n  const x = v[0]; const\n    y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad)\n{\n  const a00 = a[0]; const a01 = a[1]; const a02 = a[2];\n  const a10 = a[3]; const a11 = a[4]; const a12 = a[5];\n  const a20 = a[6]; const a21 = a[7]; const a22 = a[8];\n\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n\n  return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v)\n{\n  const x = v[0]; const\n    y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v)\n{\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad)\n{\n  const s = Math.sin(rad); const\n    c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v)\n{\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a)\n{\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q)\n{\n  const x = q[0]; const y = q[1]; const z = q[2]; const\n    w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a)\n{\n  const a00 = a[0]; const a01 = a[1]; const a02 = a[2]; const\n    a03 = a[3];\n  const a10 = a[4]; const a11 = a[5]; const a12 = a[6]; const\n    a13 = a[7];\n  const a20 = a[8]; const a21 = a[9]; const a22 = a[10]; const\n    a23 = a[11];\n  const a30 = a[12]; const a31 = a[13]; const a32 = a[14]; const\n    a33 = a[15];\n\n  const b00 = a00 * a11 - a01 * a10;\n  const b01 = a00 * a12 - a02 * a10;\n  const b02 = a00 * a13 - a03 * a10;\n  const b03 = a01 * a12 - a02 * a11;\n  const b04 = a01 * a13 - a03 * a11;\n  const b05 = a02 * a13 - a03 * a12;\n  const b06 = a20 * a31 - a21 * a30;\n  const b07 = a20 * a32 - a22 * a30;\n  const b08 = a20 * a33 - a23 * a30;\n  const b09 = a21 * a32 - a22 * a31;\n  const b10 = a21 * a33 - a23 * a31;\n  const b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det)\n  {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height)\n{\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n\n  return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a)\n{\n  return `mat3(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]}, ${a[4]}, ${a[5]}, ${a[6]}, ${a[7]}, ${a[8]})`;\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a)\n{\n  return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)));\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b)\n{\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b)\n{\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b)\n{\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale)\n{\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b)\n{\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2]\n    && a[3] === b[3] && a[4] === b[4] && a[5] === b[5]\n    && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b)\n{\n  const a0 = a[0]; const a1 = a[1]; const a2 = a[2]; const a3 = a[3]; const a4 = a[4]; const a5 = a[5]; const a6 = a[6]; const a7 = a[7]; const\n    a8 = a[8];\n  const b0 = b[0]; const b1 = b[1]; const b2 = b[2]; const b3 = b[3]; const b4 = b[4]; const b5 = b[5]; const b6 = b[6]; const b7 = b[7]; const\n    b8 = b[8];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0))\n    && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1))\n    && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2))\n    && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3))\n    && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4))\n    && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5))\n    && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6))\n    && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7))\n    && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create()\n{\n  const out = new glMatrix.ARRAY_TYPE(16);\n  if (glMatrix.ARRAY_TYPE !== Float32Array)\n  {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a)\n{\n  const out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a)\n{\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n// eslint-disable-next-line max-params\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33)\n{\n  const out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n// eslint-disable-next-line max-params\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33)\n{\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n\n  return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out)\n{\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a)\n{\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a)\n  {\n    const a01 = a[1]; const a02 = a[2]; const\n      a03 = a[3];\n    const a12 = a[6]; const\n      a13 = a[7];\n    const a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  }\n  else\n  {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a)\n{\n  const a00 = a[0]; const a01 = a[1]; const a02 = a[2]; const\n    a03 = a[3];\n  const a10 = a[4]; const a11 = a[5]; const a12 = a[6]; const\n    a13 = a[7];\n  const a20 = a[8]; const a21 = a[9]; const a22 = a[10]; const\n    a23 = a[11];\n  const a30 = a[12]; const a31 = a[13]; const a32 = a[14]; const\n    a33 = a[15];\n\n  const b00 = a00 * a11 - a01 * a10;\n  const b01 = a00 * a12 - a02 * a10;\n  const b02 = a00 * a13 - a03 * a10;\n  const b03 = a01 * a12 - a02 * a11;\n  const b04 = a01 * a13 - a03 * a11;\n  const b05 = a02 * a13 - a03 * a12;\n  const b06 = a20 * a31 - a21 * a30;\n  const b07 = a20 * a32 - a22 * a30;\n  const b08 = a20 * a33 - a23 * a30;\n  const b09 = a21 * a32 - a22 * a31;\n  const b10 = a21 * a33 - a23 * a31;\n  const b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det)\n  {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a)\n{\n  const a00 = a[0]; const a01 = a[1]; const a02 = a[2]; const\n    a03 = a[3];\n  const a10 = a[4]; const a11 = a[5]; const a12 = a[6]; const\n    a13 = a[7];\n  const a20 = a[8]; const a21 = a[9]; const a22 = a[10]; const\n    a23 = a[11];\n  const a30 = a[12]; const a31 = a[13]; const a32 = a[14]; const\n    a33 = a[15];\n\n  out[0] = (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8] = (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a)\n{\n  const a00 = a[0]; const a01 = a[1]; const a02 = a[2]; const\n    a03 = a[3];\n  const a10 = a[4]; const a11 = a[5]; const a12 = a[6]; const\n    a13 = a[7];\n  const a20 = a[8]; const a21 = a[9]; const a22 = a[10]; const\n    a23 = a[11];\n  const a30 = a[12]; const a31 = a[13]; const a32 = a[14]; const\n    a33 = a[15];\n\n  const b00 = a00 * a11 - a01 * a10;\n  const b01 = a00 * a12 - a02 * a10;\n  const b02 = a00 * a13 - a03 * a10;\n  const b03 = a01 * a12 - a02 * a11;\n  const b04 = a01 * a13 - a03 * a11;\n  const b05 = a02 * a13 - a03 * a12;\n  const b06 = a20 * a31 - a21 * a30;\n  const b07 = a20 * a32 - a22 * a30;\n  const b08 = a20 * a33 - a23 * a30;\n  const b09 = a21 * a32 - a22 * a31;\n  const b10 = a21 * a33 - a23 * a31;\n  const b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b)\n{\n  const a00 = a[0]; const a01 = a[1]; const a02 = a[2]; const\n    a03 = a[3];\n  const a10 = a[4]; const a11 = a[5]; const a12 = a[6]; const\n    a13 = a[7];\n  const a20 = a[8]; const a21 = a[9]; const a22 = a[10]; const\n    a23 = a[11];\n  const a30 = a[12]; const a31 = a[13]; const a32 = a[14]; const\n    a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0 = b[0]; let b1 = b[1]; let b2 = b[2]; let\n    b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v)\n{\n  const x = v[0]; const y = v[1]; const\n    z = v[2];\n  let a00; let a01; let a02; let\n    a03;\n  let a10; let a11; let a12; let\n    a13;\n  let a20; let a21; let a22; let\n    a23;\n\n  if (a === out)\n  {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  }\n  else\n  {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v)\n{\n  const x = v[0]; const y = v[1]; const\n    z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis)\n{\n  let x = axis[0]; let y = axis[1]; let\n    z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const t = 1 - c;\n\n  const a00 = a[0]; const a01 = a[1]; const a02 = a[2]; const a03 = a[3];\n  const a10 = a[4]; const a11 = a[5]; const a12 = a[6]; const a13 = a[7];\n  const a20 = a[8]; const a21 = a[9]; const a22 = a[10]; const a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  const b00 = x * x * t + c; const b01 = y * x * t + z * s; const b02 = z * x * t - y * s;\n  const b10 = x * y * t - z * s; const b11 = y * y * t + c; const b12 = z * y * t + x * s;\n  const b20 = x * z * t + y * s; const b21 = y * z * t - x * s; const b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out)\n  { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad)\n{\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n\n  if (a !== out)\n  { // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad)\n{\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n\n  if (a !== out)\n  { // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad)\n{\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n\n  if (a !== out)\n  { // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v)\n{\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v)\n{\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis)\n{\n  let x = axis[0]; let y = axis[1]; let\n    z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad)\n{\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad)\n{\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad)\n{\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v)\n{\n  // Quaternion math\n  const x = q[0]; const y = q[1]; const z = q[2]; const\n    w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const xy = x * y2;\n  const xz = x * z2;\n  const yy = y * y2;\n  const yz = y * z2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a)\n{\n  const translation = new glMatrix.ARRAY_TYPE(3);\n  const bx = -a[0]; const by = -a[1]; const bz = -a[2]; const bw = a[3];\n  const ax = a[4]; const ay = a[5]; const az = a[6]; const\n    aw = a[7];\n\n  const magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  // Only scale if it makes sense\n  if (magnitude > 0)\n  {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  }\n  else\n  {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat)\n{\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat)\n{\n  const m11 = mat[0];\n  const m12 = mat[1];\n  const m13 = mat[2];\n  const m21 = mat[4];\n  const m22 = mat[5];\n  const m23 = mat[6];\n  const m31 = mat[8];\n  const m32 = mat[9];\n  const m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat)\n{\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  const trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0)\n  {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  }\n  else if ((mat[0] > mat[5]) && (mat[0] > mat[10]))\n  {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  }\n  else if (mat[5] > mat[10])\n  {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  }\n  else\n  {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s)\n{\n  // Quaternion math\n  const x = q[0]; const y = q[1]; const z = q[2]; const\n    w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const xy = x * y2;\n  const xz = x * z2;\n  const yy = y * y2;\n  const yz = y * z2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n  const sx = s[0];\n  const sy = s[1];\n  const sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o)\n{\n  // Quaternion math\n  const x = q[0]; const y = q[1]; const z = q[2]; const\n    w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const xy = x * y2;\n  const xz = x * z2;\n  const yy = y * y2;\n  const yz = y * z2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  const sx = s[0];\n  const sy = s[1];\n  const sz = s[2];\n\n  const ox = o[0];\n  const oy = o[1];\n  const oz = o[2];\n\n  const out0 = (1 - (yy + zz)) * sx;\n  const out1 = (xy + wz) * sx;\n  const out2 = (xz - wy) * sx;\n  const out4 = (xy - wz) * sy;\n  const out5 = (1 - (xx + zz)) * sy;\n  const out6 = (yz + wx) * sy;\n  const out8 = (xz + wy) * sz;\n  const out9 = (yz - wx) * sz;\n  const out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q)\n{\n  const x = q[0]; const y = q[1]; const z = q[2]; const\n    w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far)\n{\n  const rl = 1 / (right - left);\n  const tb = 1 / (top - bottom);\n  const nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far)\n{\n  const f = 1.0 / Math.tan(fovy / 2); let\n    nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (!far && far !== Infinity)\n  {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = (2 * far * near) * nf;\n  }\n  else\n  {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far)\n{\n  const upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  const downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  const leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  const rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  const xScale = 2.0 / (leftTan + rightTan);\n  const yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far)\n{\n  const lr = 1 / (left - right);\n  const bt = 1 / (bottom - top);\n  const nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up)\n{\n  let x0; let x1; let x2; let y0; let y1; let y2; let z0; let z1; let z2; let\n    len;\n  const eyex = eye[0];\n  const eyey = eye[1];\n  const eyez = eye[2];\n  const upx = up[0];\n  const upy = up[1];\n  const upz = up[2];\n  const centerx = center[0];\n  const centery = center[1];\n  const centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON\n    && Math.abs(eyey - centery) < glMatrix.EPSILON\n    && Math.abs(eyez - centerz) < glMatrix.EPSILON)\n  {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len)\n  {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  }\n  else\n  {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len)\n  {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  }\n  else\n  {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up)\n{\n  const eyex = eye[0];\n  const eyey = eye[1];\n  const eyez = eye[2];\n  const upx = up[0];\n  const upy = up[1];\n  const upz = up[2];\n\n  let z0 = eyex - target[0];\n  let z1 = eyey - target[1];\n  let z2 = eyez - target[2];\n\n  let len = z0 * z0 + z1 * z1 + z2 * z2;\n  if (len > 0)\n  {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1;\n  let x1 = upz * z0 - upx * z2;\n  let x2 = upx * z1 - upy * z0;\n\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n  if (len > 0)\n  {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a)\n{\n  return `mat4(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]}, ${a[4]}, ${a[5]}, ${a[6]}, ${a[7]}, ${a[8]}, ${a[9]}, ${a[10]}, ${a[11]}, ${a[12]}, ${a[13]}, ${a[14]}, ${a[15]})`;\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a)\n{\n  return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2)));\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b)\n{\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b)\n{\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b)\n{\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale)\n{\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b)\n{\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3]\n    && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7]\n    && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11]\n    && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b)\n{\n  const a0 = a[0]; const a1 = a[1]; const a2 = a[2]; const\n    a3 = a[3];\n  const a4 = a[4]; const a5 = a[5]; const a6 = a[6]; const\n    a7 = a[7];\n  const a8 = a[8]; const a9 = a[9]; const a10 = a[10]; const\n    a11 = a[11];\n  const a12 = a[12]; const a13 = a[13]; const a14 = a[14]; const\n    a15 = a[15];\n\n  const b0 = b[0]; const b1 = b[1]; const b2 = b[2]; const\n    b3 = b[3];\n  const b4 = b[4]; const b5 = b[5]; const b6 = b[6]; const\n    b7 = b[7];\n  const b8 = b[8]; const b9 = b[9]; const b10 = b[10]; const\n    b11 = b[11];\n  const b12 = b[12]; const b13 = b[13]; const b14 = b[14]; const\n    b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0))\n    && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1))\n    && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2))\n    && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3))\n    && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4))\n    && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5))\n    && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6))\n    && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7))\n    && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8))\n    && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9))\n    && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10))\n    && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11))\n    && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12))\n    && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13))\n    && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14))\n    && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create()\n{\n  const out = new glMatrix.ARRAY_TYPE(3);\n  if (glMatrix.ARRAY_TYPE !== Float32Array)\n  {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a)\n{\n  const out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a)\n{\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z)\n{\n  const out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a)\n{\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z)\n{\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b)\n{\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b)\n{\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b)\n{\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b)\n{\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a)\n{\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a)\n{\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b)\n{\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b)\n{\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a)\n{\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b)\n{\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale)\n{\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b)\n{\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b)\n{\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n\n  return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a)\n{\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n\n  return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a)\n{\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a)\n{\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a)\n{\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  let len = x * x + y * y + z * z;\n  if (len > 0)\n  {\n    // TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b)\n{\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b)\n{\n  const ax = a[0]; const ay = a[1]; const\n    az = a[2];\n  const bx = b[0]; const by = b[1]; const\n    bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t)\n{\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t)\n{\n  const factorTimes2 = t * t;\n  const factor1 = factorTimes2 * (2 * t - 3) + 1;\n  const factor2 = factorTimes2 * (t - 2) + t;\n  const factor3 = factorTimes2 * (t - 1);\n  const factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t)\n{\n  const inverseFactor = 1 - t;\n  const inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  const factorTimes2 = t * t;\n  const factor1 = inverseFactorTimesTwo * inverseFactor;\n  const factor2 = 3 * t * inverseFactorTimesTwo;\n  const factor3 = 3 * factorTimes2 * inverseFactor;\n  const factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale)\n{\n  scale = scale || 1.0;\n\n  const r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  const z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  const zScale = Math.sqrt(1.0 - z * z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m)\n{\n  const x = a[0]; const y = a[1]; const\n    z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m)\n{\n  const x = a[0]; const y = a[1]; const\n    z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q)\n{\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  const qx = q[0]; const qy = q[1]; const qz = q[2]; const\n    qw = q[3];\n  const x = a[0]; const y = a[1]; const\n    z = a[2];\n  // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n  let uvx = qy * z - qz * y;\n  let uvy = qz * x - qx * z;\n  let uvz = qx * y - qy * x;\n  // var uuv = vec3.cross([], qvec, uv);\n  let uuvx = qy * uvz - qz * uvy;\n  let uuvy = qz * uvx - qx * uvz;\n  let uuvz = qx * uvy - qy * uvx;\n  // vec3.scale(uv, uv, 2 * w);\n  const w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2;\n  // vec3.scale(uuv, uuv, 2);\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2;\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c)\n{\n  const p = []; const\n    r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\n\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c)\n{\n  const p = []; const\n    r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\n\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c)\n{\n  const p = []; const\n    r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2];\n\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b)\n{\n  const tempA = fromValues(a[0], a[1], a[2]);\n  const tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  const cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0)\n  {\n    return 0;\n  }\n  else if (cosine < -1.0)\n  {\n    return Math.PI;\n  }\n\n  return Math.acos(cosine);\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a)\n{\n  return `vec3(${a[0]}, ${a[1]}, ${a[2]})`;\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b)\n{\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b)\n{\n  const a0 = a[0]; const a1 = a[1]; const\n    a2 = a[2];\n  const b0 = b[0]; const b1 = b[1]; const\n    b2 = b[2];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0))\n    && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1))\n    && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function ()\n{\n  const vec = create();\n\n  return function (a, stride, offset, count, fn, arg)\n  {\n    let i; let\n      l;\n    if (!stride)\n    {\n      stride = 3;\n    }\n\n    if (!offset)\n    {\n      offset = 0;\n    }\n\n    if (count)\n    {\n      l = Math.min((count * stride) + offset, a.length);\n    }\n    else\n    {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride)\n    {\n      vec[0] = a[i]; vec[1] = a[i + 1]; vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i + 1] = vec[1]; a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create()\n{\n  const out = new glMatrix.ARRAY_TYPE(4);\n  if (glMatrix.ARRAY_TYPE !== Float32Array)\n  {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a)\n{\n  const out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w)\n{\n  const out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a)\n{\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w)\n{\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b)\n{\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b)\n{\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b)\n{\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b)\n{\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a)\n{\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a)\n{\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b)\n{\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b)\n{\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a)\n{\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b)\n{\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale)\n{\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b)\n{\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  const w = b[3] - a[3];\n\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b)\n{\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  const w = b[3] - a[3];\n\n  return x * x + y * y + z * z + w * w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a)\n{\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a)\n{\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n\n  return x * x + y * y + z * z + w * w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a)\n{\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a)\n{\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a)\n{\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  let len = x * x + y * y + z * z + w * w;\n  if (len > 0)\n  {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b)\n{\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t)\n{\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, scale)\n{\n  scale = scale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  let v1; let v2; let v3; let\n    v4;\n  let s1; let\n    s2;\n  do\n  {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do\n  {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  const d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m)\n{\n  const x = a[0]; const y = a[1]; const z = a[2]; const\n    w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q)\n{\n  const x = a[0]; const y = a[1]; const\n    z = a[2];\n  const qx = q[0]; const qy = q[1]; const qz = q[2]; const\n    qw = q[3];\n\n  // calculate quat * vec\n  const ix = qw * x + qy * z - qz * y;\n  const iy = qw * y + qz * x - qx * z;\n  const iz = qw * z + qx * y - qy * x;\n  const iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a)\n{\n  return `vec4(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b)\n{\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b)\n{\n  const a0 = a[0]; const a1 = a[1]; const a2 = a[2]; const\n    a3 = a[3];\n  const b0 = b[0]; const b1 = b[1]; const b2 = b[2]; const\n    b3 = b[3];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0))\n    && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1))\n    && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2))\n    && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function ()\n{\n  const vec = create();\n\n  return function (a, stride, offset, count, fn, arg)\n  {\n    let i; let\n      l;\n    if (!stride)\n    {\n      stride = 4;\n    }\n\n    if (!offset)\n    {\n      offset = 0;\n    }\n\n    if (count)\n    {\n      l = Math.min((count * stride) + offset, a.length);\n    }\n    else\n    {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride)\n    {\n      vec[0] = a[i]; vec[1] = a[i + 1]; vec[2] = a[i + 2]; vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i + 1] = vec[1]; a[i + 2] = vec[2]; a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common\";\nimport * as mat3 from \"./mat3\";\nimport * as vec3 from \"./vec3\";\nimport * as vec4 from \"./vec4\";\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create()\n{\n  const out = new glMatrix.ARRAY_TYPE(4);\n  if (glMatrix.ARRAY_TYPE !== Float32Array)\n  {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[3] = 1;\n\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out)\n{\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad)\n{\n  rad = rad * 0.5;\n  const s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} outAxis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(outAxis, q)\n{\n  const rad = Math.acos(q[3]) * 2.0;\n  const s = Math.sin(rad / 2.0);\n  if (s > glMatrix.EPSILON)\n  {\n    outAxis[0] = q[0] / s;\n    outAxis[1] = q[1] / s;\n    outAxis[2] = q[2] / s;\n  }\n  else\n  {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    outAxis[0] = 1;\n    outAxis[1] = 0;\n    outAxis[2] = 0;\n  }\n\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b)\n{\n  const ax = a[0]; const ay = a[1]; const az = a[2]; const\n    aw = a[3];\n  const bx = b[0]; const by = b[1]; const bz = b[2]; const\n    bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad)\n{\n  rad *= 0.5;\n\n  const ax = a[0]; const ay = a[1]; const az = a[2]; const\n    aw = a[3];\n  const bx = Math.sin(rad); const\n    bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad)\n{\n  rad *= 0.5;\n\n  const ax = a[0]; const ay = a[1]; const az = a[2]; const\n    aw = a[3];\n  const by = Math.sin(rad); const\n    bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad)\n{\n  rad *= 0.5;\n\n  const ax = a[0]; const ay = a[1]; const az = a[2]; const\n    aw = a[3];\n  const bz = Math.sin(rad); const\n    bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a)\n{\n  const x = a[0]; const y = a[1]; const\n    z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t)\n{\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  const ax = a[0]; const ay = a[1]; const az = a[2]; const\n    aw = a[3];\n  let bx = b[0]; let by = b[1]; let bz = b[2]; let\n    bw = b[3];\n\n  let omega; let cosom; let sinom; let scale0; let\n    scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if (cosom < 0.0)\n  {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  }\n  // calculate coefficients\n  if ((1.0 - cosom) > glMatrix.EPSILON)\n  {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  }\n  else\n  {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Generates a random quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function random(out)\n{\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  const u1 = glMatrix.RANDOM();\n  const u2 = glMatrix.RANDOM();\n  const u3 = glMatrix.RANDOM();\n\n  const sqrt1MinusU1 = Math.sqrt(1 - u1);\n  const sqrtU1 = Math.sqrt(u1);\n\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a)\n{\n  const a0 = a[0]; const a1 = a[1]; const a2 = a[2]; const\n    a3 = a[3];\n  const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  const invDot = dot ? 1.0 / dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a)\n{\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m)\n{\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  const fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if (fTrace > 0.0)\n  {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  }\n  else\n  {\n    // |w| <= 1/2\n    let i = 0;\n    if (m[4] > m[0])\n    { i = 1; }\n    if (m[8] > m[i * 3 + i])\n    { i = 2; }\n    const j = (i + 1) % 3;\n    const k = (i + 2) % 3;\n\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z)\n{\n  const halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n\n  const sx = Math.sin(x);\n  const cx = Math.cos(x);\n  const sy = Math.sin(y);\n  const cy = Math.cos(y);\n  const sz = Math.sin(z);\n  const cz = Math.cos(z);\n\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n\n  return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a)\n{\n  return `quat(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function ()\n{\n  const tmpvec3 = vec3.create();\n  const xUnitVec3 = vec3.fromValues(1, 0, 0);\n  const yUnitVec3 = vec3.fromValues(0, 1, 0);\n\n  return function (out, a, b)\n  {\n    const dot = vec3.dot(a, b);\n    if (dot < -0.999999)\n    {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n      { vec3.cross(tmpvec3, yUnitVec3, a); }\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n\n      return out;\n    }\n    else if (dot > 0.999999)\n    {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n\n      return out;\n    }\n    vec3.cross(tmpvec3, a, b);\n    out[0] = tmpvec3[0];\n    out[1] = tmpvec3[1];\n    out[2] = tmpvec3[2];\n    out[3] = 1 + dot;\n\n    return normalize(out, out);\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function ()\n{\n  const temp1 = create();\n  const temp2 = create();\n\n  return function (out, a, b, c, d, t)\n  {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function ()\n{\n  const matr = mat3.create();\n\n  return function (out, view, right, up)\n  {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n","import * as glMatrix from \"./common\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create()\n{\n  const out = new glMatrix.ARRAY_TYPE(2);\n  if (glMatrix.ARRAY_TYPE !== Float32Array)\n  {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a)\n{\n  const out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y)\n{\n  const out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a)\n{\n  out[0] = a[0];\n  out[1] = a[1];\n\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y)\n{\n  out[0] = x;\n  out[1] = y;\n\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b)\n{\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b)\n{\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b)\n{\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b)\n{\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a)\n{\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a)\n{\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b)\n{\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b)\n{\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round(out, a)\n{\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b)\n{\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale)\n{\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b)\n{\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b)\n{\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n\n  return x * x + y * y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a)\n{\n  const x = a[0];\n  const y = a[1];\n\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a)\n{\n  const x = a[0];\n  const y = a[1];\n\n  return x * x + y * y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a)\n{\n  out[0] = -a[0];\n  out[1] = -a[1];\n\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a)\n{\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a)\n{\n  const x = a[0];\n  const y = a[1];\n  let len = x * x + y * y;\n  if (len > 0)\n  {\n    // TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b)\n{\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b)\n{\n  const z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t)\n{\n  const ax = a[0];\n  const ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale)\n{\n  scale = scale || 1.0;\n  const r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m)\n{\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m)\n{\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m)\n{\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m)\n{\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c)\n{\n  // Translate point to the origin\n  const p0 = a[0] - b[0];\n  const p1 = a[1] - b[1];\n  const sinC = Math.sin(c);\n  const cosC = Math.cos(c);\n\n  // perform rotation and translate to correct position\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b)\n{\n  const x1 = a[0];\n  const y1 = a[1];\n  const x2 = b[0];\n  const y2 = b[1];\n\n  let len1 = x1 * x1 + y1 * y1;\n  if (len1 > 0)\n  {\n    // TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  let len2 = x2 * x2 + y2 * y2;\n  if (len2 > 0)\n  {\n    // TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  const cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0)\n  {\n    return 0;\n  }\n  else if (cosine < -1.0)\n  {\n    return Math.PI;\n  }\n\n  return Math.acos(cosine);\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a)\n{\n  return `vec2(${a[0]}, ${a[1]})`;\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b)\n{\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b)\n{\n  const a0 = a[0]; const\n    a1 = a[1];\n  const b0 = b[0]; const\n    b1 = b[1];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0))\n    && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function ()\n{\n  const vec = create();\n\n  return function (a, stride, offset, count, fn, arg)\n  {\n    let i; let\n      l;\n    if (!stride)\n    {\n      stride = 2;\n    }\n\n    if (!offset)\n    {\n      offset = 0;\n    }\n\n    if (count)\n    {\n      l = Math.min((count * stride) + offset, a.length);\n    }\n    else\n    {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride)\n    {\n      vec[0] = a[i]; vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n","// @see https://github.com/mikolalysenko/orbit-camera\n\nimport * as glm from \"../toji/gl-matrix\";\n\nconst vec3 = glm.vec3;\nconst mat3 = glm.mat3;\nconst mat4 = glm.mat4;\nconst quat = glm.quat;\n\n// Scratch variables\nconst scratch0 = new Float32Array(16);\nconst scratch1 = new Float32Array(16);\n\nfunction OrbitCamera(rotation, center, distance)\n{\n    this.rotation = rotation;\n    this.center = center;\n    this.distance = distance;\n}\n\nconst proto = OrbitCamera.prototype;\n\nproto.view = function (out)\n{\n    if (!out)\n    {\n        out = mat4.create();\n    }\n    scratch1[0] = scratch1[1] = 0.0;\n    scratch1[2] = -this.distance;\n    mat4.fromRotationTranslation(out,\n        quat.conjugate(scratch0, this.rotation),\n        scratch1);\n    mat4.translate(out, out, vec3.negate(scratch0, this.center));\n\n    return out;\n};\n\nproto.lookAt = function (eye, center, up)\n{\n    mat4.lookAt(scratch0, eye, center, up);\n    mat3.fromMat4(scratch0, scratch0);\n    quat.fromMat3(this.rotation, scratch0);\n    vec3.copy(this.center, center);\n    this.distance = vec3.distance(eye, center);\n};\n\nproto.pan = function (dpan)\n{\n    const d = this.distance;\n    scratch0[0] = -d * (dpan[0] || 0);\n    scratch0[1] = d * (dpan[1] || 0);\n    scratch0[2] = d * (dpan[2] || 0);\n    vec3.transformQuat(scratch0, scratch0, this.rotation);\n    vec3.add(this.center, this.center, scratch0);\n};\n\nproto.zoom = function (d)\n{\n    this.distance += d;\n    if (this.distance < 0.0)\n    {\n        this.distance = 0.0;\n    }\n};\n\nfunction quatFromVec(out, da)\n{\n    const x = da[0];\n    const y = da[1];\n    let s = x * x + y * y;\n    if (s > 1.0)\n    {\n        s = 1.0;\n    }\n    out[0] = -da[0];\n    out[1] = da[1];\n    out[2] = da[2] || Math.sqrt(1.0 - s);\n    out[3] = 0.0;\n}\n\nproto.rotate = function (da, db)\n{\n    quatFromVec(scratch0, da);\n    quatFromVec(scratch1, db);\n    quat.invert(scratch1, scratch1);\n    quat.multiply(scratch0, scratch0, scratch1);\n    if (quat.length(scratch0) < 1e-6)\n    {\n        return;\n    }\n    quat.multiply(this.rotation, this.rotation, scratch0);\n    quat.normalize(this.rotation, this.rotation);\n};\n\nexport function createOrbitCamera(eye, target, up)\n{\n    eye = eye || [0, 0, -1];\n    target = target || [0, 0, 0];\n    up = up || [0, 1, 0];\n    const camera = new OrbitCamera(quat.create(), vec3.create(), 1.0);\n    camera.lookAt(eye, target, up);\n\n    return camera;\n}\n","const ua = typeof window !== \"undefined\" ? window.navigator.userAgent : \"\";\nconst isOSX = (/OS X/).test(ua);\nconst isOpera = (/Opera/).test(ua);\nconst maybeFirefox = !(/like Gecko/).test(ua) && !isOpera;\n\nlet i;\nexport const output = {\n    0: isOSX ? \"<menu>\" : \"<UNK>\",\n    1: \"<mouse 1>\",\n    2: \"<mouse 2>\",\n    3: \"<break>\",\n    4: \"<mouse 3>\",\n    5: \"<mouse 4>\",\n    6: \"<mouse 5>\",\n    8: \"<backspace>\",\n    9: \"<tab>\",\n    12: \"<clear>\",\n    13: \"<enter>\",\n    16: \"<shift>\",\n    17: \"<control>\",\n    18: \"<alt>\",\n    19: \"<pause>\",\n    20: \"<caps-lock>\",\n    21: \"<ime-hangul>\",\n    23: \"<ime-junja>\",\n    24: \"<ime-final>\",\n    25: \"<ime-kanji>\",\n    27: \"<escape>\",\n    28: \"<ime-convert>\",\n    29: \"<ime-nonconvert>\",\n    30: \"<ime-accept>\",\n    31: \"<ime-mode-change>\",\n    32: \"<space>\",\n    33: \"<page-up>\",\n    34: \"<page-down>\",\n    35: \"<end>\",\n    36: \"<home>\",\n    37: \"<left>\",\n    38: \"<up>\",\n    39: \"<right>\",\n    40: \"<down>\",\n    41: \"<select>\",\n    42: \"<print>\",\n    43: \"<execute>\",\n    44: \"<snapshot>\",\n    45: \"<insert>\",\n    46: \"<delete>\",\n    47: \"<help>\",\n    91: \"<meta>\", // meta-left -- no one handles left and right properly, so we coerce into one.\n    92: \"<meta>\", // meta-right\n    93: isOSX ? \"<meta>\" : \"<menu>\", // chrome,opera,safari all report this for meta-right (osx mbp).\n    95: \"<sleep>\",\n    106: \"<num-*>\",\n    107: \"<num-+>\",\n    108: \"<num-enter>\",\n    109: \"<num-->\",\n    110: \"<num-.>\",\n    111: \"<num-/>\",\n    144: \"<num-lock>\",\n    145: \"<scroll-lock>\",\n    160: \"<shift-left>\",\n    161: \"<shift-right>\",\n    162: \"<control-left>\",\n    163: \"<control-right>\",\n    164: \"<alt-left>\",\n    165: \"<alt-right>\",\n    166: \"<browser-back>\",\n    167: \"<browser-forward>\",\n    168: \"<browser-refresh>\",\n    169: \"<browser-stop>\",\n    170: \"<browser-search>\",\n    171: \"<browser-favorites>\",\n    172: \"<browser-home>\",\n\n    // ff/osx reports '<volume-mute>' for '-'\n    173: isOSX && maybeFirefox ? \"-\" : \"<volume-mute>\",\n    174: \"<volume-down>\",\n    175: \"<volume-up>\",\n    176: \"<next-track>\",\n    177: \"<prev-track>\",\n    178: \"<stop>\",\n    179: \"<play-pause>\",\n    180: \"<launch-mail>\",\n    181: \"<launch-media-select>\",\n    182: \"<launch-app 1>\",\n    183: \"<launch-app 2>\",\n    186: \";\",\n    187: \"=\",\n    188: \",\",\n    189: \"-\",\n    190: \".\",\n    191: \"/\",\n    192: \"`\",\n    219: \"[\",\n    220: \"\\\\\",\n    221: \"]\",\n    222: \"'\",\n    223: \"<meta>\",\n    224: \"<meta>\", // firefox reports meta here.\n    226: \"<alt-gr>\",\n    229: \"<ime-process>\",\n    231: isOpera ? \"`\" : \"<unicode>\",\n    246: \"<attention>\",\n    247: \"<crsel>\",\n    248: \"<exsel>\",\n    249: \"<erase-eof>\",\n    250: \"<play>\",\n    251: \"<zoom>\",\n    252: \"<no-name>\",\n    253: \"<pa-1>\",\n    254: \"<clear>\"\n};\n\nfor (i = 58; i < 65; ++i)\n{\n    output[i] = String.fromCharCode(i);\n}\n\n// 0-9\nfor (i = 48; i < 58; ++i)\n{\n    output[i] = `${i - 48}`;\n}\n\n// A-Z\nfor (i = 65; i < 91; ++i)\n{\n    output[i] = String.fromCharCode(i);\n}\n\n// num0-9\nfor (i = 96; i < 106; ++i)\n{\n    output[i] = `<num-${i - 96}>`;\n}\n\n// F1-F24\nfor (i = 112; i < 136; ++i)\n{\n    output[i] = `F${i - 111}`;\n}\n","import { output as keys } from \"./vkey\";\nconst list = Object.keys(keys);\nconst down = {};\n\nreset();\n\nwindow.addEventListener(\"keydown\", keydown, false);\nwindow.addEventListener(\"keyup\", keyup, false);\nwindow.addEventListener(\"blur\", reset, false);\n\nexport function pressed(key)\n{\n    return key\n        ? down[key]\n        : down;\n}\n\nfunction reset()\n{\n    list.forEach(function (code)\n    {\n        down[keys[code]] = false;\n    });\n}\n\nfunction keyup(e)\n{\n    down[keys[e.keyCode]] = false;\n}\n\nfunction keydown(e)\n{\n    down[keys[e.keyCode]] = true;\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport function EventEmitter()\n{\n    this._events = this._events || {};\n    this._maxListeners = this._maxListeners || undefined;\n}\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function (n)\n{\n    if (!isNumber(n) || n < 0 || isNaN(n))\n    { throw TypeError(\"n must be a positive number\"); }\n    this._maxListeners = n;\n\n    return this;\n};\n\nEventEmitter.prototype.emit = function (type)\n{\n    let er; let len; let args; let i;\n    let listeners;\n\n    if (!this._events)\n    { this._events = {}; }\n\n    // If there is no 'error' event listener then throw.\n    if (type === \"error\")\n    {\n        if (!this._events.error\n            || (isObject(this._events.error) && !this._events.error.length))\n        {\n            // eslint-disable-next-line prefer-rest-params\n            er = arguments[1];\n            if (er instanceof Error)\n            {\n                throw er; // Unhandled 'error' event\n            }\n            else\n            {\n                // At least give some kind of context to the user\n                const err = new Error(`Uncaught, unspecified \"error\" event. (${er})`);\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                err.context = er;\n                throw err;\n            }\n        }\n    }\n\n    const handler = this._events[type];\n\n    if (isUndefined(handler))\n    { return false; }\n\n    if (isFunction(handler))\n    {\n        switch (arguments.length)\n        {\n            // fast cases\n            case 1:\n                handler.call(this);\n                break;\n            case 2:\n                // eslint-disable-next-line prefer-rest-params\n                handler.call(this, arguments[1]);\n                break;\n            case 3:\n                // eslint-disable-next-line prefer-rest-params\n                handler.call(this, arguments[1], arguments[2]);\n                break;\n            // slower\n            default:\n                // eslint-disable-next-line prefer-rest-params\n                args = Array.prototype.slice.call(arguments, 1);\n                handler.apply(this, args);\n        }\n    }\n    else if (isObject(handler))\n    {\n        // eslint-disable-next-line prefer-rest-params\n        args = Array.prototype.slice.call(arguments, 1);\n        listeners = handler.slice();\n        len = listeners.length;\n        for (i = 0; i < len; i++)\n        { listeners[i].apply(this, args); }\n    }\n\n    return true;\n};\n\nEventEmitter.prototype.addListener = function (type, listener)\n{\n    let m;\n\n    if (!isFunction(listener))\n    { throw TypeError(\"listener must be a function\"); }\n\n    if (!this._events)\n    { this._events = {}; }\n\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (this._events.newListener)\n    {\n        this.emit(\"newListener\", type,\n            isFunction(listener.listener)\n                ? listener.listener : listener);\n    }\n\n    if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    { this._events[type] = listener; }\n    else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    { this._events[type].push(listener); }\n    else\n    // Adding the second element, need to change to array.\n    { this._events[type] = [this._events[type], listener]; }\n\n    // Check for listener leak\n    if (isObject(this._events[type]) && !this._events[type].warned)\n    {\n        if (!isUndefined(this._maxListeners))\n        {\n            m = this._maxListeners;\n        }\n        else\n        {\n            m = EventEmitter.defaultMaxListeners;\n        }\n\n        if (m && m > 0 && this._events[type].length > m)\n        {\n            this._events[type].warned = true;\n            console.error(\"(node) warning: possible EventEmitter memory \"\n                + \"leak detected. %d listeners added. \"\n                + \"Use emitter.setMaxListeners() to increase limit.\",\n                this._events[type].length);\n            if (typeof console.trace === \"function\")\n            {\n                // not supported in IE 10\n                console.trace();\n            }\n        }\n    }\n\n    return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function (type, listener)\n{\n    if (!isFunction(listener))\n    { throw TypeError(\"listener must be a function\"); }\n\n    let fired = false;\n\n    function g()\n    {\n        this.removeListener(type, g);\n\n        if (!fired)\n        {\n            fired = true;\n            // eslint-disable-next-line prefer-rest-params\n            listener.apply(this, arguments);\n        }\n    }\n\n    g.listener = listener;\n    this.on(type, g);\n\n    return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function (type, listener)\n{\n    let position;\n    let i;\n\n    if (!isFunction(listener))\n    { throw TypeError(\"listener must be a function\"); }\n\n    if (!this._events || !this._events[type])\n    { return this; }\n\n    const list = this._events[type];\n    const length = list.length;\n    position = -1;\n\n    if (list === listener\n        || (isFunction(list.listener) && list.listener === listener))\n    {\n        delete this._events[type];\n        if (this._events.removeListener)\n        { this.emit(\"removeListener\", type, listener); }\n    }\n    else if (isObject(list))\n    {\n        for (i = length; i-- > 0;)\n        {\n            if (list[i] === listener\n                || (list[i].listener && list[i].listener === listener))\n            {\n                position = i;\n                break;\n            }\n        }\n\n        if (position < 0)\n        { return this; }\n\n        if (list.length === 1)\n        {\n            list.length = 0;\n            delete this._events[type];\n        }\n        else\n        {\n            list.splice(position, 1);\n        }\n\n        if (this._events.removeListener)\n        { this.emit(\"removeListener\", type, listener); }\n    }\n\n    return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function (type)\n{\n    let key;\n\n    if (!this._events)\n    {\n        return this;\n    }\n\n    // not listening for removeListener, no need to emit\n    if (!this._events.removeListener)\n    {\n        if (arguments.length === 0)\n        { this._events = {}; }\n        else if (this._events[type])\n        { delete this._events[type]; }\n\n        return this;\n    }\n\n    // emit removeListener for all listeners on all events\n    if (arguments.length === 0)\n    {\n        for (key in this._events)\n        {\n            if (key === \"removeListener\") continue;\n            this.removeAllListeners(key);\n        }\n        this.removeAllListeners(\"removeListener\");\n        this._events = {};\n\n        return this;\n    }\n\n    const listeners = this._events[type];\n\n    if (isFunction(listeners))\n    {\n        this.removeListener(type, listeners);\n    }\n    else if (listeners)\n    {\n        // LIFO order\n        while (listeners.length)\n        { this.removeListener(type, listeners[listeners.length - 1]); }\n    }\n    delete this._events[type];\n\n    return this;\n};\n\nEventEmitter.prototype.listeners = function (type)\n{\n    let ret;\n    if (!this._events || !this._events[type])\n    { ret = []; }\n    else if (isFunction(this._events[type]))\n    { ret = [this._events[type]]; }\n    else\n    { ret = this._events[type].slice(); }\n\n    return ret;\n};\n\nEventEmitter.prototype.listenerCount = function (type)\n{\n    if (this._events)\n    {\n        const evlistener = this._events[type];\n\n        if (isFunction(evlistener))\n        { return 1; }\n        else if (evlistener)\n        { return evlistener.length; }\n    }\n\n    return 0;\n};\n\nEventEmitter.listenerCount = function (emitter, type)\n{\n    return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg)\n{\n    return typeof arg === \"function\";\n}\n\nfunction isNumber(arg)\n{\n    return typeof arg === \"number\";\n}\n\nfunction isObject(arg)\n{\n    return typeof arg === \"object\" && arg !== null;\n}\n\nfunction isUndefined(arg)\n{\n    // eslint-disable-next-line no-void\n    return arg === void 0;\n}\n\n","// @see https://github.com/hughsk/mouse-position\n\nimport { EventEmitter as Emitter } from \"../Gozala/events\";\n\nexport function attach(element, listener?)\n{\n    const position = new Emitter();\n\n    position[0] = 0;\n    position[1] = 0;\n    position.prev = [0, 0];\n    position.flush = flush;\n    position.dispose = dispose;\n\n    if (typeof window === \"undefined\")\n    {\n        return position;\n    }\n\n    listener = listener || element || window;\n    element = element || document.body;\n    const handler = (element === document.body || element === window\n    ) ? function (e)\n    {\n        position.prev[0] = position[0];\n        position.prev[1] = position[1];\n        position[0] = e.clientX;\n        position[1] = e.clientY;\n        position.emit(\"move\", e);\n    }\n        : function (e)\n        {\n            position.prev[0] = position[0];\n            position.prev[1] = position[1];\n            const bounds = element.getBoundingClientRect();\n            position[0] = e.clientX - bounds.left;\n            position[1] = e.clientY - bounds.top;\n            position.emit(\"move\", e);\n        };\n    listener.addEventListener(\"mousemove\", handler, false);\n\n    return position;\n\n    function flush()\n    {\n        position.prev[0] = position[0];\n        position.prev[1] = position[1];\n    }\n\n    function dispose()\n    {\n        position.removeAllListeners(\"move\");\n        listener.removeEventListener(\"mousemove\", handler);\n    }\n}\n","import { EventEmitter as Emitter } from \"../Gozala/events\";\n\nconst map = [\n    \"left\",\n    \"middle\",\n    \"right\"\n];\n\nexport function pressed(element, preventDefault)\n{\n    const mouse = new Emitter();\n\n    mouse.left = false;\n    mouse.right = false;\n    mouse.middle = false;\n    mouse.dispose = dispose;\n\n    if (typeof window !== \"undefined\")\n    {\n        element = element || window;\n        element.addEventListener(\"mousedown\", mousedown, false);\n        window.addEventListener(\"mouseup\", mouseup, false);\n\n        if (preventDefault)\n        {\n            element.addEventListener(\"contextmenu\", preventDefaulter, false);\n        }\n    }\n\n    return mouse;\n\n    function mousedown(e)\n    {\n        mouse.right = false;\n        mouse[map[e.button]] = true;\n        mouse.emit(\"down\", e);\n\n        if (!preventDefault) return;\n        if (!e.preventDefault) return false;\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    function mouseup(e)\n    {\n        mouse.right = false;\n        mouse[map[e.button]] = false;\n        mouse.emit(\"up\", e);\n\n        if (!preventDefault) return;\n        if (!e.preventDefault) return;\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    function preventDefaulter(e)\n    {\n        return e.preventDefault && e.preventDefault() && false;\n    }\n\n    function dispose()\n    {\n        mouse.left = false;\n        mouse.right = false;\n        mouse.middle = false;\n\n        if (element)\n        {\n            element.removeEventListener(\"contextmenu\", preventDefaulter, false);\n            element.removeEventListener(\"mousedown\", mousedown, false);\n            window.removeEventListener(\"mouseup\", mouseup, false);\n        }\n    }\n}\n","/**\n * This module unifies handling of mouse whee event accross different browsers\n *\n * See https://developer.mozilla.org/en-US/docs/Web/Reference/Events/wheel?redirectlocale=en-US&redirectslug=DOM%2FMozilla_event_reference%2Fwheel\n * for more details\n *\n * Usage:\n *  var addWheelListener = require('wheel');\n *  addWheelListener(domElement, function (e) {\n *    // mouse wheel event\n *  });\n */\n\nlet prefix = \"\";\nlet _addEventListener;\n\n// detect event model\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nif (window.addEventListener)\n{\n    _addEventListener = \"addEventListener\";\n}\nelse\n{\n    _addEventListener = \"attachEvent\";\n    prefix = \"on\";\n}\n\n// detect available wheel event\nconst support = \"onwheel\" in document.createElement(\"div\") ? \"wheel\" // Modern browsers support \"wheel\"\n    // eslint-disable-next-line dot-notation\n    : document[\"onmousewheel\"] !== undefined ? \"mousewheel\" // Webkit and IE support at least \"mousewheel\"\n        : \"DOMMouseScroll\"; // let's assume that remaining browsers are older Firefox\n\nexport function addWheelListener(elem, callback, useCapture)\n{\n    _addWheelListener(elem, support, callback, useCapture);\n\n    // handle MozMousePixelScroll in older Firefox\n    if (support === \"DOMMouseScroll\")\n    {\n        _addWheelListener(elem, \"MozMousePixelScroll\", callback, useCapture);\n    }\n}\n\nfunction _addWheelListener(elem, eventName, callback, useCapture)\n{\n    elem[_addEventListener](prefix + eventName, support === \"wheel\" ? callback : function (originalEvent)\n    {\n        !originalEvent && (originalEvent = window.event);\n\n        // create a normalized event object\n        const event = {\n            deltaY: 0,\n            // keep a ref to the original event object\n            originalEvent,\n            target: originalEvent.target || originalEvent.srcElement,\n            type: \"wheel\",\n            deltaMode: originalEvent.type === \"MozMousePixelScroll\" ? 0 : 1,\n            deltaX: 0,\n            delatZ: 0,\n            preventDefault()\n            {\n                originalEvent.preventDefault\n                    ? originalEvent.preventDefault()\n                    : originalEvent.returnValue = false;\n            }\n        };\n\n        // calculate deltaY (and deltaX) according to the event\n        if (support === \"mousewheel\")\n        {\n            event.deltaY = -1 / 40 * originalEvent.wheelDelta;\n            // Webkit also support wheelDeltaX\n            originalEvent.wheelDeltaX && (event.deltaX = -1 / 40 * originalEvent.wheelDeltaX);\n        }\n        else\n        {\n            event.deltaY = originalEvent.detail;\n        }\n\n        // it's time to fire the callback\n        return callback(event);\n    }, useCapture || false);\n}\n\n","import { addWheelListener as wheel } from \"../anvaka/wheel\";\nimport { EventEmitter as Emitter } from \"../Gozala/events\";\n\nexport function getScroller(element, preventDefault)\n{\n    const scroll = new Emitter();\n\n    scroll.flush = flush;\n    flush();\n\n    if (typeof window === \"undefined\")\n    {\n        return scroll;\n    }\n\n    element = element || window;\n    wheel(element, onscroll, false);\n\n    return scroll;\n\n    function flush()\n    {\n        scroll[0]\n            = scroll[1]\n            = scroll[2] = 0;\n    }\n\n    function onscroll(e)\n    {\n        // Normal/Line scrolling\n        const scale = e.deltaMode === 1 ? 12 : 1;\n\n        scroll[0] += scale * (e.deltaX || 0);\n        scroll[1] += scale * (e.deltaY || 0);\n        scroll[2] += scale * (e.deltaZ || 0);\n        scroll.emit(\"scroll\", scroll);\n\n        if (!preventDefault) return;\n        if (!e.preventDefault) return;\n\n        e.preventDefault();\n        if (e.stopPropagation) e.stopPropagation();\n    }\n}\n","import { createOrbitCamera as createCamera } from \"../mikolalysenko/orbit-camera\";\nimport { pressed as key } from \"./key-pressed\";\nimport { attach as mp } from \"./mouse-position\";\nimport { pressed as mb } from \"./mouse-pressed\";\nimport { getScroller as createScroll } from \"./scroll-speed\";\n\nconst panSpeed = 1;\n\nexport function attachCamera(canvas, opts?)\n{\n    opts = opts || {};\n    opts.pan = opts.pan !== false;\n    opts.scale = opts.scale !== false;\n    opts.rotate = opts.rotate !== false;\n\n    const scroll = createScroll(canvas, opts.scale);\n    const mbut = mb(canvas, opts.rotate);\n    const mpos = mp(canvas);\n    const camera = createCamera(\n        [0, 10, 30]\n        , [0, 0, 0]\n        , [0, 1, 0]\n    );\n\n    camera.tick = tick;\n\n    return camera;\n\n    function tick()\n    {\n        const ctrl = key(\"<control>\") || key(\"<alt>\");\n        const alt = key(\"<shift>\");\n        const height = canvas.height;\n        const width = canvas.width;\n\n        if (opts.rotate && mbut.left && !ctrl && !alt)\n        {\n            camera.rotate(\n                [mpos[0] / width - 0.5, mpos[1] / height - 0.5]\n                , [mpos.prev[0] / width - 0.5, mpos.prev[1] / height - 0.5]\n            );\n        }\n\n        if (opts.pan && mbut.right || (mbut.left && ctrl && !alt))\n        {\n            camera.pan([\n                panSpeed * (mpos[0] - mpos.prev[0]) / width,\n                panSpeed * (mpos[1] - mpos.prev[1]) / height\n            ]);\n        }\n\n        if (opts.scale && scroll[1])\n        {\n            camera.distance *= Math.exp(scroll[1] / height);\n        }\n\n        if (opts.scale && (mbut.middle || (mbut.left && !ctrl && alt)))\n        {\n            const d = mpos.y - mpos.prevY;\n            if (!d) return;\n\n            camera.distance *= Math.exp(d / height);\n        }\n\n        scroll.flush();\n        mpos.flush();\n    }\n}\n","export const EPSILON = 0.000001;\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create()\n{\n    const out = new Float32Array(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n\n    return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a)\n{\n    const out = new Float32Array(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n\n    return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b)\n{\n    const tempA = fromValues(a[0], a[1], a[2]);\n    const tempB = fromValues(b[0], b[1], b[2]);\n\n    normalize(tempA, tempA);\n    normalize(tempB, tempB);\n\n    const cosine = dot(tempA, tempB);\n\n    if (cosine > 1.0)\n    {\n        return 0;\n    }\n\n    return Math.acos(cosine);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z)\n{\n    const out = new Float32Array(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n\n    return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a)\n{\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n\n    return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z)\n{\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n\n    return out;\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b)\n{\n    const a0 = a[0];\n    const a1 = a[1];\n    const a2 = a[2];\n    const b0 = b[0];\n    const b1 = b[1];\n    const b2 = b[2];\n\n    return (Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0))\n        && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1))\n        && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b)\n{\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b)\n{\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b)\n{\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n\n    return out;\n}\n\nexport const sub = subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b)\n{\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n\n    return out;\n}\n\nexport const mul = multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b)\n{\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n\n    return out;\n}\n\nexport const div = divide;\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b)\n{\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n\n    return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b)\n{\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n\n    return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a)\n{\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n\n    return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a)\n{\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n\n    return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a)\n{\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n\n    return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b)\n{\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n\n    return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale)\n{\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b)\n{\n    const x = b[0] - a[0];\n    const y = b[1] - a[1];\n    const z = b[2] - a[2];\n\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\nexport const dist = distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b)\n{\n    const x = b[0] - a[0];\n    const y = b[1] - a[1];\n    const z = b[2] - a[2];\n\n    return x * x + y * y + z * z;\n}\n\nexport const sqrDist = squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a)\n{\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\nexport const len = length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a)\n{\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n\n    return x * x + y * y + z * z;\n}\n\nexport const sqrLen = squaredLength;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a)\n{\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a)\n{\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n\n    return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a)\n{\n    const x = a[0];\n    const y = a[1];\n    const z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0)\n    {\n        // TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n    }\n\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b)\n{\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b)\n{\n    const ax = a[0]; const ay = a[1]; const az = a[2];\n    const bx = b[0]; const by = b[1]; const\n        bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n\n    return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t)\n{\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n\n    return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale)\n{\n    scale = scale || 1.0;\n\n    const r = Math.random() * 2.0 * Math.PI;\n    const z = (Math.random() * 2.0) - 1.0;\n    const zScale = Math.sqrt(1.0 - z * z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m)\n{\n    const x = a[0]; const y = a[1]; const z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m)\n{\n    const x = a[0]; const y = a[1]; const\n        z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n\n    return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q)\n{\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    const x = a[0]; const y = a[1]; const z = a[2];\n    const qx = q[0]; const qy = q[1]; const qz = q[2]; const qw = q[3];\n\n    // calculate quat * vec\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c)\n{\n    const by = b[1];\n    const bz = b[2];\n\n    // Translate point to the origin\n    const py = a[1] - by;\n    const pz = a[2] - bz;\n\n    const sc = Math.sin(c);\n    const cc = Math.cos(c);\n\n    // perform rotation and translate to correct position\n    out[0] = a[0];\n    out[1] = by + py * cc - pz * sc;\n    out[2] = bz + py * sc + pz * cc;\n\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c)\n{\n    const bx = b[0];\n    const bz = b[2];\n\n    // translate point to the origin\n    const px = a[0] - bx;\n    const pz = a[2] - bz;\n\n    const sc = Math.sin(c);\n    const cc = Math.cos(c);\n\n    // perform rotation and translate to correct position\n    out[0] = bx + pz * sc + px * cc;\n    out[1] = a[1];\n    out[2] = bz + pz * cc - px * sc;\n\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c)\n{\n    const bx = b[0];\n    const by = b[1];\n\n    // Translate point to the origin\n    const px = a[0] - bx;\n    const py = a[1] - by;\n\n    const sc = Math.sin(c);\n    const cc = Math.cos(c);\n\n    // perform rotation and translate to correct position\n    out[0] = bx + px * cc - py * sc;\n    out[1] = by + px * sc + py * cc;\n    out[2] = a[2];\n\n    return out;\n}\n\nconst vec = create();\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport function forEach(a, stride, offset, count, fn, arg)\n{\n    let i; let\n        l;\n    if (!stride)\n    {\n        stride = 3;\n    }\n\n    if (!offset)\n    {\n        offset = 0;\n    }\n\n    if (count)\n    {\n        l = Math.min((count * stride) + offset, a.length);\n    }\n    else\n    {\n        l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride)\n    {\n        vec[0] = a[i];\n        vec[1] = a[i + 1];\n        vec[2] = a[i + 2];\n        fn(vec, vec, arg);\n        a[i] = vec[0];\n        a[i + 1] = vec[1];\n        a[i + 2] = vec[2];\n    }\n\n    return a;\n}\n","import { RenderObject, Submit } from \"@feng3d/render-api\";\nimport { getIGLBuffer, SamplerTexture, WebGL } from \"@feng3d/webgl\";\n\nimport { fit } from \"./hughsk/canvas-fit\";\nimport { attachCamera } from \"./hughsk/canvas-orbit-camera\";\nimport * as mat4 from \"./stackgl/gl-mat4\";\nimport * as vec3 from \"./stackgl/gl-vec3\";\nimport { reactive } from \"@feng3d/reactivity\";\n\n(async () =>\n{\n    const canvas = document.createElement(\"canvas\");\n    canvas.id = \"glcanvas\";\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    document.body.appendChild(canvas);\n\n    const webgl = new WebGL({ canvasId: \"glcanvas\" });\n\n    const camera = attachCamera(canvas);\n    window.addEventListener(\"resize\", fit(canvas), false);\n\n    // configure intial camera view.\n    camera.view(mat4.lookAt([], [0, 3.0, 30.0], [0, 0, -5.5], [0, 1, 0]));\n    camera.rotate([0.0, 0.0], [3.14 * 0.15, 0.0]);\n\n    const uv: number[][] = [];\n    const elements: number[][] = [];\n    const position: number[][] = [];\n    const oldPosition: number[][] = [];\n    const normal: number[][] = [];\n    const constraints: Constraint[] = [];\n\n    // create a constraint between the vertices with the indices i0 and i1.\n    class Constraint\n    {\n        i0: any;\n        i1: any;\n        restLength: number;\n        constructor(i0, i1)\n        {\n            this.i0 = i0;\n            this.i1 = i1;\n\n            this.restLength = vec3.distance(position[i0], position[i1]);\n        }\n    }\n\n    const size = 5.5;\n    const xmin = -size;\n    const xmax = Number(size);\n    const ymin = -size;\n    const ymax = Number(size);\n\n    // the tesselation level of the cloth.\n    const N = 20;\n\n    let row;\n    let col;\n\n    // create cloth vertices and uvs.\n    for (row = 0; row <= N; ++row)\n    {\n        const z = (row / N) * (ymax - ymin) + ymin;\n        const v = row / N;\n\n        for (col = 0; col <= N; ++col)\n        {\n            const x = (col / N) * (xmax - xmin) + xmin;\n            const u = col / N;\n\n            position.push([x, 0.0, z]);\n            oldPosition.push([x, 0.0, z]);\n            uv.push([u, v]);\n        }\n    }\n\n    let i; let i0; let i1; let i2; let\n        i3;\n\n    // for every vertex, create a corresponding normal.\n    for (i = 0; i < position.length; ++i)\n    {\n        normal.push([0.0, 0.0, 0.0]);\n    }\n\n    // create faces\n    for (row = 0; row <= (N - 1); ++row)\n    {\n        for (col = 0; col <= (N - 1); ++col)\n        {\n            i = row * (N + 1) + col;\n\n            i0 = i + 0;\n            i1 = i + 1;\n            i2 = i + (N + 1) + 0;\n            i3 = i + (N + 1) + 1;\n\n            elements.push([i3, i1, i0]);\n            elements.push([i0, i2, i3]);\n        }\n    }\n\n    // create constraints\n    for (row = 0; row <= N; ++row)\n    {\n        for (col = 0; col <= N; ++col)\n        {\n            i = row * (N + 1) + col;\n\n            i0 = i + 0;\n            i1 = i + 1;\n            i2 = i + (N + 1) + 0;\n            i3 = i + (N + 1) + 1;\n\n            // add constraint linked to the element in the next column, if it exist.\n            if (col < N)\n            {\n                constraints.push(new Constraint(i0, i1));\n            }\n\n            // add constraint linked to the element in the next row, if it exists\n            if (row < N)\n            {\n                constraints.push(new Constraint(i0, i2));\n            }\n\n            // add constraint linked the next diagonal element, if it exists.\n            if (col < N && row < N)\n            {\n                constraints.push(new Constraint(i0, i3));\n            }\n        }\n    }\n\n    const positions = position.reduce((pv: number[], cv: number[]) =>\n    {\n        cv.forEach((v) => { pv.push(v); });\n\n        return pv;\n    }, []);\n\n    const uvs = uv.reduce((pv: number[], cv: number[]) =>\n    {\n        cv.forEach((v) => { pv.push(v); });\n\n        return pv;\n    }, []);\n\n    const normals = normal.reduce((pv: number[], cv: number[]) =>\n    {\n        cv.forEach((v) => { pv.push(v); });\n\n        return pv;\n    }, []);\n\n    const indices = elements.reduce((pv: number[], cv: number[]) =>\n    {\n        cv.forEach((v) => { pv.push(v); });\n\n        return pv;\n    }, []);\n\n    let tick = 0;\n    let viewportWidth = 1;\n    let viewportHeight = 1;\n\n    const renderObject: RenderObject = {\n        vertices: {\n            position: { data: new Float32Array(positions), format: \"float32x3\" },\n            normal: { data: new Float32Array(normals), format: \"float32x3\" },\n            uv: { data: new Float32Array(uvs), format: \"float32x2\" },\n        },\n        indices: new Uint16Array(indices),\n        draw: { __type__: \"DrawIndexed\", indexCount: indices.length },\n        bindingResources: {},\n        pipeline: {\n            vertex: {\n                code: /* wgsl */`precision mediump float;\n\n        attribute vec3 position;\n        attribute vec3 normal;\n        attribute vec2 uv;\n      \n        varying vec2 vUv;\n        varying vec3 vNormal;\n      \n        uniform mat4 projection, view;\n      \n        void main() {\n          vUv = uv;\n          vNormal = normal;\n          gl_Position = projection * view * vec4(position, 1);\n        }` },\n            fragment: {\n                code: /* wgsl */`precision mediump float;\n\n        varying vec2 vUv;\n        varying vec3 vNormal;\n      \n        uniform sampler2D texture;\n      \n        void main () {\n          vec3 tex = texture2D(texture, vUv*1.0).xyz;\n          vec3 lightDir = normalize(vec3(0.4, 0.9, 0.3));\n      \n          vec3 n = vNormal;\n      \n          // for the back faces we need to use the opposite normals.\n          if(gl_FrontFacing == false) {\n            n = -n;\n          }\n      \n          vec3 ambient = 0.3 * tex;\n          vec3 diffuse = 0.7 * tex * clamp( dot(n, lightDir ), 0.0, 1.0 );\n      \n          gl_FragColor = vec4(ambient + diffuse, 1.0);\n        }`,\n                targets: [{ blend: {} }],\n            },\n            depthStencil: {},\n        }\n    };\n\n    const submit: Submit = {\n        commandEncoders: [{\n            passEncoders: [\n                {\n                    renderPassObjects: [renderObject]\n                }\n            ]\n        }]\n    };\n\n    function draw()\n    {\n        const deltaTime = 0.017;\n\n        let vel: number[] = [];\n        let next: number[] = [];\n        const delta = deltaTime;\n\n        const g = [0.0, -4.0, 0.0]; // gravity force vector.\n\n        const windForce = [Math.sin(tick / 2.0), Math.cos(tick / 3.0), Math.sin(tick / 1.0)];\n        vec3.normalize(windForce, windForce);\n        vec3.scale(windForce, windForce, 20.6);\n\n        for (i = 0; i < position.length; ++i)\n        {\n            //\n            // we do verlet integration for every vertex.\n            //\n\n            // compute velocity.\n            vec3.subtract(vel, position[i], oldPosition[i]);\n            vel = [vel[0], vel[1], vel[2]];\n            next = [position[i][0], position[i][1], position[i][2]];\n\n            // advance vertex with velocity.\n            vec3.add(next, next, vel);\n\n            // apply gravity force.\n            vec3.scaleAndAdd(next, next, g, delta * delta);\n\n            // apply wind force.\n            vec3.scaleAndAdd(next, next, windForce, delta * delta);\n\n            // keep track of current and old position.\n            oldPosition[i] = [position[i][0], position[i][1], position[i][2]];\n            position[i] = [next[0], next[1], next[2]];\n        }\n\n        const d = [];\n        let v0; let\n            v1;\n        //\n        // Attempt to satisfy the constraints by running a couple of iterations.\n        //\n        for (i = 0; i < 15; ++i)\n        {\n            for (let j = 0; j < constraints.length; j++)\n            {\n                const c = constraints[j];\n\n                v0 = position[c.i0];\n                v1 = position[c.i1];\n\n                vec3.subtract(d, v1, v0);\n\n                const dLength = vec3.length(d);\n                const diff = (dLength - c.restLength) / dLength;\n\n                // repulse/attract the end vertices of the constraint.\n                vec3.scaleAndAdd(v0, v0, d, +0.5 * diff);\n                vec3.scaleAndAdd(v1, v1, d, -0.5 * diff);\n            }\n        }\n\n        // we make some vertices at the edge of the cloth unmovable.\n        for (i = 0; i <= N; ++i)\n        {\n            position[i] = [oldPosition[i][0], oldPosition[i][1], oldPosition[i][2]];\n        }\n\n        // next, we recompute the normals\n        for (i = 0; i < normal.length; i++)\n        {\n            normal[i] = [0.0, 0.0, 0.0];\n        }\n\n        //\n        for (i = 0; i < elements.length; i++)\n        {\n            i0 = elements[i][0];\n            i1 = elements[i][1];\n            i2 = elements[i][2];\n\n            const p0 = position[i0];\n            const p1 = position[i1];\n            const p2 = position[i2];\n\n            v0 = [0.0, 0.0, 0.0];\n            vec3.subtract(v0, p0, p1);\n\n            v1 = [0.0, 0.0, 0.0];\n            vec3.subtract(v1, p0, p2);\n\n            // compute face normal.\n            const n0 = [0.0, 0.0, 0.0];\n            vec3.cross(n0, v0, v1);\n            vec3.normalize(n0, n0);\n\n            // add face normal to vertices of face.\n            vec3.add(normal[i0], normal[i0], n0);\n            vec3.add(normal[i1], normal[i1], n0);\n            vec3.add(normal[i2], normal[i2], n0);\n        }\n\n        // the average of the total face normals approximates the vertex normals.\n        for (i = 0; i < normal.length; i++)\n        {\n            vec3.normalize(normal[i], normal[i]);\n        }\n\n        /*\n          Make sure that we stream the positions and normals to their buffers,\n          since these are updated every frame.\n          */\n        const positions = position.reduce((pv: number[], cv: number[]) =>\n        {\n            cv.forEach((v) => { pv.push(v); });\n\n            return pv;\n        }, []);\n        const normals = normal.reduce((pv: number[], cv: number[]) =>\n        {\n            cv.forEach((v) => { pv.push(v); });\n\n            return pv;\n        }, []);\n\n        reactive(getIGLBuffer(renderObject.vertices.position.data)).data = new Float32Array(positions);\n        reactive(getIGLBuffer(renderObject.vertices.normal.data)).data = new Float32Array(normals);\n\n        tick++;\n\n        viewportWidth = canvas.width = canvas.clientWidth;\n        viewportHeight = canvas.height = canvas.clientHeight;\n\n        camera.tick();\n\n        reactive(renderObject.bindingResources).view = camera.view();\n        reactive(renderObject.bindingResources).projection\n            = mat4.perspective([],\n                Math.PI / 4,\n                viewportWidth / viewportHeight,\n                0.01,\n                1000);\n\n        webgl.submit(submit);\n\n        requestAnimationFrame(draw);\n    }\n\n    const img = new Image();\n    img.src = \"../../assets/cloth.png\";\n    await img.decode();\n\n    const diffuse: SamplerTexture = {\n        texture: {\n            size: [img.width, img.height],\n            generateMipmap: true,\n            sources: [{ image: img }]\n        }, sampler: { minFilter: \"linear\", mipmapFilter: \"linear\", addressModeU: \"repeat\", addressModeV: \"repeat\" }\n    };\n    reactive(renderObject.bindingResources).texture = diffuse;\n\n    draw();\n})();"],"names":["getSize","element","temporary","bounds","styles","height","parse","width","prop","scratch","fit","canvas","parent","scale","isSVG","resize","p","dims","psize","size","EPSILON","ARRAY_TYPE","RANDOM","create","out","glMatrix.ARRAY_TYPE","fromMat4","a","clone","copy","fromValues","m00","m01","m02","m10","m11","m12","m20","m21","m22","set","identity","transpose","a01","a02","a12","invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","det","adjoint","determinant","multiply","b","b00","b02","b10","b12","b20","b22","translate","v","x","y","rotate","rad","s","c","fromTranslation","fromRotation","fromScaling","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","str","frob","add","subtract","multiplyScalar","multiplyScalarAndAdd","exactEquals","equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","b0","b1","b2","b3","b4","b5","b6","b7","b8","glMatrix.EPSILON","mul","sub","m03","m13","m23","m30","m31","m32","m33","axis","len","t","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","perspectiveFromFieldOfView","fov","upTan","downTan","leftTan","rightTan","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","a9","a14","a15","b9","b13","b14","b15","length","divide","ceil","floor","min","max","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","d","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","random","r","glMatrix.RANDOM","zScale","transformMat4","m","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","angle","tempA","tempB","cosine","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","setAxisAngle","getAxisAngle","outAxis","calculateW","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","invDot","conjugate","fromMat3","fTrace","fRoot","i","j","k","fromEuler","halfToRad","cx","cy","cz","vec4.clone","vec4.fromValues","vec4.copy","vec4.set","vec4.add","vec4.scale","vec4.dot","vec4.lerp","vec4.length","vec4.squaredLength","vec4.normalize","vec4.exactEquals","vec4.equals","rotationTo","tmpvec3","vec3.create","xUnitVec3","vec3.fromValues","yUnitVec3","vec3.dot","vec3.cross","vec3.len","vec3.normalize","sqlerp","temp1","temp2","setAxes","matr","mat3.create","view","vec3","glm.vec3","mat3","glm.mat3","mat4","glm.mat4","quat","glm.quat","scratch0","scratch1","OrbitCamera","rotation","proto","dpan","quatFromVec","da","db","createOrbitCamera","camera","ua","isOSX","isOpera","maybeFirefox","output","list","keys","down","reset","keydown","keyup","pressed","key","code","e","EventEmitter","isNumber","type","er","args","listeners","isObject","err","handler","isUndefined","isFunction","listener","fired","g","position","ret","evlistener","emitter","attach","Emitter","flush","dispose","map","preventDefault","mouse","mousedown","mouseup","preventDefaulter","prefix","_addEventListener","support","addWheelListener","elem","callback","useCapture","_addWheelListener","eventName","originalEvent","event","getScroller","scroll","wheel","onscroll","panSpeed","attachCamera","opts","createScroll","mbut","mb","mpos","mp","createCamera","tick","ctrl","alt","webgl","WebGL","mat4.lookAt","uv","elements","oldPosition","normal","constraints","Constraint","i0","i1","__publicField","vec3.distance","xmin","xmax","ymin","ymax","N","row","col","u","i2","i3","positions","pv","cv","uvs","normals","indices","viewportWidth","viewportHeight","renderObject","submit","draw","vel","next","windForce","vec3.scale","vec3.subtract","vec3.add","vec3.scaleAndAdd","v0","v1","dLength","vec3.length","diff","p0","p1","p2","n0","reactive","getIGLBuffer","mat4.perspective","img","diffuse"],"mappings":"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"}