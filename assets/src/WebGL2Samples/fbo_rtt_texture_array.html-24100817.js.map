{"version":3,"file":"fbo_rtt_texture_array.html-24100817.js","sources":["../../../../examples/src/WebGL2Samples/fbo_rtt_texture_array.ts"],"sourcesContent":["import { CanvasContext, RenderObject, RenderPass, RenderPassDescriptor, RenderPassObject, RenderPipeline, Sampler, Texture, VertexAttributes } from \"@feng3d/render-api\";\nimport { WebGL } from \"@feng3d/webgl\";\nimport { getShaderSource } from \"./utility\";\n\nconst canvas = document.createElement(\"canvas\");\ncanvas.id = \"glcanvas\";\ncanvas.width = Math.min(window.innerWidth, window.innerHeight);\ncanvas.height = canvas.width;\ndocument.body.appendChild(canvas);\n\nconst renderingContext: CanvasContext = { canvasId: \"glcanvas\" };\nconst webgl = new WebGL(renderingContext);\n\n// -- Divide viewport\n\nconst windowSize = {\n    x: canvas.width,\n    y: canvas.height\n};\n\nconst Textures = {\n    RED: 0,\n    GREEN: 1,\n    BLUE: 2,\n    MAX: 3\n};\n\nconst viewport: { x: number, y: number, z: number, w: number }[] = new Array(Textures.MAX);\n\nviewport[Textures.RED] = {\n    x: windowSize.x / 2,\n    y: 0,\n    z: windowSize.x / 2,\n    w: windowSize.y / 2\n};\n\nviewport[Textures.GREEN] = {\n    x: windowSize.x / 2,\n    y: windowSize.y / 2,\n    z: windowSize.x / 2,\n    w: windowSize.y / 2\n};\n\nviewport[Textures.BLUE] = {\n    x: 0,\n    y: windowSize.y / 2,\n    z: windowSize.x / 2,\n    w: windowSize.y / 2\n};\n\n// -- Initialize program\n\n// Multiple out shaders\nconst multipleOutputProgram: RenderPipeline = {\n    vertex: { code: getShaderSource(\"vs-multiple-output\") }, fragment: { code: getShaderSource(\"fs-multiple-output\") },\n    primitive: { topology: \"triangle-list\" },\n};\n\n// Layer shaders\nconst layerProgram: RenderPipeline = {\n    vertex: { code: getShaderSource(\"vs-layer\") }, fragment: { code: getShaderSource(\"fs-layer\") },\n    primitive: { topology: \"triangle-list\" },\n};\n\n// -- Initialize buffer\n\nconst positions = new Float32Array([\n    -1.0, -1.0,\n    1.0, -1.0,\n    1.0, 1.0,\n    1.0, 1.0,\n    -1.0, 1.0,\n    -1.0, -1.0\n]);\n\nconst texcoords = new Float32Array([\n    0.0, 0.0,\n    1.0, 0.0,\n    1.0, 1.0,\n    1.0, 1.0,\n    0.0, 1.0,\n    0.0, 0.0\n]);\n\n// -- Initialize vertex array\n\nconst multipleOutputVertexArray: { vertices?: VertexAttributes } = {\n    vertices: {\n        position: { data: positions, format: \"float32x2\" },\n    }\n};\n\nconst layerVertexArray: { vertices?: VertexAttributes } = {\n    vertices: {\n        position: { data: positions, format: \"float32x2\" },\n        textureCoordinates: { data: texcoords, format: \"float32x2\" },\n    }\n};\n\n// -- Initialize texture\n\nconst w = 16;\nconst h = 16;\n\nconst texture: Texture = {\n    dimension: \"2d-array\",\n    format: \"rgba8unorm\",\n    size: [w, h, 3],\n};\nconst sampler: Sampler = { minFilter: \"nearest\", magFilter: \"nearest\", lodMinClamp: 0, lodMaxClamp: 0 };\n\n// -- Initialize frame buffer\n\nconst frameBuffer: RenderPassDescriptor = {\n    colorAttachments: [\n        { view: { texture, baseMipLevel: 0, baseArrayLayer: Textures.RED } },\n        { view: { texture, baseMipLevel: 0, baseArrayLayer: Textures.GREEN } },\n        { view: { texture, baseMipLevel: 0, baseArrayLayer: Textures.BLUE } },\n    ]\n};\n\n// -- Render\n\n// Pass 1\n\nconst matrix = new Float32Array([\n    1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0\n]);\n\nconst renderPass1: RenderPass = {\n    descriptor: frameBuffer,\n    renderPassObjects: [\n        {\n            viewport: { x: 0, y: 0, width: w, height: h },\n            pipeline: multipleOutputProgram,\n            bindingResources: { mvp: matrix },\n            vertices: multipleOutputVertexArray.vertices,\n            draw: { __type__: \"DrawVertex\", vertexCount: 6 },\n        }]\n};\n\n// Pass 2\nconst renderObjects: RenderPassObject[] = [];\nconst renderPass: RenderPass = {\n    descriptor: {\n        colorAttachments: [{ clearValue: [0.0, 0.0, 0.0, 1.0], loadOp: \"clear\" }],\n    },\n    renderPassObjects: renderObjects,\n};\n\nconst renderObject: RenderObject = {\n    pipeline: layerProgram,\n    bindingResources: { mvp: matrix, diffuse: { texture, sampler } },\n    vertices: layerVertexArray.vertices,\n    draw: { __type__: \"DrawVertex\", vertexCount: 6 },\n};\n\n//\nfor (let i = 0; i < Textures.MAX; ++i)\n{\n    renderObjects.push(\n        {\n            viewport: { x: viewport[i].x, y: viewport[i].y, width: viewport[i].z, height: viewport[i].w },\n            ...renderObject,\n            bindingResources: { ...renderObject.bindingResources, layer: i },\n            draw: { __type__: \"DrawVertex\", vertexCount: 6 },\n        }\n    );\n}\n\nwebgl.submit({ commandEncoders: [{ passEncoders: [renderPass1, renderPass] }] });\n\n// Clean up\nwebgl.deleteFramebuffer(frameBuffer);\nwebgl.deleteTexture(texture);\nwebgl.deleteProgram(multipleOutputProgram);\nwebgl.deleteProgram(layerProgram);"],"names":["canvas","renderingContext","webgl","WebGL","windowSize","Textures","viewport","multipleOutputProgram","getShaderSource","layerProgram","positions","texcoords","multipleOutputVertexArray","layerVertexArray","w","h","texture","sampler","frameBuffer","matrix","renderPass1","renderObjects","renderPass","renderObject","i"],"mappings":"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"}