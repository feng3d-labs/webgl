{"version":3,"file":"glsl_flat_smooth_interpolators.html-f85c5347.js","sources":["../../../../examples/src/WebGL2Samples/glsl_flat_smooth_interpolators.ts"],"sourcesContent":["import { CanvasContext, IndicesDataTypes, RenderPass, RenderPassObject, RenderPipeline, VertexAttributes, VertexFormat, Viewport } from \"@feng3d/render-api\";\nimport { WebGL } from \"@feng3d/webgl\";\nimport { mat4, vec3 } from \"gl-matrix\";\nimport { GlTFLoader, Primitive } from \"./third-party/gltf-loader\";\nimport { getShaderSource } from \"./utility\";\n\nconst canvas = document.createElement(\"canvas\");\ncanvas.id = \"glcanvas\";\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\ndocument.body.appendChild(canvas);\n\nconst rc: CanvasContext = { canvasId: \"glcanvas\", webGLcontextId: \"webgl2\" };\nconst webgl = new WebGL(rc);\n\n// -- Divide viewport\nconst canvasSize = {\n    x: canvas.width,\n    y: canvas.height\n};\n\nconst VIEWPORTS = {\n    LEFT: 0,\n    RIGHT: 1,\n    MAX: 2\n};\n\nconst viewport: Viewport[] = new Array(VIEWPORTS.MAX);\n\nviewport[VIEWPORTS.LEFT] = {\n    x: 0,\n    y: canvasSize.y - canvasSize.x / 2 - 50,\n    width: canvasSize.x / 2,\n    height: canvasSize.x / 2\n};\n\nviewport[VIEWPORTS.RIGHT] = {\n    x: canvasSize.x / 2,\n    y: canvasSize.y - canvasSize.x / 2 - 50,\n    width: canvasSize.x / 2,\n    height: canvasSize.x / 2\n};\n\n// -- Initialize program\nconst programs: RenderPipeline[] = [\n    {\n        vertex: { code: getShaderSource(\"vs-flat\") }, fragment: { code: getShaderSource(\"fs-flat\") },\n        depthStencil: { depthCompare: \"less-equal\" },\n        primitive: { topology: \"triangle-list\" },\n    },\n    {\n        vertex: { code: getShaderSource(\"vs-smooth\") }, fragment: { code: getShaderSource(\"fs-smooth\") },\n        depthStencil: { depthCompare: \"less-equal\" },\n        primitive: { topology: \"triangle-list\" },\n    }\n];\n// -- Load gltf then render\nconst gltfUrl = \"../../assets/gltf/di_model_tri.gltf\";\nconst glTFLoader = new GlTFLoader();\n\nglTFLoader.loadGLTF(gltfUrl, function (glTF)\n{\n    const curScene = glTF.scenes[glTF.defaultScene];\n\n    // -- Initialize vertex array\n    const vertexArrayMaps: {\n        [key: string]: { vertexArray: { vertices?: VertexAttributes }, indices: IndicesDataTypes }[]\n    } = {};\n\n    // var in loop\n    let mesh: {\n        primitives: Primitive[];\n    };\n    let primitive: Primitive;\n    //  { matrix: mat4, attributes: { [key: string]: { size: number, type: number, stride: number, offset: number } }, vertexBuffer, indices };\n    let vertexArray: { vertices?: VertexAttributes };\n\n    let i: number; let len: number;\n\n    for (const mid in curScene.meshes)\n    {\n        mesh = curScene.meshes[mid];\n        vertexArrayMaps[mid] = [];\n\n        for (i = 0, len = mesh.primitives.length; i < len; ++i)\n        {\n            primitive = mesh.primitives[i];\n\n            // create buffers\n\n            // WebGL2: create vertexArray\n\n            // -- Initialize buffer\n            const vertices = primitive.vertexBuffer;\n\n            const indices = primitive.indices;\n\n            // -- VertexAttribPointer\n            const positionInfo = primitive.attributes.POSITION;\n            const normalInfo = primitive.attributes.NORMAL;\n\n            vertexArray = {\n                vertices: {\n                    position: {\n                        data: vertices, format: ([\"float32\", \"float32x2\", \"float32x3\", \"float32x4\"] as VertexFormat[])[positionInfo.size],\n                        arrayStride: positionInfo.stride, offset: positionInfo.offset\n                    },\n                    normal: {\n                        data: vertices, format: ([\"float32\", \"float32x2\", \"float32x3\", \"float32x4\"] as VertexFormat[])[normalInfo.size],\n                        arrayStride: normalInfo.stride, offset: normalInfo.offset\n                    },\n                },\n            };\n            vertexArrayMaps[mid].push({ vertexArray, indices });\n        }\n    }\n\n    // -- Render preparation\n    const translate = vec3.create();\n    vec3.set(translate, 0, -18, -60);\n    const scale = vec3.create();\n    const s = 0.3;\n    vec3.set(scale, s, s, s);\n    const modelView = mat4.create();\n    mat4.translate(modelView, modelView, translate);\n    mat4.scale(modelView, modelView, scale);\n\n    const rotatationSpeedY = 0.01;\n\n    const perspective = mat4.create();\n    mat4.perspective(perspective, 0.785, 1, 1, 1000);\n\n    const localMV = mat4.create();\n    const localMVP = mat4.create();\n    const localMVNormal = mat4.create();\n\n    // -- Render loop\n    (function render()\n    {\n        const renderObjects: RenderPassObject[] = [];\n        const rp: RenderPass = {\n            descriptor: {\n                colorAttachments: [{ clearValue: [0.0, 0.0, 0.0, 1.0], loadOp: \"clear\" }],\n                depthStencilAttachment: { depthLoadOp: \"clear\" }\n            },\n            renderPassObjects: renderObjects,\n        };\n\n        mat4.rotateY(modelView, modelView, rotatationSpeedY);\n\n        for (const mid in curScene.meshes)\n        {\n            mesh = curScene.meshes[mid];\n\n            for (i = 0, len = mesh.primitives.length; i < len; ++i)\n            {\n                primitive = mesh.primitives[i];\n\n                mat4.multiply(localMV, modelView, primitive.matrix);\n                mat4.multiply(localMVP, perspective, localMV);\n\n                mat4.invert(localMVNormal, localMV);\n                mat4.transpose(localMVNormal, localMVNormal);\n\n                const vertexArray = vertexArrayMaps[mid][i].vertexArray;\n                const indices = vertexArrayMaps[mid][i].indices;\n\n                for (i = 0; i < VIEWPORTS.MAX; ++i)\n                {\n                    renderObjects.push(\n                        {\n                            viewport: viewport[i],\n                            pipeline: programs[i],\n                            bindingResources: {\n                                mvp: localMVP,\n                                mvNormal: localMVNormal,\n                            },\n                            vertices: vertexArray.vertices,\n                            indices,\n                            draw: { __type__: \"DrawIndexed\", indexCount: primitive.indices.length, firstIndex: 0 },\n                        });\n                }\n            }\n        }\n\n        webgl.submit({ commandEncoders: [{ passEncoders: [rp] }] });\n\n        requestAnimationFrame(render);\n    })();\n});\n\n"],"names":["canvas","rc","webgl","WebGL","canvasSize","VIEWPORTS","viewport","programs","getShaderSource","gltfUrl","glTFLoader","GlTFLoader","glTF","curScene","vertexArrayMaps","mesh","primitive","vertexArray","i","len","mid","vertices","indices","positionInfo","normalInfo","translate","vec3.create","vec3.set","scale","s","modelView","mat4.create","mat4.translate","mat4.scale","rotatationSpeedY","perspective","mat4.perspective","localMV","localMVP","localMVNormal","render","renderObjects","rp","mat4.rotateY","mat4.multiply","mat4.invert","mat4.transpose"],"mappings":"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"}