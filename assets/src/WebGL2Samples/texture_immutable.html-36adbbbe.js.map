{"version":3,"file":"texture_immutable.html-36adbbbe.js","sources":["../../../../examples/src/WebGL2Samples/texture_immutable.ts"],"sourcesContent":["import { CanvasContext, RenderPassObject, RenderObject, RenderPass, RenderPipeline, Sampler, Texture, VertexAttributes } from \"@feng3d/render-api\";\nimport { WebGL } from \"@feng3d/webgl\";\n\nimport { snoise } from \"./third-party/noise3D\";\nimport { getShaderSource, loadImage } from \"./utility\";\n\n(function ()\n{\n    const canvas = document.createElement(\"canvas\");\n    canvas.id = \"glcanvas\";\n    canvas.width = Math.min(window.innerWidth, window.innerHeight);\n    canvas.height = canvas.width;\n    document.body.appendChild(canvas);\n\n    const rc: CanvasContext = { canvasId: \"glcanvas\", webGLcontextId: \"webgl2\" };\n    const webgl = new WebGL(rc);\n\n    const Corners = {\n        LEFT: 0,\n        RIGHT: 1,\n        MAX: 2\n    };\n\n    const viewports: { x: number, y: number, z: number, w: number }[] = new Array(Corners.MAX);\n\n    viewports[Corners.LEFT] = {\n        x: 0,\n        y: canvas.height / 4,\n        z: canvas.width / 2,\n        w: canvas.height / 2\n    };\n\n    viewports[Corners.RIGHT] = {\n        x: canvas.width / 2,\n        y: canvas.height / 4,\n        z: canvas.width / 2,\n        w: canvas.height / 2\n    };\n\n    // -- Init program\n    const program: RenderPipeline = { vertex: { code: getShaderSource(\"vs\") }, fragment: { code: getShaderSource(\"fs\") } };\n\n    const program3D: RenderPipeline = { vertex: { code: getShaderSource(\"vs-3d\") }, fragment: { code: getShaderSource(\"fs-3d\") } };\n\n    // -- Init buffers: vec2 Position, vec2 Texcoord\n    const positions = new Float32Array([\n        -1.0, -1.0,\n        1.0, -1.0,\n        1.0, 1.0,\n        1.0, 1.0,\n        -1.0, 1.0,\n        -1.0, -1.0\n    ]);\n\n    const texCoords = new Float32Array([\n        0.0, 1.0,\n        1.0, 1.0,\n        1.0, 0.0,\n        1.0, 0.0,\n        0.0, 0.0,\n        0.0, 1.0\n    ]);\n\n    // -- Init VertexArray\n    const vertexArray: { vertices?: VertexAttributes } = {\n        vertices: {\n            position: { data: positions, format: \"float32x2\" },\n            in_texcoord: { data: texCoords, format: \"float32x2\" },\n            texcoord: { data: texCoords, format: \"float32x2\" },\n        }\n    };\n\n    const { texture3D, sampler3D } = create3DTexture();\n\n    const imageUrl = \"../../assets/img/Di-3d.png\";\n    loadImage(imageUrl, function (image)\n    {\n        const matrix = new Float32Array([\n            1.0, 0.0, 0.0, 0.0,\n            0.0, 1.0, 0.0, 0.0,\n            0.0, 0.0, 1.0, 0.0,\n            0.0, 0.0, 0.0, 1.0\n        ]);\n\n        // -- Init 2D Texture\n        const texture2D: Texture = {\n            format: \"rgba8unorm\",\n            mipLevelCount: 1,\n            size: [512, 512],\n            sources: [{\n                image, flipY: false,\n            }],\n        };\n        const sampler2D: Sampler = {\n            minFilter: \"nearest\",\n            magFilter: \"linear\",\n            addressModeU: \"clamp-to-edge\",\n            addressModeV: \"clamp-to-edge\",\n        };\n\n        // -- Render\n        const ro: RenderObject = {\n            pipeline: program,\n            bindingResources: {\n                MVP: matrix,\n            },\n            geometry: {\n                vertices: vertexArray.vertices,\n                draw: { __type__: \"DrawVertex\", vertexCount: 6 },\n            }\n        };\n\n        const renderObjects: RenderPassObject[] = [];\n        const rp: RenderPass = {\n            descriptor: { colorAttachments: [{ clearValue: [0.0, 0.0, 0.0, 1.0], loadOp: \"clear\" }] },\n            renderObjects\n        };\n\n        renderObjects.push(\n            {\n                viewport: { x: viewports[Corners.LEFT].x, y: viewports[Corners.LEFT].y, width: viewports[Corners.LEFT].z, height: viewports[Corners.LEFT].w },\n                ...ro,\n                pipeline: program,\n                bindingResources: {\n                    ...ro.bindingResources,\n                    diffuse: { texture: texture2D, sampler: sampler2D },\n                },\n            });\n\n        // Immutable 3D texture\n        renderObjects.push(\n            {\n                viewport: { x: viewports[Corners.RIGHT].x, y: viewports[Corners.RIGHT].y, width: viewports[Corners.RIGHT].z, height: viewports[Corners.RIGHT].w },\n                ...ro,\n                pipeline: program3D,\n                bindingResources: {\n                    ...ro.bindingResources,\n                    diffuse: { texture: texture3D, sampler: sampler3D },\n                },\n            });\n\n        webgl.submit({ commandEncoders: [{ passEncoders: [rp] }] });\n\n        // Delete WebGL resources\n        webgl.deleteTexture(texture2D);\n        webgl.deleteTexture(texture3D);\n        webgl.deleteProgram(program);\n        webgl.deleteProgram(program3D);\n    });\n\n    function create3DTexture()\n    {\n        // Note By @kenrussel: The sample was changed from R32F to R8 for best portability.\n        // not all devices can render to floating-point textures\n        // (and, further, this functionality is in a WebGL extension: EXT_color_buffer_float),\n        // and renderability is a requirement for generating mipmaps.\n\n        const SIZE = 32;\n        const data = new Uint8Array(SIZE * SIZE * SIZE);\n        for (let k = 0; k < SIZE; ++k)\n        {\n            for (let j = 0; j < SIZE; ++j)\n            {\n                for (let i = 0; i < SIZE; ++i)\n                {\n                    data[i + j * SIZE + k * SIZE * SIZE] = snoise([i, j, k]) * 256;\n                }\n            }\n        }\n\n        const texture3D: Texture = {\n            dimension: \"3d\",\n            format: \"r8uint\",\n            generateMipmap: true,\n            mipLevelCount: Math.log2(SIZE),\n            size: [SIZE, SIZE, SIZE],\n            sources: [{ __type__: \"TextureDataSource\", size: [SIZE, SIZE, SIZE], data }],\n        };\n        const sampler3D: Sampler = {\n            lodMinClamp: 0,\n            lodMaxClamp: Math.log2(SIZE),\n            minFilter: \"linear\",\n            magFilter: \"linear\",\n            mipmapFilter: \"linear\",\n        };\n\n        return { texture3D, sampler3D };\n    }\n})();\n"],"names":["canvas","rc","webgl","WebGL","Corners","viewports","program","getShaderSource","program3D","positions","texCoords","vertexArray","texture3D","sampler3D","create3DTexture","loadImage","image","matrix","texture2D","sampler2D","ro","renderObjects","rp","data","k","j","i","snoise"],"mappings":"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"}