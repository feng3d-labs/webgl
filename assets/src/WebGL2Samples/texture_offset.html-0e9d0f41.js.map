{"version":3,"file":"texture_offset.html-0e9d0f41.js","sources":["../../../../examples/src/WebGL2Samples/texture_offset.ts"],"sourcesContent":["import { CanvasContext, RenderPass, RenderPassObject, RenderPipeline, Sampler, Texture, VertexAttributes } from \"@feng3d/render-api\";\nimport { WebGL } from \"@feng3d/webgl\";\nimport { getShaderSource, loadImage } from \"./utility\";\n\n(function ()\n{\n    const canvas = document.createElement(\"canvas\");\n    canvas.id = \"glcanvas\";\n    canvas.width = Math.min(window.innerWidth, window.innerHeight);\n    canvas.height = canvas.width;\n    document.body.appendChild(canvas);\n\n    const rc: CanvasContext = { canvasId: \"glcanvas\", webGLcontextId: \"webgl2\", webGLContextAttributes: { antialias: false } };\n    const webgl = new WebGL(rc);\n\n    const Corners = {\n        LEFT: 0,\n        RIGHT: 1,\n        MAX: 2\n    };\n\n    const viewports: { x: number, y: number, z: number, w: number }[] = new Array(Corners.MAX);\n\n    viewports[Corners.LEFT] = {\n        x: 0,\n        y: canvas.height / 4,\n        z: canvas.width / 2,\n        w: canvas.height / 2\n    };\n\n    viewports[Corners.RIGHT] = {\n        x: canvas.width / 2,\n        y: canvas.height / 4,\n        z: canvas.width / 2,\n        w: canvas.height / 2\n    };\n\n    // -- Init program\n    const programBicubic: RenderPipeline = { vertex: { code: getShaderSource(\"vs\") }, fragment: { code: getShaderSource(\"fs-bicubic\") } };\n\n    const programOffsetBicubic: RenderPipeline = {\n        vertex: { code: getShaderSource(\"vs\") }, fragment: { code: getShaderSource(\"fs-offset-bicubic\") },\n    };\n\n    // -- Init buffers: vec2 Position, vec2 Texcoord\n    const positions = new Float32Array([\n        -1.0, -1.0,\n        1.0, -1.0,\n        1.0, 1.0,\n        1.0, 1.0,\n        -1.0, 1.0,\n        -1.0, -1.0\n    ]);\n\n    const texCoords = new Float32Array([\n        0.0, 1.0,\n        1.0, 1.0,\n        1.0, 0.0,\n        1.0, 0.0,\n        0.0, 0.0,\n        0.0, 1.0\n    ]);\n\n    // -- Init VertexArray\n    const vertexArray: { vertices?: VertexAttributes } = {\n        vertices: {\n            position: { data: positions, format: \"float32x2\" },\n            texcoord: { data: texCoords, format: \"float32x2\" },\n        }\n    };\n\n    loadImage(\"../../assets/img/Di-3d.png\", function (image)\n    {\n        // -- Init Texture\n        const texture: Texture = {\n            size: [image.width, image.height],\n            format: \"rgba8unorm\",\n            sources: [{ mipLevel: 0, image, flipY: false }],\n        };\n        const sampler: Sampler = {\n            minFilter: \"nearest\",\n            magFilter: \"nearest\",\n            addressModeU: \"clamp-to-edge\",\n            addressModeV: \"clamp-to-edge\",\n        };\n\n        const renderObjects: RenderPassObject[] = [];\n        // -- Render\n        const rp: RenderPass = {\n            descriptor: { colorAttachments: [{ clearValue: [0.0, 0.0, 0.0, 1.0], loadOp: \"clear\" }] },\n            renderPassObjects: renderObjects\n        };\n\n        const matrix = new Float32Array([\n            1.0, 0.0, 0.0, 0.0,\n            0.0, 1.0, 0.0, 0.0,\n            0.0, 0.0, 1.0, 0.0,\n            0.0, 0.0, 0.0, 1.0\n        ]);\n\n        // No offset\n        renderObjects.push(\n            {\n                viewport: { x: viewports[Corners.RIGHT].x, y: viewports[Corners.RIGHT].y, width: viewports[Corners.RIGHT].z, height: viewports[Corners.RIGHT].w },\n                pipeline: programBicubic,\n                bindingResources: {\n                    MVP: matrix,\n                    diffuse: { texture, sampler },\n                },\n                vertices: vertexArray.vertices,\n                draw: { __type__: \"DrawVertex\", vertexCount: 6 },\n            });\n\n        // Offset\n        const offset = new Int32Array([100, -80]);\n\n        renderObjects.push(\n            {\n                viewport: { x: viewports[Corners.LEFT].x, y: viewports[Corners.LEFT].y, width: viewports[Corners.LEFT].z, height: viewports[Corners.LEFT].w },\n                pipeline: programOffsetBicubic,\n                bindingResources: {\n                    MVP: matrix,\n                    diffuse: { texture, sampler },\n                    offset,\n                },\n                vertices: vertexArray.vertices,\n                draw: { __type__: \"DrawVertex\", vertexCount: 6 },\n            });\n\n        webgl.submit({ commandEncoders: [{ passEncoders: [rp] }] });\n\n        // Delete WebGL resources\n        webgl.deleteTexture(texture);\n        webgl.deleteProgram(programOffsetBicubic);\n        webgl.deleteProgram(programBicubic);\n    });\n})();\n"],"names":["canvas","rc","webgl","WebGL","Corners","viewports","programBicubic","getShaderSource","programOffsetBicubic","positions","texCoords","vertexArray","loadImage","image","texture","sampler","renderObjects","rp","matrix","offset"],"mappings":"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"}