{"version":3,"file":"buffer_copy.html-fe8fec17.js","sources":["../../../../examples/src/WebGL2Samples/buffer_copy.ts"],"sourcesContent":["import { CanvasContext, CopyBufferToBuffer, Buffer, RenderPass, RenderPipeline, VertexAttributes } from \"@feng3d/render-api\";\nimport { WebGL, getIGLBuffer } from \"@feng3d/webgl\";\nimport { getShaderSource } from \"./utility\";\n\n(function ()\n{\n    // -- Init Canvas\n    const canvas = document.createElement(\"canvas\");\n    canvas.id = \"glcanvas\";\n    canvas.width = Math.min(window.innerWidth, window.innerHeight);\n    canvas.height = canvas.width;\n    document.body.appendChild(canvas);\n\n    // -- Init WebGL Context\n    const rc: CanvasContext = { canvasId: \"glcanvas\", webGLcontextId: \"webgl2\" };\n    const webgl = new WebGL(rc);\n\n    // -- Init Program\n    const program: RenderPipeline = {\n        vertex: { code: getShaderSource(\"vs\") }, fragment: { code: getShaderSource(\"fs\") },\n        primitive: { topology: \"triangle-list\" },\n    };\n\n    // -- Init Buffer\n    const vertices = new Float32Array([\n        -1.0, -1.0,\n        1.0, -1.0,\n        1.0, 1.0,\n        1.0, 1.0,\n        -1.0, 1.0,\n        -1.0, -1.0\n    ]);\n    const vertexPosBufferSrc: Buffer = { target: \"ARRAY_BUFFER\", size: vertices.byteLength, data: vertices, usage: \"STATIC_DRAW\" };\n\n    const vertexPosBufferDst = new Float32Array(vertices.length);\n\n    const cb: CopyBufferToBuffer = {\n        __type__: \"CopyBufferToBuffer\",\n        source: vertexPosBufferSrc,\n        destination: getIGLBuffer(vertexPosBufferDst, \"ARRAY_BUFFER\"),\n        sourceOffset: 0, destinationOffset: 0, size: vertices.length * Float32Array.BYTES_PER_ELEMENT\n    };\n\n    // -- Init Vertex Array\n    const vertexArray: { vertices?: VertexAttributes } = {\n        vertices: {\n            pos: { data: vertexPosBufferDst, format: \"float32x2\" },\n        }\n    };\n\n    // -- Render\n    const rp: RenderPass = {\n        descriptor: { colorAttachments: [{ clearValue: [0.0, 0.0, 0.0, 1.0], loadOp: \"clear\" }] },\n        renderPassObjects: [{\n            pipeline: program,\n            vertices: vertexArray.vertices,\n            draw: { __type__: \"DrawVertex\", vertexCount: 6 },\n        }]\n    };\n\n    webgl.submit({ commandEncoders: [{ passEncoders: [cb, rp] }] });\n\n    // -- Delete WebGL resources\n    webgl.deleteBuffer(vertexPosBufferSrc);\n    webgl.deleteProgram(program);\n})();\n"],"names":["canvas","rc","webgl","WebGL","program","getShaderSource","vertices","vertexPosBufferSrc","vertexPosBufferDst","cb","getIGLBuffer","rp"],"mappings":"mJAIC,UACD,CAEU,MAAAA,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,GAAK,WACZA,EAAO,MAAQ,KAAK,IAAI,OAAO,WAAY,OAAO,WAAW,EAC7DA,EAAO,OAASA,EAAO,MACd,SAAA,KAAK,YAAYA,CAAM,EAGhC,MAAMC,EAAoB,CAAE,SAAU,WAAY,eAAgB,QAAS,EACrEC,EAAQ,IAAIC,EAAMF,CAAE,EAGpBG,EAA0B,CAC5B,OAAQ,CAAE,KAAMC,EAAgB,IAAI,CAAE,EAAG,SAAU,CAAE,KAAMA,EAAgB,IAAI,CAAE,EACjF,UAAW,CAAE,SAAU,eAAgB,CAAA,EAIrCC,EAAW,IAAI,aAAa,CAC9B,GAAM,GACN,EAAK,GACL,EAAK,EACL,EAAK,EACL,GAAM,EACN,GAAM,EAAA,CACT,EACKC,EAA6B,CAAE,OAAQ,eAAgB,KAAMD,EAAS,WAAY,KAAMA,EAAU,MAAO,aAAc,EAEvHE,EAAqB,IAAI,aAAaF,EAAS,MAAM,EAErDG,EAAyB,CAC3B,SAAU,qBACV,OAAQF,EACR,YAAaG,EAAaF,EAAoB,cAAc,EAC5D,aAAc,EAAG,kBAAmB,EAAG,KAAMF,EAAS,OAAS,aAAa,iBAAA,EAW1EK,EAAiB,CACnB,WAAY,CAAE,iBAAkB,CAAC,CAAE,WAAY,CAAC,EAAK,EAAK,EAAK,CAAG,EAAG,OAAQ,OAAS,CAAA,CAAE,EACxF,kBAAmB,CAAC,CAChB,SAAUP,EACV,SAX6C,CACjD,SAAU,CACN,IAAK,CAAE,KAAMI,EAAoB,OAAQ,WAAY,CACzD,CAAA,EAQ0B,SACtB,KAAM,CAAE,SAAU,aAAc,YAAa,CAAE,CAAA,CAClD,CAAA,EAGLN,EAAM,OAAO,CAAE,gBAAiB,CAAC,CAAE,aAAc,CAACO,EAAIE,CAAE,EAAG,CAAA,CAAG,EAG9DT,EAAM,aAAaK,CAAkB,EACrCL,EAAM,cAAcE,CAAO,CAC/B,GAAG"}