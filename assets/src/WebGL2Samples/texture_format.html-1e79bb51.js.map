{"version":3,"file":"texture_format.html-1e79bb51.js","sources":["../../../../examples/src/WebGL2Samples/texture_format.ts"],"sourcesContent":["import { CanvasContext, RenderPass, RenderPassObject, RenderPipeline, Sampler, Texture, TextureFormat, VertexAttributes } from \"@feng3d/render-api\";\nimport { WebGL } from \"@feng3d/webgl\";\n\nimport { getShaderSource, loadImage } from \"./utility\";\n\n(function ()\n{\n    const canvas = document.createElement(\"canvas\");\n    canvas.id = \"glcanvas\";\n    canvas.width = Math.min(window.innerWidth, window.innerHeight);\n    canvas.height = canvas.width;\n    document.body.appendChild(canvas);\n\n    const rc: CanvasContext = { canvasId: \"glcanvas\", webGLcontextId: \"webgl2\" };\n    const webgl = new WebGL(rc);\n\n    // -- Viewport\n\n    const windowSize = {\n        x: canvas.width,\n        y: canvas.height\n    };\n\n    const Views = {\n        BOTTOM_LEFT: 0,\n        BOTTOM_CENTER: 1,\n        BOTTOM_RIGHT: 2,\n        MIDDLE_LEFT: 3,\n        MIDDLE_CENTER: 4,\n        MIDDLE_RIGHT: 5,\n        TOP_LEFT: 6,\n        TOP_CENTER: 7,\n        TOP_RIGHT: 8,\n        MAX: 9\n    };\n\n    const viewport = new Array(Views.MAX);\n\n    for (let i = 0; i < Views.MAX; ++i)\n    {\n        const row = Math.floor(i / 3);\n        const col = i % 3;\n        viewport[i] = {\n            x: windowSize.x * col / 3.0,\n            y: windowSize.y * row / 3.0,\n            z: windowSize.x / 3.0,\n            w: windowSize.y / 3.0\n        };\n    }\n\n    // -- Init program\n    const programUint: RenderPipeline = { vertex: { code: getShaderSource(\"vs\") }, fragment: { code: getShaderSource(\"fs-uint\") } };\n\n    const programNormalized: RenderPipeline = { vertex: { code: getShaderSource(\"vs\") }, fragment: { code: getShaderSource(\"fs-normalized\") } };\n\n    // -- Init buffers: vec2 Position, vec2 Texcoord\n    const positions = new Float32Array([\n        -1.0, -1.0,\n        1.0, -1.0,\n        1.0, 1.0,\n        1.0, 1.0,\n        -1.0, 1.0,\n        -1.0, -1.0\n    ]);\n\n    const texCoords = new Float32Array([\n        0.0, 1.0,\n        1.0, 1.0,\n        1.0, 0.0,\n        1.0, 0.0,\n        0.0, 0.0,\n        0.0, 1.0\n    ]);\n\n    // -- Init VertexArray\n    const vertexArray: { vertices?: VertexAttributes } = {\n        vertices: {\n            position: { data: positions, format: \"float32x2\" },\n            texcoord: { data: texCoords, format: \"float32x2\" },\n        }\n    };\n\n    loadImage(\"../../assets/img/Di-3d.png\", function (image)\n    {\n        const TextureTypes = {\n            RGB: 0,\n            RGB8: 1,\n            RGBA: 2,\n            RGB16F: 3,\n            RGBA32F: 4,\n            R16F: 5,\n            RG16F: 6,\n            RGB8UI: 7,\n            RGBA8UI: 8,\n            MAX: 9\n        };\n\n        const textureFormats: { format: TextureFormat }[] = new Array(TextureTypes.MAX);\n\n        textureFormats[TextureTypes.RGB] = {\n            format: \"rgba8unorm\",\n        };\n\n        textureFormats[TextureTypes.RGB8] = {\n            format: \"rgba8unorm\",\n        };\n\n        textureFormats[TextureTypes.RGB16F] = {\n            format: \"rgba16float\",\n        };\n\n        textureFormats[TextureTypes.RGBA32F] = {\n            format: \"rgba32float\",\n        };\n\n        textureFormats[TextureTypes.R16F] = {\n            format: \"r16float\",\n        };\n\n        textureFormats[TextureTypes.RG16F] = {\n            format: \"rg16float\",\n        };\n\n        textureFormats[TextureTypes.RGBA] = {\n            format: \"rgba8unorm\",\n        };\n\n        textureFormats[TextureTypes.RGB8UI] = {\n            format: \"rgba8uint\",\n        };\n\n        textureFormats[TextureTypes.RGBA8UI] = {\n            format: \"rgba8uint\",\n        };\n\n        // -- Init Texture\n\n        const textures: Texture[] = new Array(TextureTypes.MAX);\n        const samplers: Sampler[] = new Array(TextureTypes.MAX);\n        let i = 0;\n        for (i = 0; i < TextureTypes.MAX; ++i)\n        {\n            textures[i] = {\n                size: [image.width, image.height],\n                format: textureFormats[i].format,\n                sources: [{\n                    mipLevel: 0, image, flipY: false,\n                }],\n            };\n            samplers[i] = {\n                minFilter: \"nearest\",\n                magFilter: \"nearest\",\n                lodMinClamp: 0,\n                lodMaxClamp: 0,\n            };\n        }\n\n        // -- Render\n        const matrix = new Float32Array([\n            1.0, 0.0, 0.0, 0.0,\n            0.0, 1.0, 0.0, 0.0,\n            0.0, 0.0, 1.0, 0.0,\n            0.0, 0.0, 0.0, 1.0\n        ]);\n\n        const renderObjects: RenderPassObject[] = [];\n        const rp: RenderPass = {\n            descriptor: { colorAttachments: [{ clearValue: [0.0, 0.0, 0.0, 1.0], loadOp: \"clear\" }] },\n            renderPassObjects: renderObjects\n        };\n\n        for (i = 0; i < TextureTypes.RGB8UI; ++i)\n        {\n            renderObjects.push(\n                {\n                    viewport: { x: viewport[i].x, y: viewport[i].y, width: viewport[i].z, height: viewport[i].w },\n                    pipeline: programNormalized,\n                    bindingResources: {\n                        MVP: matrix,\n                        diffuse: { texture: textures[i], sampler: samplers[i] },\n                    },\n                    vertices: vertexArray.vertices,\n                    draw: { __type__: \"DrawVertex\", vertexCount: 6 },\n                });\n        }\n\n        // Unsigned int textures\n        for (i = TextureTypes.RGB8UI; i < TextureTypes.MAX; ++i)\n        {\n            renderObjects.push(\n                {\n                    viewport: { x: viewport[i].x, y: viewport[i].y, width: viewport[i].z, height: viewport[i].w },\n                    pipeline: programUint,\n                    bindingResources: {\n                        MVP: matrix,\n                        diffuse: { texture: textures[i], sampler: samplers[i] },\n                    },\n                    vertices: vertexArray.vertices,\n                    draw: { __type__: \"DrawVertex\", vertexCount: 6 },\n                });\n        }\n\n        webgl.submit({ commandEncoders: [{ passEncoders: [rp] }] });\n\n        // Delete WebGL resources\n        for (i = 0; i < TextureTypes.MAX; ++i)\n        {\n            webgl.deleteTexture(textures[i]);\n        }\n        webgl.deleteProgram(programUint);\n        webgl.deleteProgram(programNormalized);\n    });\n})();\n"],"names":["canvas","rc","webgl","WebGL","windowSize","Views","viewport","i","row","col","programUint","getShaderSource","programNormalized","positions","texCoords","vertexArray","loadImage","image","TextureTypes","textureFormats","textures","samplers","matrix","renderObjects","rp"],"mappings":"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"}