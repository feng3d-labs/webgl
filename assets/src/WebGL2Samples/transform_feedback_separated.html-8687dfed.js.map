{"version":3,"file":"transform_feedback_separated.html-8687dfed.js","sources":["../../../../examples/src/WebGL2Samples/transform_feedback_separated.ts"],"sourcesContent":["import { CanvasContext, IndicesDataTypes, VertexDataTypes, RenderPipeline, Submit, VertexAttributes } from \"@feng3d/render-api\";\nimport { TransformFeedback, TransformFeedbackPipeline, WebGL } from \"@feng3d/webgl\";\n\nimport { getShaderSource } from \"./utility\";\n\n(function ()\n{\n    // -- Init Canvas\n    const canvas = document.createElement(\"canvas\");\n    canvas.id = \"glcanvas\";\n    canvas.width = Math.min(window.innerWidth, window.innerHeight);\n    canvas.height = canvas.width;\n    document.body.appendChild(canvas);\n\n    // -- Init WebGL Context\n    const rc: CanvasContext = { canvasId: \"glcanvas\", webGLcontextId: \"webgl2\", webGLContextAttributes: { antialias: false } };\n    const webgl = new WebGL(rc);\n\n    // -- Init Program\n    const programTransform = (function (vertexShaderSourceTransform, fragmentShaderSourceTransform)\n    {\n        const transformFeedbackPipeline: TransformFeedbackPipeline = {\n            vertex: { code: vertexShaderSourceTransform },\n            transformFeedbackVaryings: { varyings: [\"gl_Position\", \"v_color\"], bufferMode: \"SEPARATE_ATTRIBS\" },\n        };\n\n        return transformFeedbackPipeline;\n    })(getShaderSource(\"vs-transform\"), getShaderSource(\"fs-transform\"));\n\n    const programFeedback: RenderPipeline = {\n        vertex: { code: getShaderSource(\"vs-feedback\") }, fragment: { code: getShaderSource(\"fs-feedback\") },\n    };\n\n    const PROGRAM_TRANSFORM = 0;\n    const PROGRAM_FEEDBACK = 1;\n    const programs = [programTransform, programFeedback];\n\n    // -- Init Buffer\n\n    const VERTEX_COUNT = 6;\n    const positions = new Float32Array([\n        -1.0, -1.0, 0.0, 1.0,\n        1.0, -1.0, 0.0, 1.0,\n        1.0, 1.0, 0.0, 1.0,\n        1.0, 1.0, 0.0, 1.0,\n        -1.0, 1.0, 0.0, 1.0,\n        -1.0, -1.0, 0.0, 1.0\n    ]);\n\n    const BufferType = {\n        VERTEX: 0,\n        POSITION: 1,\n        COLOR: 2,\n        MAX: 3\n    };\n\n    const buffers: VertexDataTypes[] = [\n        // Transform buffer\n        positions,\n        // Feedback empty buffers\n        positions.slice(),\n        positions.slice(),\n    ];\n\n    // -- Init Transform Vertex Array\n    const vertexArrays: { vertices?: VertexAttributes, indices?: IndicesDataTypes }[] = [\n        {\n            vertices: {\n                position: { data: buffers[BufferType.VERTEX], format: \"float32x4\" },\n            }\n        },\n        {\n            vertices: {\n                position: { data: buffers[BufferType.POSITION], format: \"float32x4\" },\n                color: { data: buffers[BufferType.COLOR], format: \"float32x4\" },\n            }\n        },\n    ];\n\n    // -- Init TransformFeedback\n    const transformFeedback: TransformFeedback = {\n        bindBuffers: [\n            { index: 0, data: buffers[BufferType.POSITION] },\n            { index: 1, data: buffers[BufferType.COLOR] },\n        ]\n    };\n\n    // First draw, capture the attributes\n    // Disable rasterization, vertices processing only\n\n    const matrix = new Float32Array([\n        0.5, 0.0, 0.0, 0.0,\n        0.0, 0.5, 0.0, 0.0,\n        0.0, 0.0, 0.5, 0.0,\n        0.0, 0.0, 0.0, 1.0\n    ]);\n\n    const submit: Submit = {\n        commandEncoders: [{\n            passEncoders: [\n                {\n                    __type__: \"TransformFeedbackPass\",\n                    transformFeedbackObjects: [\n                        {\n                            pipeline: programTransform,\n                            vertices: vertexArrays[PROGRAM_TRANSFORM].vertices,\n                            uniforms: { MVP: matrix },\n                            transformFeedback,\n                            draw: { __type__: \"DrawVertex\", vertexCount: VERTEX_COUNT },\n                        }\n                    ]\n                },\n                {\n                    descriptor: { colorAttachments: [{ clearValue: [0.0, 0.0, 0.0, 1.0], loadOp: \"clear\" }] },\n                    renderPassObjects: [\n                        // Second draw, reuse captured attributes\n                        {\n                            pipeline: programs[PROGRAM_FEEDBACK],\n                            vertices: vertexArrays[PROGRAM_FEEDBACK].vertices,\n                            indices: vertexArrays[PROGRAM_FEEDBACK].indices,\n                            draw: { __type__: \"DrawVertex\", vertexCount: VERTEX_COUNT },\n                        }\n                    ],\n                }\n            ]\n        }]\n    };\n\n    webgl.submit(submit);\n\n    // -- Delete WebGL resources\n    // gl.deleteTransformFeedback(transformFeedback);\n    // gl.deleteBuffer(buffers[BufferType.VERTEX]);\n    // gl.deleteBuffer(buffers[BufferType.POSITION]);\n    // gl.deleteBuffer(buffers[BufferType.COLOR]);\n    // gl.deleteProgram(programs[PROGRAM_TRANSFORM]);\n    // gl.deleteProgram(programs[PROGRAM_FEEDBACK]);\n    // gl.deleteVertexArray(vertexArrays[PROGRAM_TRANSFORM]);\n    // gl.deleteVertexArray(vertexArrays[PROGRAM_FEEDBACK]);\n})();\n"],"names":["canvas","rc","webgl","WebGL","programTransform","vertexShaderSourceTransform","fragmentShaderSourceTransform","getShaderSource","programFeedback","PROGRAM_TRANSFORM","PROGRAM_FEEDBACK","programs","VERTEX_COUNT","positions","BufferType","buffers","vertexArrays","transformFeedback","matrix","submit"],"mappings":"4IAKC,UACD,CAEU,MAAAA,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,GAAK,WACZA,EAAO,MAAQ,KAAK,IAAI,OAAO,WAAY,OAAO,WAAW,EAC7DA,EAAO,OAASA,EAAO,MACd,SAAA,KAAK,YAAYA,CAAM,EAG1B,MAAAC,EAAoB,CAAE,SAAU,WAAY,eAAgB,SAAU,uBAAwB,CAAE,UAAW,EAAA,GAC3GC,EAAQ,IAAIC,EAAMF,CAAE,EAGpBG,EAAoB,SAAUC,EAA6BC,EACjE,CAMW,MALsD,CACzD,OAAQ,CAAE,KAAMD,CAA4B,EAC5C,0BAA2B,CAAE,SAAU,CAAC,cAAe,SAAS,EAAG,WAAY,kBAAmB,CAAA,GAIvGE,EAAgB,cAAc,EAAGA,EAAgB,cAAc,CAAC,EAE7DC,EAAkC,CACpC,OAAQ,CAAE,KAAMD,EAAgB,aAAa,CAAE,EAAG,SAAU,CAAE,KAAMA,EAAgB,aAAa,CAAE,CAAA,EAGjGE,EAAoB,EACpBC,EAAmB,EACnBC,EAAW,CAACP,EAAkBI,CAAe,EAI7CI,EAAe,EACfC,EAAY,IAAI,aAAa,CAC/B,GAAM,GAAM,EAAK,EACjB,EAAK,GAAM,EAAK,EAChB,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,EACf,GAAM,EAAK,EAAK,EAChB,GAAM,GAAM,EAAK,CAAA,CACpB,EAEKC,EAAa,CACf,OAAQ,EACR,SAAU,EACV,MAAO,EACP,IAAK,CAAA,EAGHC,EAA6B,CAE/BF,EAEAA,EAAU,MAAM,EAChBA,EAAU,MAAM,CAAA,EAIdG,EAA8E,CAChF,CACI,SAAU,CACN,SAAU,CAAE,KAAMD,EAAQD,EAAW,MAAM,EAAG,OAAQ,WAAY,CACtE,CACJ,EACA,CACI,SAAU,CACN,SAAU,CAAE,KAAMC,EAAQD,EAAW,QAAQ,EAAG,OAAQ,WAAY,EACpE,MAAO,CAAE,KAAMC,EAAQD,EAAW,KAAK,EAAG,OAAQ,WAAY,CAClE,CACJ,CAAA,EAIEG,EAAuC,CACzC,YAAa,CACT,CAAE,MAAO,EAAG,KAAMF,EAAQD,EAAW,QAAQ,CAAE,EAC/C,CAAE,MAAO,EAAG,KAAMC,EAAQD,EAAW,KAAK,CAAE,CAChD,CAAA,EAMEI,EAAS,IAAI,aAAa,CAC5B,GAAK,EAAK,EAAK,EACf,EAAK,GAAK,EAAK,EACf,EAAK,EAAK,GAAK,EACf,EAAK,EAAK,EAAK,CAAA,CAClB,EAEKC,EAAiB,CACnB,gBAAiB,CAAC,CACd,aAAc,CACV,CACI,SAAU,wBACV,yBAA0B,CACtB,CACI,SAAUf,EACV,SAAUY,EAAaP,CAAiB,EAAE,SAC1C,SAAU,CAAE,IAAKS,CAAO,EACxB,kBAAAD,EACA,KAAM,CAAE,SAAU,aAAc,YAAaL,CAAa,CAC9D,CACJ,CACJ,EACA,CACI,WAAY,CAAE,iBAAkB,CAAC,CAAE,WAAY,CAAC,EAAK,EAAK,EAAK,CAAG,EAAG,OAAQ,OAAS,CAAA,CAAE,EACxF,kBAAmB,CAEf,CACI,SAAUD,EAASD,CAAgB,EACnC,SAAUM,EAAaN,CAAgB,EAAE,SACzC,QAASM,EAAaN,CAAgB,EAAE,QACxC,KAAM,CAAE,SAAU,aAAc,YAAaE,CAAa,CAC9D,CACJ,CACJ,CACJ,CAAA,CACH,CAAA,EAGLV,EAAM,OAAOiB,CAAM,CAWvB,GAAG"}