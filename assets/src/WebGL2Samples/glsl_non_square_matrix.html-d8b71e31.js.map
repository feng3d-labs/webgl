{"version":3,"file":"glsl_non_square_matrix.html-d8b71e31.js","sources":["../../../../examples/src/WebGL2Samples/glsl_non_square_matrix.ts"],"sourcesContent":["import { CanvasContext, RenderPass, RenderPipeline, Sampler, Texture, VertexAttributes } from \"@feng3d/render-api\";\nimport { WebGL } from \"@feng3d/webgl\";\nimport { getShaderSource, loadImage } from \"./utility\";\n\nconst canvas = document.createElement(\"canvas\");\ncanvas.id = \"glcanvas\";\ncanvas.width = Math.min(window.innerWidth, window.innerHeight);\ncanvas.height = canvas.width;\ndocument.body.appendChild(canvas);\n\nconst rc: CanvasContext = { canvasId: \"glcanvas\", webGLcontextId: \"webgl2\" };\nconst webgl = new WebGL(rc);\n\n// -- Init program\nconst program: RenderPipeline = {\n    vertex: { code: getShaderSource(\"vs\") }, fragment: { code: getShaderSource(\"fs\") },\n    primitive: { topology: \"triangle-list\" },\n};\n\n// -- Init buffers: vec2 Position, vec2 Texcoord\nconst positions = new Float32Array([\n    -1.0, -1.0,\n    1.0, -1.0,\n    1.0, 1.0,\n    1.0, 1.0,\n    -1.0, 1.0,\n    -1.0, -1.0\n]);\n\nconst texCoords = new Float32Array([\n    0.0, 1.0,\n    1.0, 1.0,\n    1.0, 0.0,\n    1.0, 0.0,\n    0.0, 0.0,\n    0.0, 1.0\n]);\n\n// -- Init VertexArray\nconst vertexArray: { vertices?: VertexAttributes } = {\n    vertices: {\n        position: { data: positions, format: \"float32x2\" },\n        texcoord: { data: texCoords, format: \"float32x2\" },\n    }\n};\n\nloadImage(\"../../assets/img/Di-3d.png\", function (image)\n{\n    // -- Init Texture\n    const texture: Texture = {\n        size: [image.width, image.height],\n        format: \"rgba8unorm\",\n        sources: [{\n            image, flipY: false,\n        }]\n    };\n    const sampler: Sampler = { minFilter: \"nearest\", magFilter: \"nearest\" };\n\n    // -- Render\n    const matrix = new Float32Array([\n        0.5, 0.0, 0.0,\n        0.0, 0.5, 0.0,\n        0.0, 0.0, 0.5,\n        0.2, -0.2, 0.0 //translation\n    ]);\n\n    const rp: RenderPass = {\n        descriptor: { colorAttachments: [{ clearValue: [0.0, 0.0, 0.0, 1.0], loadOp: \"clear\" }] },\n        renderPassObjects: [{\n            pipeline: program,\n            bindingResources: { MVP: matrix, diffuse: { texture, sampler } },\n            vertices: vertexArray.vertices,\n            draw: { __type__: \"DrawVertex\", vertexCount: 6 },\n        }]\n    };\n\n    webgl.submit({ commandEncoders: [{ passEncoders: [rp] }] });\n\n    // Delete WebGL resources\n    webgl.deleteTexture(texture);\n    webgl.deleteProgram(program);\n});\n"],"names":["canvas","rc","webgl","WebGL","program","getShaderSource","positions","texCoords","vertexArray","loadImage","image","texture","sampler","matrix","rp"],"mappings":"kJAIA,MAAMA,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,GAAK,WACZA,EAAO,MAAQ,KAAK,IAAI,OAAO,WAAY,OAAO,WAAW,EAC7DA,EAAO,OAASA,EAAO,MACvB,SAAS,KAAK,YAAYA,CAAM,EAEhC,MAAMC,EAAoB,CAAE,SAAU,WAAY,eAAgB,QAAS,EACrEC,EAAQ,IAAIC,EAAMF,CAAE,EAGpBG,EAA0B,CAC5B,OAAQ,CAAE,KAAMC,EAAgB,IAAI,CAAE,EAAG,SAAU,CAAE,KAAMA,EAAgB,IAAI,CAAE,EACjF,UAAW,CAAE,SAAU,eAAgB,CAC3C,EAGMC,EAAY,IAAI,aAAa,CAC/B,GAAM,GACN,EAAK,GACL,EAAK,EACL,EAAK,EACL,GAAM,EACN,GAAM,EACV,CAAC,EAEKC,EAAY,IAAI,aAAa,CAC/B,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,CACT,CAAC,EAGKC,EAA+C,CACjD,SAAU,CACN,SAAU,CAAE,KAAMF,EAAW,OAAQ,WAAY,EACjD,SAAU,CAAE,KAAMC,EAAW,OAAQ,WAAY,CACrD,CACJ,EAEAE,EAAU,6BAA8B,SAAUC,EAClD,CAEI,MAAMC,EAAmB,CACrB,KAAM,CAACD,EAAM,MAAOA,EAAM,MAAM,EAChC,OAAQ,aACR,QAAS,CAAC,CACN,MAAAA,EAAO,MAAO,EAAA,CACjB,CAAA,EAECE,EAAmB,CAAE,UAAW,UAAW,UAAW,SAAU,EAGhEC,EAAS,IAAI,aAAa,CAC5B,GAAK,EAAK,EACV,EAAK,GAAK,EACV,EAAK,EAAK,GACV,GAAK,IAAM,CAAA,CACd,EAEKC,EAAiB,CACnB,WAAY,CAAE,iBAAkB,CAAC,CAAE,WAAY,CAAC,EAAK,EAAK,EAAK,CAAG,EAAG,OAAQ,OAAS,CAAA,CAAE,EACxF,kBAAmB,CAAC,CAChB,SAAUV,EACV,iBAAkB,CAAE,IAAKS,EAAQ,QAAS,CAAE,QAAAF,EAAS,QAAAC,EAAU,EAC/D,SAAUJ,EAAY,SACtB,KAAM,CAAE,SAAU,aAAc,YAAa,CAAE,CAAA,CAClD,CAAA,EAGCN,EAAA,OAAO,CAAE,gBAAiB,CAAC,CAAE,aAAc,CAACY,CAAE,EAAG,CAAA,CAAG,EAG1DZ,EAAM,cAAcS,CAAO,EAC3BT,EAAM,cAAcE,CAAO,CAC/B,CAAC"}