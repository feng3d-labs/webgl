{"version":3,"file":"texture_pixel_store.html-74adc217.js","sources":["../../../../examples/src/WebGL2Samples/texture_pixel_store.ts"],"sourcesContent":["import { CanvasContext, IndicesDataTypes, RenderPass, RenderPassObject, RenderPipeline, Sampler, Texture, VertexAttributes, VertexDataTypes } from \"@feng3d/render-api\";\nimport { getIGLBuffer, WebGL } from \"@feng3d/webgl\";\nimport { getShaderSource, loadImage } from \"./utility\";\n\n(function ()\n{\n    const canvas = document.createElement(\"canvas\");\n    canvas.id = \"glcanvas\";\n    canvas.width = Math.min(window.innerWidth, window.innerHeight);\n    canvas.height = canvas.width;\n    document.body.appendChild(canvas);\n\n    const rc: CanvasContext = { canvasId: \"glcanvas\", webGLcontextId: \"webgl2\", webGLContextAttributes: { antialias: false } };\n    const webgl = new WebGL(rc);\n\n    // -- Init program\n    const program: RenderPipeline = {\n        vertex: { code: getShaderSource(\"vs\") }, fragment: { code: getShaderSource(\"fs\") },\n    };\n\n    // -- Init buffers: vec2 Position, vec2 Texcoord\n    const positions = new Float32Array([\n        -1.0, -1.0,\n        1.0, -1.0,\n        1.0, 1.0,\n        1.0, 1.0,\n        -1.0, 1.0,\n        -1.0, -1.0\n    ]);\n    const vertexPosBuffer: VertexDataTypes = positions;\n\n    const texCoords = new Float32Array([\n        0.0, 1.0,\n        1.0, 1.0,\n        1.0, 0.0,\n        1.0, 0.0,\n        0.0, 0.0,\n        0.0, 1.0\n    ]);\n    const vertexTexBuffer: VertexDataTypes = texCoords;\n\n    // -- Init VertexArray\n    const vertexArray: { vertices?: VertexAttributes, indices?: IndicesDataTypes } = {\n        vertices: {\n            position: { data: vertexPosBuffer, format: \"float32x2\" },\n            texcoord: { data: vertexTexBuffer, format: \"float32x2\" },\n        }\n    };\n\n    loadImage(\"../../assets/img/Di-3d.png\", function (image)\n    {\n        // use canvas to get the pixel data array of the image\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(image, 0, 0);\n        const imageData = ctx.getImageData(0, 0, image.width, image.height);\n        const pixels = new Uint8Array(imageData.data.buffer);\n\n        // -- Init Texture\n        const texture: Texture = {\n            size: [image.width / 2, image.height / 2],\n            format: \"rgba8unorm\",\n            sources: [{\n                __type__: \"TextureDataSource\",\n                mipLevel: 0,\n                size: [image.width / 2, image.height / 2],\n                data: pixels,\n                dataLayout: { width: image.width },\n                dataImageOrigin: [image.width / 4, image.width / 4],\n            }]\n        };\n        const sampler: Sampler = {\n            minFilter: \"nearest\",\n            magFilter: \"nearest\",\n        };\n\n        const renderObjects: RenderPassObject[] = [];\n        // -- Render\n        const rp: RenderPass = {\n            descriptor: { colorAttachments: [{ clearValue: [0.0, 0.0, 0.0, 1.0], loadOp: \"clear\" }] },\n            renderPassObjects: renderObjects,\n        };\n\n        const matrix = new Float32Array([\n            0.5, 0.0, 0.0, 0.0,\n            0.0, 0.5, 0.0, 0.0,\n            0.0, 0.0, 0.5, 0.0,\n            0.0, 0.0, 0.0, 1.0\n        ]);\n\n        renderObjects.push({\n            pipeline: program,\n            bindingResources: {\n                MVP: matrix,\n                diffuse: { texture, sampler },\n            },\n            vertices: vertexArray.vertices,\n            indices: vertexArray.indices,\n            draw: { __type__: \"DrawVertex\", vertexCount: 6 },\n        });\n\n        webgl.submit({ commandEncoders: [{ passEncoders: [rp] }] });\n\n        // Delete WebGL resources\n        webgl.deleteBuffer(getIGLBuffer(vertexPosBuffer));\n        webgl.deleteBuffer(getIGLBuffer(vertexTexBuffer));\n        webgl.deleteTexture(texture);\n        webgl.deleteProgram(program);\n    });\n})();\n"],"names":["canvas","rc","webgl","WebGL","program","getShaderSource","vertexPosBuffer","vertexTexBuffer","vertexArray","loadImage","image","ctx","imageData","pixels","texture","sampler","renderObjects","rp","matrix","getIGLBuffer"],"mappings":"0JAIC,UACD,CACU,MAAAA,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,GAAK,WACZA,EAAO,MAAQ,KAAK,IAAI,OAAO,WAAY,OAAO,WAAW,EAC7DA,EAAO,OAASA,EAAO,MACd,SAAA,KAAK,YAAYA,CAAM,EAE1B,MAAAC,EAAoB,CAAE,SAAU,WAAY,eAAgB,SAAU,uBAAwB,CAAE,UAAW,EAAA,GAC3GC,EAAQ,IAAIC,EAAMF,CAAE,EAGpBG,EAA0B,CAC5B,OAAQ,CAAE,KAAMC,EAAgB,IAAI,CAAE,EAAG,SAAU,CAAE,KAAMA,EAAgB,IAAI,CAAE,CAAA,EAY/EC,EARY,IAAI,aAAa,CAC/B,GAAM,GACN,EAAK,GACL,EAAK,EACL,EAAK,EACL,GAAM,EACN,GAAM,EAAA,CACT,EAWKC,EARY,IAAI,aAAa,CAC/B,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,CAAA,CACR,EAIKC,EAA2E,CAC7E,SAAU,CACN,SAAU,CAAE,KAAMF,EAAiB,OAAQ,WAAY,EACvD,SAAU,CAAE,KAAMC,EAAiB,OAAQ,WAAY,CAC3D,CAAA,EAGME,EAAA,6BAA8B,SAAUC,EAClD,CAEUV,MAAAA,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,MAAQU,EAAM,MACrBV,EAAO,OAASU,EAAM,OAChB,MAAAC,EAAMX,EAAO,WAAW,IAAI,EAC9BW,EAAA,UAAUD,EAAO,EAAG,CAAC,EACnB,MAAAE,EAAYD,EAAI,aAAa,EAAG,EAAGD,EAAM,MAAOA,EAAM,MAAM,EAC5DG,EAAS,IAAI,WAAWD,EAAU,KAAK,MAAM,EAG7CE,EAAmB,CACrB,KAAM,CAACJ,EAAM,MAAQ,EAAGA,EAAM,OAAS,CAAC,EACxC,OAAQ,aACR,QAAS,CAAC,CACN,SAAU,oBACV,SAAU,EACV,KAAM,CAACA,EAAM,MAAQ,EAAGA,EAAM,OAAS,CAAC,EACxC,KAAMG,EACN,WAAY,CAAE,MAAOH,EAAM,KAAM,EACjC,gBAAiB,CAACA,EAAM,MAAQ,EAAGA,EAAM,MAAQ,CAAC,CAAA,CACrD,CAAA,EAECK,EAAmB,CACrB,UAAW,UACX,UAAW,SAAA,EAGTC,EAAoC,CAAA,EAEpCC,EAAiB,CACnB,WAAY,CAAE,iBAAkB,CAAC,CAAE,WAAY,CAAC,EAAK,EAAK,EAAK,CAAG,EAAG,OAAQ,OAAS,CAAA,CAAE,EACxF,kBAAmBD,CAAA,EAGjBE,EAAS,IAAI,aAAa,CAC5B,GAAK,EAAK,EAAK,EACf,EAAK,GAAK,EAAK,EACf,EAAK,EAAK,GAAK,EACf,EAAK,EAAK,EAAK,CAAA,CAClB,EAEDF,EAAc,KAAK,CACf,SAAUZ,EACV,iBAAkB,CACd,IAAKc,EACL,QAAS,CAAE,QAAAJ,EAAS,QAAAC,CAAQ,CAChC,EACA,SAAUP,EAAY,SACtB,QAASA,EAAY,QACrB,KAAM,CAAE,SAAU,aAAc,YAAa,CAAE,CAAA,CAClD,EAEKN,EAAA,OAAO,CAAE,gBAAiB,CAAC,CAAE,aAAc,CAACe,CAAE,EAAG,CAAA,CAAG,EAGpDf,EAAA,aAAaiB,EAAab,CAAe,CAAC,EAC1CJ,EAAA,aAAaiB,EAAaZ,CAAe,CAAC,EAChDL,EAAM,cAAcY,CAAO,EAC3BZ,EAAM,cAAcE,CAAO,CAAA,CAC9B,CACL,GAAG"}