{"version":3,"file":"texture_2d_array.html-d15af9b4.js","sources":["../../../../examples/src/WebGL2Samples/texture_2d_array.ts"],"sourcesContent":["import { CanvasContext, RenderObject, RenderPass, RenderPipeline, Sampler, Texture, VertexAttributes } from \"@feng3d/render-api\";\nimport { WebGL } from \"@feng3d/webgl\";\nimport { getShaderSource, loadImage } from \"./utility\";\n\n(function ()\n{\n    const canvas = document.createElement(\"canvas\");\n    canvas.id = \"glcanvas\";\n    canvas.height = window.innerHeight;\n    canvas.width = canvas.height * 960 / 540;\n    document.body.appendChild(canvas);\n\n    const rc: CanvasContext = { canvasId: \"glcanvas\", webGLcontextId: \"webgl2\" };\n    const webgl = new WebGL(rc);\n\n    // -- Init program\n    const program: RenderPipeline = {\n        vertex: { code: getShaderSource(\"vs\") }, fragment: { code: getShaderSource(\"fs\") },\n    };\n\n    // -- Init buffers\n    const positions = new Float32Array([\n        -1.0, -1.0,\n        1.0, -1.0,\n        1.0, 1.0,\n        1.0, 1.0,\n        -1.0, 1.0,\n        -1.0, -1.0\n    ]);\n\n    const texCoords = new Float32Array([\n        0.0, 1.0,\n        1.0, 1.0,\n        1.0, 0.0,\n        1.0, 0.0,\n        0.0, 0.0,\n        0.0, 1.0\n    ]);\n\n    // -- Init VertexArray\n    const vertexArray: { vertices?: VertexAttributes } = {\n        vertices: {\n            position: { data: positions, format: \"float32x2\" },\n            texcoord: { data: texCoords, format: \"float32x2\" },\n        }\n    };\n\n    let texture: Texture;\n    let sampler: Sampler;\n    loadImage(\"../../assets/img/di-animation-array.jpg\", function (image)\n    {\n        const NUM_IMAGES = 3;\n        const IMAGE_SIZE = {\n            width: 960,\n            height: 540\n        };\n        // use canvas to get the pixel data array of the image\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = IMAGE_SIZE.width;\n        canvas.height = IMAGE_SIZE.height * NUM_IMAGES;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(image, 0, 0);\n        const imageData = ctx.getImageData(0, 0, IMAGE_SIZE.width, IMAGE_SIZE.height * NUM_IMAGES);\n        const pixels = new Uint8Array(imageData.data.buffer);\n\n        // -- Init Texture\n        texture = {\n            size: [IMAGE_SIZE.width, IMAGE_SIZE.height, NUM_IMAGES],\n            dimension: \"2d-array\",\n            format: \"rgba8unorm\",\n            sources: [{ __type__: \"TextureDataSource\", size: [IMAGE_SIZE.width, IMAGE_SIZE.height, NUM_IMAGES], data: pixels }],\n        };\n        sampler = {\n            minFilter: \"linear\",\n            magFilter: \"linear\",\n        };\n\n        const matrix = new Float32Array([\n            1.0, 0.0, 0.0, 0.0,\n            0.0, 1.0, 0.0, 0.0,\n            0.0, 0.0, 1.0, 0.0,\n            0.0, 0.0, 0.0, 1.0\n        ]);\n\n        const ro: RenderObject = {\n            pipeline: program,\n            bindingResources: {\n                MVP: matrix,\n                diffuse: { texture, sampler },\n            },\n            geometry: {\n                vertices: vertexArray.vertices,\n                draw: { __type__: \"DrawVertex\", vertexCount: 6 },\n            }\n        };\n\n        const rp: RenderPass = {\n            descriptor: { colorAttachments: [{ clearValue: [1.0, 1.0, 1.0, 1.0], loadOp: \"clear\" }] },\n            renderObjects: [ro],\n        };\n\n        let frame = 0;\n        (function render()\n        {\n            // -- Render\n            ro.bindingResources.layer = frame;\n\n            webgl.submit({ commandEncoders: [{ passEncoders: [rp] }] });\n\n            frame = (frame + 1) % NUM_IMAGES;\n\n            setTimeout(function ()\n            {\n                requestAnimationFrame(render);\n            }, 200);\n        })();\n    });\n\n    // If you have a long-running page, and need to delete WebGL resources, use:\n    //\n    // gl.deleteBuffer(vertexPosBuffer);\n    // gl.deleteBuffer(vertexTexBuffer);\n    // gl.deleteTexture(texture);\n    // gl.deleteProgram(program);\n    // gl.deleteVertexArray(vertexArray);\n})();\n"],"names":["canvas","rc","webgl","WebGL","program","getShaderSource","positions","texCoords","vertexArray","texture","sampler","loadImage","image","IMAGE_SIZE","ctx","imageData","pixels","matrix","ro","rp","frame","render"],"mappings":"mJAIC,UACD,CACU,MAAAA,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,GAAK,WACZA,EAAO,OAAS,OAAO,YAChBA,EAAA,MAAQA,EAAO,OAAS,IAAM,IAC5B,SAAA,KAAK,YAAYA,CAAM,EAEhC,MAAMC,EAAoB,CAAE,SAAU,WAAY,eAAgB,QAAS,EACrEC,EAAQ,IAAIC,EAAMF,CAAE,EAGpBG,EAA0B,CAC5B,OAAQ,CAAE,KAAMC,EAAgB,IAAI,CAAE,EAAG,SAAU,CAAE,KAAMA,EAAgB,IAAI,CAAE,CAAA,EAI/EC,EAAY,IAAI,aAAa,CAC/B,GAAM,GACN,EAAK,GACL,EAAK,EACL,EAAK,EACL,GAAM,EACN,GAAM,EAAA,CACT,EAEKC,EAAY,IAAI,aAAa,CAC/B,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,CAAA,CACR,EAGKC,EAA+C,CACjD,SAAU,CACN,SAAU,CAAE,KAAMF,EAAW,OAAQ,WAAY,EACjD,SAAU,CAAE,KAAMC,EAAW,OAAQ,WAAY,CACrD,CAAA,EAGA,IAAAE,EACAC,EACMC,EAAA,0CAA2C,SAAUC,EAC/D,CAEI,MAAMC,EAAa,CACf,MAAO,IACP,OAAQ,GAAA,EAGNb,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,MAAQa,EAAW,MAC1Bb,EAAO,OAASa,EAAW,OAAS,EAC9B,MAAAC,EAAMd,EAAO,WAAW,IAAI,EAC9Bc,EAAA,UAAUF,EAAO,EAAG,CAAC,EACnB,MAAAG,EAAYD,EAAI,aAAa,EAAG,EAAGD,EAAW,MAAOA,EAAW,OAAS,CAAU,EACnFG,EAAS,IAAI,WAAWD,EAAU,KAAK,MAAM,EAGzCN,EAAA,CACN,KAAM,CAACI,EAAW,MAAOA,EAAW,OAAQ,CAAU,EACtD,UAAW,WACX,OAAQ,aACR,QAAS,CAAC,CAAE,SAAU,oBAAqB,KAAM,CAACA,EAAW,MAAOA,EAAW,OAAQ,CAAU,EAAG,KAAMG,EAAQ,CAAA,EAE5GN,EAAA,CACN,UAAW,SACX,UAAW,QAAA,EAGT,MAAAO,EAAS,IAAI,aAAa,CAC5B,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,CAAA,CAClB,EAEKC,EAAmB,CACrB,SAAUd,EACV,iBAAkB,CACd,IAAKa,EACL,QAAS,CAAE,QAAAR,EAAS,QAAAC,CAAQ,CAChC,EACA,SAAU,CACN,SAAUF,EAAY,SACtB,KAAM,CAAE,SAAU,aAAc,YAAa,CAAE,CACnD,CAAA,EAGEW,EAAiB,CACnB,WAAY,CAAE,iBAAkB,CAAC,CAAE,WAAY,CAAC,EAAK,EAAK,EAAK,CAAG,EAAG,OAAQ,OAAS,CAAA,CAAE,EACxF,cAAe,CAACD,CAAE,CAAA,EAGtB,IAAIE,EAAQ,GACX,SAASC,GACV,CAEIH,EAAG,iBAAiB,MAAQE,EAEtBlB,EAAA,OAAO,CAAE,gBAAiB,CAAC,CAAE,aAAc,CAACiB,CAAE,EAAG,CAAA,CAAG,EAE1DC,GAASA,EAAQ,GAAK,EAEtB,WAAW,UACX,CACI,sBAAsBC,CAAM,GAC7B,GAAG,CAAA,IACP,CACN,CASL,GAAG"}