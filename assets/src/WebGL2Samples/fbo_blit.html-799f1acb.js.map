{"version":3,"file":"fbo_blit.html-799f1acb.js","sources":["../../../../examples/src/WebGL2Samples/fbo_blit.ts"],"sourcesContent":["import { CanvasContext, RenderObject, RenderPass, RenderPassDescriptor, RenderPipeline, Sampler, Texture, TextureView, VertexAttributes } from \"@feng3d/render-api\";\nimport { BlitFramebuffer, BlitFramebufferItem, WebGL } from \"@feng3d/webgl\";\nimport { getShaderSource, loadImage } from \"./utility\";\n\nconst canvas = document.createElement(\"canvas\");\ncanvas.id = \"glcanvas\";\ncanvas.width = Math.min(window.innerWidth, window.innerHeight);\ncanvas.height = canvas.width;\ndocument.body.appendChild(canvas);\n\nconst renderingContext: CanvasContext = { canvasId: \"glcanvas\" };\nconst webgl = new WebGL(renderingContext);\n\nconst program: RenderPipeline = {\n    vertex: {\n        code: getShaderSource(\"vs\")\n    },\n    fragment: {\n        code: getShaderSource(\"fs\"),\n        targets: [{ blend: {} }]\n    },\n};\n\nconst vertexPosBuffer = new Float32Array([\n    -1.0, -1.0,\n    1.0, -1.0,\n    1.0, 1.0,\n    1.0, 1.0,\n    -1.0, 1.0,\n    -1.0, -1.0\n]);\nconst vertexTexBuffer = new Float32Array([\n    0.0, 1.0,\n    1.0, 1.0,\n    1.0, 0.0,\n    1.0, 0.0,\n    0.0, 0.0,\n    0.0, 1.0\n]);\n\nconst vertices: VertexAttributes = {\n    position: { data: vertexPosBuffer, format: \"float32x2\" },\n    texcoord: { data: vertexTexBuffer, format: \"float32x2\" },\n};\n\nloadImage(\"../../assets/img/Di-3d.png\", (image) =>\n{\n    const FRAMEBUFFER_SIZE = {\n        x: image.width,\n        y: image.height\n    };\n\n    const textureDiffuse: Texture = {\n        size: [image.width, image.height],\n        format: \"rgba8unorm\",\n        sources: [{\n            image, flipY: true\n        }],\n    };\n    const samplerDiffuse: Sampler = {\n        minFilter: \"linear\",\n        magFilter: \"linear\",\n    };\n\n    const textureColorBuffer: Texture = {\n        format: \"rgba8unorm\",\n        size: [FRAMEBUFFER_SIZE.x, FRAMEBUFFER_SIZE.y],\n    };\n    const samplerColorBuffer: Sampler = {\n        minFilter: \"linear\",\n        magFilter: \"linear\",\n    };\n\n    // 此处 Renderbuffer 直接使用 IGLTextureView 替代。\n    const colorRenderbuffer: TextureView = { texture: { format: \"rgba8unorm\", size: [FRAMEBUFFER_SIZE.x, FRAMEBUFFER_SIZE.y] } };\n\n    const vertexArray: { vertices?: VertexAttributes } = {\n        vertices,\n    };\n\n    const renderObject: RenderObject = {\n        viewport: { x: 0, y: 0, width: FRAMEBUFFER_SIZE.x, height: FRAMEBUFFER_SIZE.y },\n        pipeline: program,\n        bindingResources: {\n            MVP: new Float32Array([\n                0.8, 0.0, 0.0, 0.0,\n                0.0, 0.8, 0.0, 0.0,\n                0.0, 0.0, 0.8, 0.0,\n                0.0, 0.0, 0.0, 1.0\n            ]),\n            diffuse: { texture: textureDiffuse, sampler: samplerDiffuse },\n        },\n        geometry: {\n            primitive: { topology: \"triangle-list\" },\n            vertices: vertexArray.vertices,\n            draw: { __type__: \"DrawVertex\", firstVertex: 0, vertexCount: 6 }\n        }\n    };\n\n    // Render FBO\n    const fboRenderPass: RenderPass = {\n        descriptor: {\n            colorAttachments: [{\n                view: colorRenderbuffer,\n                clearValue: [0.3, 0.3, 0.3, 1.0]\n            }]\n        },\n        renderObjects: [renderObject],\n    };\n\n    const framebufferResolve: RenderPassDescriptor = {\n        colorAttachments: [{\n            view: { texture: textureColorBuffer, baseMipLevel: 0 },\n            clearValue: [0.7, 0.0, 0.0, 1.0]\n        }]\n    };\n\n    //\n    const renderPassResolve: RenderPass = {\n        descriptor: framebufferResolve,\n    };\n\n    const blitFramebuffers: BlitFramebufferItem[] = [];\n    const TILE = 4;\n    const BORDER = 2;\n    for (let j = 0; j < TILE; j++)\n    {\n        for (let i = 0; i < TILE; i++)\n        {\n            if ((i + j) % 2)\n            {\n                continue;\n            }\n\n            blitFramebuffers.push(\n                [0, 0, FRAMEBUFFER_SIZE.x, FRAMEBUFFER_SIZE.y,\n                    FRAMEBUFFER_SIZE.x / TILE * (i + 0) + BORDER,\n                    FRAMEBUFFER_SIZE.x / TILE * (j + 0) + BORDER,\n                    FRAMEBUFFER_SIZE.y / TILE * (i + 1) - BORDER,\n                    FRAMEBUFFER_SIZE.y / TILE * (j + 1) - BORDER,\n                    \"COLOR_BUFFER_BIT\", \"LINEAR\"]\n            );\n        }\n    }\n\n    const blitFramebuffer: BlitFramebuffer = {\n        __type__: \"BlitFramebuffer\",\n        read: fboRenderPass.descriptor,\n        draw: renderPassResolve.descriptor,\n        blitFramebuffers,\n    };\n\n    const renderObject2: RenderObject = {\n        viewport: { x: 0, y: 0, width: canvas.width, height: canvas.height },\n        bindingResources: {\n            MVP: new Float32Array([\n                1.0, 0.0, 0.0, 0.0,\n                0.0, 1.0, 0.0, 0.0,\n                0.0, 0.0, 1.0, 0.0,\n                0.0, 0.0, 0.0, 1.0\n            ]),\n            diffuse: { texture: textureColorBuffer, sampler: samplerColorBuffer },\n        },\n        geometry: {\n            vertices: vertexArray.vertices,\n            draw: { __type__: \"DrawVertex\", firstVertex: 0, vertexCount: 6 },\n        },\n        pipeline: program,\n    };\n\n    const renderPass2: RenderPass = {\n        descriptor: {\n            colorAttachments: [{\n                clearValue: [0.0, 0.0, 0.0, 1.0],\n                loadOp: \"clear\",\n            }],\n        },\n        renderObjects: [renderObject2]\n    };\n\n    // 执行\n    webgl.submit({\n        commandEncoders: [{\n            passEncoders: [\n                fboRenderPass,\n                blitFramebuffer,\n                renderPass2,\n            ]\n        }]\n    });\n\n    // Delete WebGL resources\n    webgl.deleteFramebuffer(fboRenderPass.descriptor);\n    webgl.deleteFramebuffer(framebufferResolve);\n    webgl.deleteTexture(textureDiffuse);\n    webgl.deleteTexture(textureColorBuffer);\n    webgl.deleteProgram(program);\n});\n"],"names":["canvas","renderingContext","webgl","WebGL","program","getShaderSource","vertexPosBuffer","vertexTexBuffer","vertices","loadImage","image","FRAMEBUFFER_SIZE","textureDiffuse","samplerDiffuse","textureColorBuffer","samplerColorBuffer","colorRenderbuffer","vertexArray","renderObject","fboRenderPass","framebufferResolve","renderPassResolve","blitFramebuffers","TILE","BORDER","j","i","blitFramebuffer","renderObject2","renderPass2"],"mappings":"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"}