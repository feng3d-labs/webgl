{"version":3,"file":"transform_feedback_instanced.html-ecab24b5.js","sources":["../../../../examples/src/WebGL2Samples/transform_feedback_instanced.ts"],"sourcesContent":["import { reactive } from \"@feng3d/reactivity\";\nimport { CanvasContext, IndicesDataTypes, RenderObject, RenderPipeline, Submit, VertexAttributes, VertexDataTypes } from \"@feng3d/render-api\";\nimport { TransformFeedback, TransformFeedbackObject, TransformFeedbackPipeline, WebGL } from \"@feng3d/webgl\";\nimport { getShaderSource } from \"./utility\";\n\n(function ()\n{\n    // -- Init Canvas\n    const canvas = document.createElement(\"canvas\");\n    canvas.id = \"glcanvas\";\n    canvas.width = Math.min(window.innerWidth, window.innerHeight);\n    canvas.height = canvas.width;\n    document.body.appendChild(canvas);\n\n    // -- Init WebGL Context\n    const rc: CanvasContext = { canvasId: \"glcanvas\", webGLcontextId: \"webgl2\", webGLContextAttributes: { antialias: false } };\n    const webgl = new WebGL(rc);\n\n    canvas.addEventListener(\"webglcontextlost\", function (event)\n    {\n        event.preventDefault();\n    }, false);\n\n    // -- Init Program\n\n    const PROGRAM_TRANSFORM = 0;\n    const PROGRAM_DRAW = 1;\n\n    const programs = initPrograms();\n\n    // -- Initialize data\n    const NUM_INSTANCES = 1000;\n\n    let currentSourceIdx = 0;\n\n    const trianglePositions = new Float32Array([\n        0.015, 0.0,\n        -0.010, 0.010,\n        -0.010, -0.010,\n    ]);\n\n    const instanceOffsets = new Float32Array(NUM_INSTANCES * 2);\n    const instanceRotations = new Float32Array(Number(NUM_INSTANCES));\n    const instanceColors = new Float32Array(NUM_INSTANCES * 3);\n\n    for (let i = 0; i < NUM_INSTANCES; ++i)\n    {\n        const oi = i * 2;\n        const ri = i;\n        const ci = i * 3;\n\n        instanceOffsets[oi] = Math.random() * 2.0 - 1.0;\n        instanceOffsets[oi + 1] = Math.random() * 2.0 - 1.0;\n\n        instanceRotations[i] = Math.random() * 2 * Math.PI;\n\n        instanceColors[ci] = Math.random();\n        instanceColors[ci + 1] = Math.random();\n        instanceColors[ci + 2] = Math.random();\n    }\n\n    // -- Init Vertex Array\n    const OFFSET_LOCATION = 0;\n    const ROTATION_LOCATION = 1;\n    const POSITION_LOCATION = 2; // this is vertex position of the instanced geometry\n    const COLOR_LOCATION = 3;\n    const NUM_LOCATIONS = 4;\n\n    const vertexArrays: { vertices?: VertexAttributes, indices?: IndicesDataTypes }[][] = [];\n\n    // Transform feedback objects track output buffer state\n    const transformFeedbacks: TransformFeedback[] = [];\n\n    const vertexBuffers: VertexDataTypes[][] = new Array(vertexArrays.length);\n\n    for (let i = 0; i < 2; ++i)\n    {\n        vertexBuffers[i] = new Array(NUM_LOCATIONS);\n\n        vertexBuffers[i][OFFSET_LOCATION] = instanceOffsets.slice();\n        vertexBuffers[i][ROTATION_LOCATION] = instanceRotations.slice();\n        vertexBuffers[i][POSITION_LOCATION] = trianglePositions;\n        vertexBuffers[i][COLOR_LOCATION] = instanceColors;\n\n        vertexArrays[i] = [];\n        vertexArrays[i][0] = {\n            vertices: {\n                a_offset: { data: vertexBuffers[i][OFFSET_LOCATION], format: \"float32x2\" },\n                a_rotation: { data: vertexBuffers[i][ROTATION_LOCATION], format: \"float32\" },\n            }\n        };\n        vertexArrays[i][1] = {\n            vertices: {\n                a_offset: { data: vertexBuffers[i][OFFSET_LOCATION], format: \"float32x2\", stepMode: \"instance\" },\n                a_rotation: { data: vertexBuffers[i][ROTATION_LOCATION], format: \"float32\", stepMode: \"instance\" },\n                a_position: { data: vertexBuffers[i][POSITION_LOCATION], format: \"float32x2\" },\n                a_color: { data: vertexBuffers[i][COLOR_LOCATION], format: \"float32x3\", stepMode: \"instance\" },\n            }\n        };\n\n        transformFeedbacks[i] = {\n            bindBuffers: [\n                { index: 0, data: vertexBuffers[i][OFFSET_LOCATION] },\n                { index: 1, data: vertexBuffers[i][ROTATION_LOCATION] },\n            ]\n        };\n    }\n\n    function initPrograms()\n    {\n        const programTransform: TransformFeedbackPipeline = {\n            vertex: { code: getShaderSource(\"vs-emit\") },\n            transformFeedbackVaryings: { varyings: [\"v_offset\", \"v_rotation\"], bufferMode: \"SEPARATE_ATTRIBS\" },\n        };\n\n        // Setup program for draw shader\n        const programDraw: RenderPipeline = {\n            vertex: { code: getShaderSource(\"vs-draw\") }, fragment: {\n                code: getShaderSource(\"fs-draw\"),\n                targets: [{\n                    blend: {\n                        color: { srcFactor: \"src-alpha\", dstFactor: \"one\" },\n                        alpha: { srcFactor: \"src-alpha\", dstFactor: \"one\" },\n                    }\n                }]\n            },\n            primitive: { topology: \"triangle-list\" },\n        };\n\n        const programs: [TransformFeedbackPipeline, RenderPipeline] = [programTransform, programDraw];\n\n        return programs;\n    }\n\n    const transformRO: TransformFeedbackObject = {\n        pipeline: programs[PROGRAM_TRANSFORM],\n        vertices: null,\n        transformFeedback: null,\n        uniforms: {},\n        draw: { __type__: \"DrawVertex\", vertexCount: NUM_INSTANCES },\n    };\n\n    const renderRO: RenderObject = {\n        viewport: { x: 0, y: 0, width: canvas.width, height: canvas.height - 10 },\n        pipeline: programs[PROGRAM_DRAW],\n        bindingResources: {},\n        draw: { __type__: \"DrawVertex\", vertexCount: 3, instanceCount: NUM_INSTANCES },\n    };\n\n    const submit: Submit = {\n        commandEncoders: [{\n            passEncoders: [\n                {\n                    __type__: \"TransformFeedbackPass\",\n                    transformFeedbackObjects: [transformRO],\n                },\n                {\n                    descriptor: { colorAttachments: [{ clearValue: [0.0, 0.0, 0.0, 1.0], loadOp: \"clear\" }] },\n                    renderPassObjects: [renderRO],\n                }\n            ]\n        }]\n    };\n\n    function transform()\n    {\n        const time = Date.now();\n        const destinationIdx = (currentSourceIdx + 1) % 2;\n\n        // Toggle source and destination VBO\n        transformRO.vertices = vertexArrays[currentSourceIdx][0].vertices;\n        transformRO.transformFeedback = transformFeedbacks[destinationIdx];\n\n        reactive(transformRO.uniforms).u_time = time;\n\n        // Ping pong the buffers\n        currentSourceIdx = (currentSourceIdx + 1) % 2;\n    }\n\n    function render()\n    {\n        // Rotate triangles\n        transform();\n\n        reactive(renderRO).vertices = vertexArrays[currentSourceIdx][1].vertices;\n        reactive(renderRO).indices = vertexArrays[currentSourceIdx][1].indices;\n\n        webgl.submit(submit);\n\n        requestAnimationFrame(render);\n    }\n\n    requestAnimationFrame(render);\n\n    // If you have a long-running page, and need to delete WebGL resources, use:\n    //\n    // gl.deleteProgram(programs[PROGRAM_TRANSFORM]);\n    // gl.deleteProgram(programs[PROGRAM_DRAW]);\n    // for (var i = 0; i < 2; ++i) {\n    //     for (var j = 0; j < Particle.MAX; ++j) {\n    //         gl.deleteBuffer(vertexBuffers[i][j]);\n    //     }\n    // }\n    // gl.deleteVertexArray(vertexArrays[PROGRAM_TRANSFORM]);\n    // gl.deleteVertexArray(vertexArrays[PROGRAM_DRAW]);\n    // gl.deleteTransformFeedback(transformFeedbacks[0]);\n    // gl.deleteTransformFeedback(transformFeedbacks[1]);\n})();\n"],"names":["canvas","rc","webgl","WebGL","event","PROGRAM_TRANSFORM","PROGRAM_DRAW","programs","initPrograms","NUM_INSTANCES","currentSourceIdx","trianglePositions","instanceOffsets","instanceRotations","instanceColors","i","oi","ci","OFFSET_LOCATION","ROTATION_LOCATION","POSITION_LOCATION","COLOR_LOCATION","NUM_LOCATIONS","vertexArrays","transformFeedbacks","vertexBuffers","programTransform","getShaderSource","programDraw","transformRO","renderRO","submit","transform","time","destinationIdx","reactive","render"],"mappings":"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"}