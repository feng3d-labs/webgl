{"version":3,"file":"sample5.html-b2ef2714.js","sources":["../../../../examples/src/webgl-examples/sample5.ts"],"sourcesContent":["import { reactive } from \"@feng3d/reactivity\";\nimport { RenderPass, RenderObject } from \"@feng3d/render-api\";\nimport { WebGL } from \"@feng3d/webgl\";\nimport { mat4 } from \"gl-matrix\";\n\nlet cubeRotation = 0.0;\n\nmain();\n\n//\n// Start here\n//\nfunction main()\n{\n  const canvas = document.querySelector(\"#glcanvas\") as HTMLCanvasElement;\n\n  const webgl = new WebGL({ canvasId: \"glcanvas\", webGLcontextId: \"webgl\" });\n\n  // Here's where we call the routine that builds all the\n  // objects we'll be drawing.\n  const buffers = initBuffers();\n\n  const renderObject: RenderObject = {\n    pipeline: {\n      primitive: { topology: \"triangle-list\" },\n      vertex: {\n        code: `\n        attribute vec4 aVertexPosition;\n        attribute vec4 aVertexColor;\n    \n        uniform mat4 uModelViewMatrix;\n        uniform mat4 uProjectionMatrix;\n    \n        varying lowp vec4 vColor;\n    \n        void main(void) {\n          gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n          vColor = aVertexColor;\n        }\n      ` }, fragment: {\n        code: `\n        varying lowp vec4 vColor;\n    \n        void main(void) {\n          gl_FragColor = vColor;\n        }\n      ` },\n      depthStencil: { depthCompare: \"less-equal\" }\n    },\n    vertices: {\n      aVertexPosition: {\n        format: \"float32x3\",\n        data: buffers.position,\n      },\n      aVertexColor: {\n        format: \"float32x4\",\n        data: buffers.color,\n      },\n    },\n    indices: buffers.indices,\n    draw: { __type__: \"DrawIndexed\", firstIndex: 0, indexCount: 36 },\n    bindingResources: {},\n  };\n\n  const renderPass: RenderPass = {\n    descriptor: {\n      colorAttachments: [{\n        clearValue: [0.0, 0.0, 0.0, 1.0],\n        loadOp: \"clear\",\n      }],\n      depthStencilAttachment: {\n        depthClearValue: 1.0,\n        depthLoadOp: \"clear\",\n      },\n    },\n    renderPassObjects: [renderObject],\n  };\n\n  let then = 0;\n\n  // Draw the scene repeatedly\n  function render(now)\n  {\n    now *= 0.001; // convert to seconds\n    const deltaTime = now - then;\n    then = now;\n\n    const { projectionMatrix, modelViewMatrix } = drawScene(canvas, deltaTime);\n\n    reactive(renderObject.bindingResources).uProjectionMatrix = projectionMatrix;\n    reactive(renderObject.bindingResources).uModelViewMatrix = modelViewMatrix;\n\n    webgl.submit({ commandEncoders: [{ passEncoders: [renderPass] }] });\n\n    requestAnimationFrame(render);\n  }\n  requestAnimationFrame(render);\n}\n\n//\n// initBuffers\n//\n// Initialize the buffers we'll need. For this demo, we just\n// have one object -- a simple three-dimensional cube.\n//\nfunction initBuffers()\n{\n  // Now create an array of positions for the cube.\n\n  const positions = [\n    // Front face\n    -1.0, -1.0, 1.0,\n    1.0, -1.0, 1.0,\n    1.0, 1.0, 1.0,\n    -1.0, 1.0, 1.0,\n\n    // Back face\n    -1.0, -1.0, -1.0,\n    -1.0, 1.0, -1.0,\n    1.0, 1.0, -1.0,\n    1.0, -1.0, -1.0,\n\n    // Top face\n    -1.0, 1.0, -1.0,\n    -1.0, 1.0, 1.0,\n    1.0, 1.0, 1.0,\n    1.0, 1.0, -1.0,\n\n    // Bottom face\n    -1.0, -1.0, -1.0,\n    1.0, -1.0, -1.0,\n    1.0, -1.0, 1.0,\n    -1.0, -1.0, 1.0,\n\n    // Right face\n    1.0, -1.0, -1.0,\n    1.0, 1.0, -1.0,\n    1.0, 1.0, 1.0,\n    1.0, -1.0, 1.0,\n\n    // Left face\n    -1.0, -1.0, -1.0,\n    -1.0, -1.0, 1.0,\n    -1.0, 1.0, 1.0,\n    -1.0, 1.0, -1.0,\n  ];\n\n  // Now set up the colors for the faces. We'll use solid colors\n  // for each face.\n\n  const faceColors = [\n    [1.0, 1.0, 1.0, 1.0], // Front face: white\n    [1.0, 0.0, 0.0, 1.0], // Back face: red\n    [0.0, 1.0, 0.0, 1.0], // Top face: green\n    [0.0, 0.0, 1.0, 1.0], // Bottom face: blue\n    [1.0, 1.0, 0.0, 1.0], // Right face: yellow\n    [1.0, 0.0, 1.0, 1.0], // Left face: purple\n  ];\n\n  // Convert the array of colors into a table for all the vertices.\n\n  let colors = [];\n\n  for (let j = 0; j < faceColors.length; ++j)\n  {\n    const c = faceColors[j];\n\n    // Repeat each color four times for the four vertices of the face\n    colors = colors.concat(c, c, c, c);\n  }\n\n  // This array defines each face as two triangles, using the\n  // indices into the vertex array to specify each triangle's\n  // position.\n\n  const indices = [\n    0, 1, 2, 0, 2, 3, // front\n    4, 5, 6, 4, 6, 7, // back\n    8, 9, 10, 8, 10, 11, // top\n    12, 13, 14, 12, 14, 15, // bottom\n    16, 17, 18, 16, 18, 19, // right\n    20, 21, 22, 20, 22, 23, // left\n  ];\n\n  return {\n    position: new Float32Array(positions),\n    color: new Float32Array(colors),\n    indices: new Uint16Array(indices),\n  };\n}\n\n//\n// Draw the scene.\n//\nfunction drawScene(canvas: HTMLCanvasElement, deltaTime: number)\n{\n  // Create a perspective matrix, a special matrix that is\n  // used to simulate the distortion of perspective in a camera.\n  // Our field of view is 45 degrees, with a width/height\n  // ratio that matches the display size of the canvas\n  // and we only want to see objects between 0.1 units\n  // and 100 units away from the camera.\n\n  const fieldOfView = 45 * Math.PI / 180; // in radians\n  const aspect = canvas.clientWidth / canvas.clientHeight;\n  const zNear = 0.1;\n  const zFar = 100.0;\n  const projectionMatrix = mat4.create();\n\n  // note: glmatrix.js always has the first argument\n  // as the destination to receive the result.\n  mat4.perspective(projectionMatrix,\n    fieldOfView,\n    aspect,\n    zNear,\n    zFar);\n\n  // Set the drawing position to the \"identity\" point, which is\n  // the center of the scene.\n  const modelViewMatrix = mat4.create();\n\n  // Now move the drawing position a bit to where we want to\n  // start drawing the square.\n\n  mat4.translate(modelViewMatrix, // destination matrix\n    modelViewMatrix, // matrix to translate\n    [-0.0, 0.0, -6.0]); // amount to translate\n  mat4.rotate(modelViewMatrix, // destination matrix\n    modelViewMatrix, // matrix to rotate\n    cubeRotation, // amount to rotate in radians\n    [0, 0, 1]); // axis to rotate around (Z)\n  mat4.rotate(modelViewMatrix, // destination matrix\n    modelViewMatrix, // matrix to rotate\n    cubeRotation * 0.7, // amount to rotate in radians\n    [0, 1, 0]); // axis to rotate around (Y)\n  mat4.rotate(modelViewMatrix, // destination matrix\n    modelViewMatrix, // matrix to rotate\n    cubeRotation * 0.3, // amount to rotate in radians\n    [1, 0, 0]); // axis to rotate around (X)\n\n  // Update the rotation for the next draw\n\n  cubeRotation += deltaTime;\n\n  return { projectionMatrix, modelViewMatrix };\n}\n"],"names":["cubeRotation","main","canvas","webgl","WebGL","buffers","initBuffers","renderObject","renderPass","then","render","now","deltaTime","projectionMatrix","modelViewMatrix","drawScene","reactive","positions","faceColors","colors","j","c","indices","fieldOfView","aspect","zNear","zFar","mat4.create","mat4.perspective","mat4.translate","mat4.rotate"],"mappings":"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"}