{"version":3,"file":"sample4.html-8f7636f0.js","sources":["../../../../examples/src/webgl-examples/sample4.ts"],"sourcesContent":["import { reactive } from \"@feng3d/reactivity\";\nimport { RenderPass, RenderObject } from \"@feng3d/render-api\";\nimport { WebGL } from \"@feng3d/webgl\";\nimport { mat4 } from \"gl-matrix\";\n\nlet squareRotation = 0.0;\n\nmain();\n\n//\n// Start here\n//\nfunction main()\n{\n  const canvas = document.querySelector(\"#glcanvas\") as HTMLCanvasElement;\n\n  const webgl = new WebGL({ canvasId: \"glcanvas\", webGLcontextId: \"webgl\" });\n\n  const renderObject: RenderObject = {\n    pipeline: {\n      vertex: {\n        code: `\n        attribute vec4 aVertexPosition;\n        attribute vec4 aVertexColor;\n    \n        uniform mat4 uModelViewMatrix;\n        uniform mat4 uProjectionMatrix;\n    \n        varying lowp vec4 vColor;\n    \n        void main(void) {\n          gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n          vColor = aVertexColor;\n        }\n      ` }, fragment: {\n        code: `\n        varying lowp vec4 vColor;\n    \n        void main(void) {\n          gl_FragColor = vColor;\n        }\n      ` },\n      depthStencil: { depthCompare: \"less-equal\" },\n      primitive: { topology: \"triangle-strip\" },\n    },\n    vertices: {\n      aVertexPosition: {\n        format: \"float32x2\",\n        data: new Float32Array([\n          1.0, 1.0,\n          -1.0, 1.0,\n          1.0, -1.0,\n          -1.0, -1.0,\n        ]),\n      },\n      aVertexColor: {\n        format: \"float32x4\",\n        data: new Float32Array([\n          1.0, 1.0, 1.0, 1.0, // white\n          1.0, 0.0, 0.0, 1.0, // red\n          0.0, 1.0, 0.0, 1.0, // green\n          0.0, 0.0, 1.0, 1.0, // blue\n        ]),\n      },\n    },\n    draw: { __type__: \"DrawVertex\", firstVertex: 0, vertexCount: 4 },\n    bindingResources: {},\n  };\n\n  const renderPass: RenderPass = {\n    descriptor: {\n      colorAttachments: [{\n        clearValue: [0.0, 0.0, 0.0, 1.0],\n        loadOp: \"clear\",\n      }],\n      depthStencilAttachment: {\n        depthClearValue: 1.0,\n        depthLoadOp: \"clear\",\n      },\n    },\n    renderPassObjects: [renderObject],\n  };\n\n  let then = 0;\n\n  // Draw the scene repeatedly\n  function render(now: number)\n  {\n    now *= 0.001; // convert to seconds\n    const deltaTime = now - then;\n    then = now;\n\n    const { projectionMatrix, modelViewMatrix } = drawScene(canvas, deltaTime);\n\n    reactive(renderObject.bindingResources).uProjectionMatrix = projectionMatrix;\n    reactive(renderObject.bindingResources).uModelViewMatrix = modelViewMatrix;\n\n    webgl.submit({ commandEncoders: [{ passEncoders: [renderPass] }] });\n\n    requestAnimationFrame(render);\n  }\n  requestAnimationFrame(render);\n}\n\n//\n// Draw the scene.\n//\nfunction drawScene(canvas: HTMLCanvasElement, deltaTime: number)\n{\n  // Create a perspective matrix, a special matrix that is\n  // used to simulate the distortion of perspective in a camera.\n  // Our field of view is 45 degrees, with a width/height\n  // ratio that matches the display size of the canvas\n  // and we only want to see objects between 0.1 units\n  // and 100 units away from the camera.\n\n  const fieldOfView = 45 * Math.PI / 180; // in radians\n  const aspect = canvas.clientWidth / canvas.clientHeight;\n  const zNear = 0.1;\n  const zFar = 100.0;\n  const projectionMatrix = mat4.create();\n\n  // note: glmatrix.js always has the first argument\n  // as the destination to receive the result.\n  mat4.perspective(projectionMatrix,\n    fieldOfView,\n    aspect,\n    zNear,\n    zFar);\n\n  // Set the drawing position to the \"identity\" point, which is\n  // the center of the scene.\n  const modelViewMatrix = mat4.create();\n\n  // Now move the drawing position a bit to where we want to\n  // start drawing the square.\n\n  mat4.translate(modelViewMatrix, // destination matrix\n    modelViewMatrix, // matrix to translate\n    [-0.0, 0.0, -6.0]); // amount to translate\n  mat4.rotate(modelViewMatrix, // destination matrix\n    modelViewMatrix, // matrix to rotate\n    squareRotation, // amount to rotate in radians\n    [0, 0, 1]); // axis to rotate around\n\n  // Update the rotation for the next draw\n\n  squareRotation += deltaTime;\n\n  return { projectionMatrix, modelViewMatrix };\n}\n"],"names":["squareRotation","main","canvas","webgl","WebGL","renderObject","renderPass","then","render","now","deltaTime","projectionMatrix","modelViewMatrix","drawScene","reactive","fieldOfView","aspect","zNear","zFar","mat4.create","mat4.perspective","mat4.translate","mat4.rotate"],"mappings":"qQAKA,IAAIA,EAAiB,EAErBC,IAKA,SAASA,GACT,CACQ,MAAAC,EAAS,SAAS,cAAc,WAAW,EAE3CC,EAAQ,IAAIC,EAAM,CAAE,SAAU,WAAY,eAAgB,QAAS,EAEnEC,EAA6B,CACjC,SAAU,CACR,OAAQ,CACN,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAaN,EAAG,SAAU,CACb,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMN,EACF,aAAc,CAAE,aAAc,YAAa,EAC3C,UAAW,CAAE,SAAU,gBAAiB,CAC1C,EACA,SAAU,CACR,gBAAiB,CACf,OAAQ,YACR,KAAM,IAAI,aAAa,CACrB,EAAK,EACL,GAAM,EACN,EAAK,GACL,GAAM,EAAA,CACP,CACH,EACA,aAAc,CACZ,OAAQ,YACR,KAAM,IAAI,aAAa,CACrB,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,CAAA,CAChB,CACH,CACF,EACA,KAAM,CAAE,SAAU,aAAc,YAAa,EAAG,YAAa,CAAE,EAC/D,iBAAkB,CAAC,CAAA,EAGfC,EAAyB,CAC7B,WAAY,CACV,iBAAkB,CAAC,CACjB,WAAY,CAAC,EAAK,EAAK,EAAK,CAAG,EAC/B,OAAQ,OAAA,CACT,EACD,uBAAwB,CACtB,gBAAiB,EACjB,YAAa,OACf,CACF,EACA,kBAAmB,CAACD,CAAY,CAAA,EAGlC,IAAIE,EAAO,EAGX,SAASC,EAAOC,EAChB,CACSA,GAAA,KACP,MAAMC,EAAYD,EAAMF,EACjBA,EAAAE,EAEP,KAAM,CAAE,iBAAAE,EAAkB,gBAAAC,CAAA,EAAoBC,EAAUX,EAAQQ,CAAS,EAEhEI,EAAAT,EAAa,gBAAgB,EAAE,kBAAoBM,EACnDG,EAAAT,EAAa,gBAAgB,EAAE,iBAAmBO,EAErDT,EAAA,OAAO,CAAE,gBAAiB,CAAC,CAAE,aAAc,CAACG,CAAU,EAAG,CAAA,CAAG,EAElE,sBAAsBE,CAAM,CAC9B,CACA,sBAAsBA,CAAM,CAC9B,CAKA,SAASK,EAAUX,EAA2BQ,EAC9C,CAQQ,MAAAK,EAAc,GAAK,KAAK,GAAK,IAC7BC,EAASd,EAAO,YAAcA,EAAO,aACrCe,EAAQ,GACRC,EAAO,IACPP,EAAmBQ,IAIpBC,EAAYT,EACfI,EACAC,EACAC,EACAC,CAAA,EAII,MAAAN,EAAkBO,IAKnBE,OAAAA,EAAUT,EACbA,EACA,CAAC,GAAM,EAAK,EAAI,CAAA,EACbU,EAAOV,EACVA,EACAZ,EACA,CAAC,EAAG,EAAG,CAAC,CAAA,EAIQA,GAAAU,EAEX,CAAE,iBAAAC,EAAkB,gBAAAC,EAC7B"}