{"version":3,"file":"sample6.html-25f10654.js","sources":["../../../../examples/src/webgl-examples/sample6.ts"],"sourcesContent":["import { RenderPass, Sampler, Texture, RenderObject } from \"@feng3d/render-api\";\nimport { WebGL } from \"@feng3d/webgl\";\nimport { mat4 } from \"gl-matrix\";\n\nlet cubeRotation = 0.0;\n\nmain();\n\n//\n// Start here\n//\nasync function main()\n{\n  const canvas = document.querySelector(\"#glcanvas\") as HTMLCanvasElement;\n\n  const webgl = new WebGL({ canvasId: \"glcanvas\", webGLcontextId: \"webgl\" });\n\n  // Here's where we call the routine that builds all the\n  // objects we'll be drawing.\n  const buffers = initBuffers();\n\n  const texture = await loadTexture(\"../../cubetexture.png\");\n\n  const renderObject: RenderObject = {\n    pipeline: {\n      vertex: {\n        code: `\n        attribute vec4 aVertexPosition;\n        attribute vec2 aTextureCoord;\n    \n        uniform mat4 uModelViewMatrix;\n        uniform mat4 uProjectionMatrix;\n    \n        varying highp vec2 vTextureCoord;\n    \n        void main(void) {\n          gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n          vTextureCoord = aTextureCoord;\n        }\n      ` }, fragment: {\n        code: `\n        varying highp vec2 vTextureCoord;\n    \n        uniform sampler2D uSampler;\n    \n        void main(void) {\n          gl_FragColor = texture2D(uSampler, vTextureCoord);\n        }\n      ` },\n      depthStencil: { depthCompare: \"less-equal\" }\n    },\n    geometry: {\n      primitive: { topology: \"triangle-list\" },\n      vertices: {\n        aVertexPosition: {\n          format: \"float32x3\",\n          data: buffers.position,\n        },\n        aTextureCoord: {\n          format: \"float32x2\",\n          data: buffers.textureCoord,\n        },\n      },\n      indices: buffers.indices,\n      draw: { __type__: \"DrawIndexed\", firstIndex: 0, indexCount: 36 },\n    },\n    bindingResources: { uSampler: texture },\n  };\n\n  const renderPass: RenderPass = {\n    descriptor: {\n      colorAttachments: [{\n        clearValue: [0.0, 0.0, 0.0, 1.0],\n        loadOp: \"clear\",\n      }],\n      depthStencilAttachment: {\n        depthClearValue: 1.0,\n        depthLoadOp: \"clear\",\n      },\n    },\n    renderObjects: [renderObject],\n  };\n\n  let then = 0;\n\n  // Draw the scene repeatedly\n  function render(now: number)\n  {\n    now *= 0.001; // convert to seconds\n    const deltaTime = now - then;\n    then = now;\n\n    const { projectionMatrix, modelViewMatrix } = drawScene(canvas, deltaTime);\n\n    renderObject.bindingResources.uProjectionMatrix = projectionMatrix;\n    renderObject.bindingResources.uModelViewMatrix = modelViewMatrix;\n\n    webgl.submit({ commandEncoders: [{ passEncoders: [renderPass] }] });\n\n    requestAnimationFrame(render);\n  }\n  requestAnimationFrame(render);\n}\n\n//\n// initBuffers\n//\n// Initialize the buffers we'll need. For this demo, we just\n// have one object -- a simple three-dimensional cube.\n//\nfunction initBuffers()\n{\n  // Now create an array of positions for the cube.\n\n  const positions = [\n    // Front face\n    -1.0, -1.0, 1.0,\n    1.0, -1.0, 1.0,\n    1.0, 1.0, 1.0,\n    -1.0, 1.0, 1.0,\n\n    // Back face\n    -1.0, -1.0, -1.0,\n    -1.0, 1.0, -1.0,\n    1.0, 1.0, -1.0,\n    1.0, -1.0, -1.0,\n\n    // Top face\n    -1.0, 1.0, -1.0,\n    -1.0, 1.0, 1.0,\n    1.0, 1.0, 1.0,\n    1.0, 1.0, -1.0,\n\n    // Bottom face\n    -1.0, -1.0, -1.0,\n    1.0, -1.0, -1.0,\n    1.0, -1.0, 1.0,\n    -1.0, -1.0, 1.0,\n\n    // Right face\n    1.0, -1.0, -1.0,\n    1.0, 1.0, -1.0,\n    1.0, 1.0, 1.0,\n    1.0, -1.0, 1.0,\n\n    // Left face\n    -1.0, -1.0, -1.0,\n    -1.0, -1.0, 1.0,\n    -1.0, 1.0, 1.0,\n    -1.0, 1.0, -1.0,\n  ];\n\n  // Now set up the texture coordinates for the faces.\n\n  const textureCoordinates = [\n    // Front\n    0.0, 0.0,\n    1.0, 0.0,\n    1.0, 1.0,\n    0.0, 1.0,\n    // Back\n    0.0, 0.0,\n    1.0, 0.0,\n    1.0, 1.0,\n    0.0, 1.0,\n    // Top\n    0.0, 0.0,\n    1.0, 0.0,\n    1.0, 1.0,\n    0.0, 1.0,\n    // Bottom\n    0.0, 0.0,\n    1.0, 0.0,\n    1.0, 1.0,\n    0.0, 1.0,\n    // Right\n    0.0, 0.0,\n    1.0, 0.0,\n    1.0, 1.0,\n    0.0, 1.0,\n    // Left\n    0.0, 0.0,\n    1.0, 0.0,\n    1.0, 1.0,\n    0.0, 1.0,\n  ];\n\n  // This array defines each face as two triangles, using the\n  // indices into the vertex array to specify each triangle's\n  // position.\n\n  const indices = [\n    0, 1, 2, 0, 2, 3, // front\n    4, 5, 6, 4, 6, 7, // back\n    8, 9, 10, 8, 10, 11, // top\n    12, 13, 14, 12, 14, 15, // bottom\n    16, 17, 18, 16, 18, 19, // right\n    20, 21, 22, 20, 22, 23, // left\n  ];\n\n  return {\n    position: new Float32Array(positions),\n    textureCoord: new Float32Array(textureCoordinates),\n    indices: new Uint16Array(indices),\n  };\n}\n\n//\n// Initialize a texture and load an image.\n// When the image finished loading copy it into the texture.\n//\nasync function loadTexture(url: string)\n{\n  // Because images have to be download over the internet\n  // they might take a moment until they are ready.\n  // Until then put a single pixel in the texture so we can\n  // use it immediately. When the image has finished downloading\n  // we'll update the texture with the contents of the image.\n  const img = new Image();\n  img.src = url;\n  await img.decode();\n\n  const generateMipmap = isPowerOf2(img.width) && isPowerOf2(img.height);\n\n  const texture: Texture = {\n    size: [img.width, img.height],\n    format: \"rgba8unorm\",\n    sources: [{ image: img }],\n    generateMipmap,\n  };\n\n  let sampler: Sampler = {};\n  if (generateMipmap)\n  {\n    sampler = { addressModeU: \"clamp-to-edge\", addressModeV: \"clamp-to-edge\", minFilter: \"linear\" };\n  }\n\n  return { texture, sampler };\n}\n\nfunction isPowerOf2(value: number)\n{\n  return (value & (value - 1)) === 0;\n}\n\n//\n// Draw the scene.\n//\nfunction drawScene(canvas: HTMLCanvasElement, deltaTime: number)\n{\n  // Create a perspective matrix, a special matrix that is\n  // used to simulate the distortion of perspective in a camera.\n  // Our field of view is 45 degrees, with a width/height\n  // ratio that matches the display size of the canvas\n  // and we only want to see objects between 0.1 units\n  // and 100 units away from the camera.\n\n  const fieldOfView = 45 * Math.PI / 180; // in radians\n  const aspect = canvas.clientWidth / canvas.clientHeight;\n  const zNear = 0.1;\n  const zFar = 100.0;\n  const projectionMatrix = mat4.create();\n\n  // note: glmatrix.js always has the first argument\n  // as the destination to receive the result.\n  mat4.perspective(projectionMatrix,\n    fieldOfView,\n    aspect,\n    zNear,\n    zFar);\n\n  // Set the drawing position to the \"identity\" point, which is\n  // the center of the scene.\n  const modelViewMatrix = mat4.create();\n\n  // Now move the drawing position a bit to where we want to\n  // start drawing the square.\n\n  mat4.translate(modelViewMatrix, // destination matrix\n    modelViewMatrix, // matrix to translate\n    [-0.0, 0.0, -6.0]); // amount to translate\n  mat4.rotate(modelViewMatrix, // destination matrix\n    modelViewMatrix, // matrix to rotate\n    cubeRotation, // amount to rotate in radians\n    [0, 0, 1]); // axis to rotate around (Z)\n  mat4.rotate(modelViewMatrix, // destination matrix\n    modelViewMatrix, // matrix to rotate\n    cubeRotation * 0.7, // amount to rotate in radians\n    [0, 1, 0]); // axis to rotate around (X)\n\n  // Update the rotation for the next draw\n\n  cubeRotation += deltaTime;\n\n  return { projectionMatrix, modelViewMatrix };\n}\n"],"names":["cubeRotation","main","canvas","webgl","WebGL","buffers","initBuffers","texture","loadTexture","renderObject","renderPass","then","render","now","deltaTime","projectionMatrix","modelViewMatrix","drawScene","positions","textureCoordinates","indices","url","img","generateMipmap","isPowerOf2","sampler","value","fieldOfView","aspect","zNear","zFar","mat4.create","mat4.perspective","mat4.translate","mat4.rotate"],"mappings":"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"}