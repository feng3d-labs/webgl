{"version":3,"file":"WebGL-b4686ab5.js","sources":["../../src/data/polyfills/CanvasContext.ts","../../src/runs/getIGLBuffer.ts","../../src/runs/runColorTargetStates.ts","../../node_modules/@feng3d/render-api/dist/index.js","../../src/caches/getGLBlitFramebuffer.ts","../../node_modules/@feng3d/watcher/dist/index.js","../../src/caches/getGLBuffer.ts","../../src/caches/getGLDrawMode.ts","../../src/caches/getGLRenderbuffer.ts","../../src/caches/getGLTextureFormats.ts","../../src/caches/getGLRenderPassDescriptorWithMultisample.ts","../../src/caches/getGLTextureTarget.ts","../../src/caches/getGLTexture.ts","../../src/caches/getGLFramebuffer.ts","../../src/const/GLUniformType.ts","../../src/caches/getGLProgram.ts","../../src/caches/getGLRenderOcclusionQuery.ts","../../src/runs/runDepthState.ts","../../src/caches/getGLSampler.ts","../../src/caches/getGLTransformFeedback.ts","../../src/const/const.ts","../../src/runs/runStencilState.ts","../../src/utils/updateBufferBinding.ts","../../src/RunWebGL.ts","../../src/caches/Capabilities.ts","../../src/caches/getGLCanvasContext.ts","../../src/utils/readPixels.ts","../../src/WebGL.ts"],"sourcesContent":["import { CanvasContext } from \"@feng3d/render-api\";\n\ndeclare module \"@feng3d/render-api\"\n{\n    /**\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n     */\n    export interface CanvasContext\n    {\n        /**\n         * WebGL上下文类型\n         */\n        webGLcontextId?: \"webgl\" | \"webgl2\";\n\n        /**\n         * WebGL上下文属性。\n         */\n        webGLContextAttributes?: WebGLContextAttributes;\n    }\n}\n\n/**\n * 默认画布(WebGL)上下文信息。\n */\nexport const defaultWebGLContextAttributes: WebGLContextAttributes = {\n    depth: true,\n    stencil: true,\n    antialias: false,\n    premultipliedAlpha: true,\n    preserveDrawingBuffer: false,\n    powerPreference: \"default\",\n    failIfMajorPerformanceCaveat: false,\n};\n","import { Buffer, TypedArray } from \"@feng3d/render-api\";\nimport { BufferTarget, BufferUsage } from \"../data/polyfills/Buffer\";\n\nexport function getIGLBuffer(data: TypedArray, target?: BufferTarget, usage: BufferUsage = \"STATIC_DRAW\"): Buffer\n{\n    if (data[_IGLBuffer]) return data[_IGLBuffer];\n\n    const buffer: Buffer = {\n        size: Math.ceil(data.byteLength / 4) * 4,\n        target,\n        usage,\n        data,\n    };\n    data[_IGLBuffer] = buffer;\n\n    return buffer;\n}\n\nconst _IGLBuffer = \"_IGLBuffer\";","import { IBlendFactor, IBlendOperation } from \"@feng3d/render-api\";\n\nexport function getIGLBlendEquation(operation?: IBlendOperation)\n{\n    if (!operation) return undefined;\n\n    const glBlendEquation: IGLBlendEquation = operationMap[operation];\n\n    console.assert(!!glBlendEquation, `接收到错误值，请从 ${Object.keys(operationMap).toString()} 中取值！`);\n\n    return glBlendEquation;\n}\n\nconst operationMap: { [key: string]: IGLBlendEquation } = {\n    add: \"FUNC_ADD\",\n    subtract: \"FUNC_SUBTRACT\",\n    \"reverse-subtract\": \"FUNC_REVERSE_SUBTRACT\",\n    min: \"MIN\",\n    max: \"MAX\",\n};\n\nexport function getIGLBlendFactor(blendFactor: IBlendFactor, operation: IBlendOperation)\n{\n    if (!blendFactor) return undefined;\n\n    if (operation === \"max\" || operation === \"min\") blendFactor = \"one\";\n\n    const glBlendFactor: IGLBlendFactor = blendFactorMap[blendFactor];\n\n    console.assert(!!glBlendFactor, `接收到错误值，请从 ${Object.keys(blendFactorMap).toString()} 中取值！`);\n\n    return glBlendFactor;\n}\n\nconst blendFactorMap: { [key: string]: IGLBlendFactor } = {\n    zero: \"ZERO\",\n    one: \"ONE\",\n    src: \"SRC_COLOR\",\n    \"one-minus-src\": \"ONE_MINUS_SRC_COLOR\",\n    \"src-alpha\": \"SRC_ALPHA\",\n    \"one-minus-src-alpha\": \"ONE_MINUS_SRC_ALPHA\",\n    dst: \"DST_COLOR\",\n    \"one-minus-dst\": \"ONE_MINUS_DST_COLOR\",\n    \"dst-alpha\": \"DST_ALPHA\",\n    \"one-minus-dst-alpha\": \"ONE_MINUS_DST_ALPHA\",\n    \"src-alpha-saturated\": \"SRC_ALPHA_SATURATE\",\n    constant: \"CONSTANT_COLOR\",\n    \"one-minus-constant\": \"ONE_MINUS_CONSTANT_COLOR\",\n};\n\n/**\n * 混合因子（R分量系数，G分量系数，B分量系数）\n *\n * 混合颜色的公式可以这样描述：color(RGBA) = (sourceColor * sfactor) + (destinationColor * dfactor)。这里的 RGBA 值均在0与1之间。\n *\n * The formula for the blending color can be described like this: color(RGBA) = (sourceColor * sfactor) + (destinationColor * dfactor). The RBGA values are between 0 and 1.\n *\n * * `ZERO` Factor: (0,0,0,0); 把所有颜色都乘以0。\n * * `ONE` Factor: (1,1,1,1); 把所有颜色都乘以1。\n * * `SRC_COLOR` Factor: (Rs, Gs, Bs, As); 将所有颜色乘以源颜色。\n * * `ONE_MINUS_SRC_COLOR` Factor: (1-Rs, 1-Gs, 1-Bs, 1-As); 将所有颜色乘以1减去每个源颜色。\n * * `DST_COLOR` Factor: (Rd, Gd, Bd, Ad); 将所有颜色乘以目标颜色。\n * * `ONE_MINUS_DST_COLOR` Factor: (1-Rd, 1-Gd, 1-Bd, 1-Ad); 将所有颜色乘以1减去每个目标颜色。\n * * `SRC_ALPHA` Factor: (As, As, As, As); 将所有颜色乘以源alpha值。\n * * `ONE_MINUS_SRC_ALPHA` Factor: (1-As, 1-As, 1-As, 1-As); 将所有颜色乘以1减去源alpha值。\n * * `DST_ALPHA` Factor: (Ad, Ad, Ad, Ad); 将所有颜色乘以目标alpha值。\n * * `ONE_MINUS_DST_ALPHA` Factor: (1-Ad, 1-Ad, 1-Ad, 1-Ad); 将所有颜色乘以1减去目标alpha值。\n * * `CONSTANT_COLOR` Factor: (Rc, Gc, Bc, Ac); 将所有颜色乘以一个常数颜色。\n * * `ONE_MINUS_CONSTANT_COLOR` Factor: (1-Rc, 1-Gc, 1-Bc, 1-Ac); 所有颜色乘以1减去一个常数颜色。\n * * `CONSTANT_ALPHA` Factor: (Ac, Ac, Ac, Ac); 将所有颜色乘以一个常量alpha值。\n * * `ONE_MINUS_CONSTANT_ALPHA` Factor: (1-Ac, 1-Ac, 1-Ac, 1-Ac); 将所有颜色乘以1减去一个常数alpha值。\n * * `SRC_ALPHA_SATURATE` Factor: (min(As, 1 - Ad), min(As, 1 - Ad), min(As, 1 - Ad), 1); 将RGB颜色乘以源alpha值与1减去目标alpha值的较小值。alpha值乘以1。\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFunc\n */\nexport type IGLBlendFactor = \"ZERO\" | \"ONE\" | \"SRC_COLOR\" | \"ONE_MINUS_SRC_COLOR\" | \"DST_COLOR\" | \"ONE_MINUS_DST_COLOR\" | \"SRC_ALPHA\" | \"ONE_MINUS_SRC_ALPHA\" | \"DST_ALPHA\" | \"ONE_MINUS_DST_ALPHA\" | \"SRC_ALPHA_SATURATE\" | \"CONSTANT_COLOR\" | \"ONE_MINUS_CONSTANT_COLOR\" | \"CONSTANT_ALPHA\" | \"ONE_MINUS_CONSTANT_ALPHA\";\n\n/**\n * 混合方法\n *\n * * FUNC_ADD 源 + 目标\n * * FUNC_SUBTRACT 源 - 目标\n * * FUNC_REVERSE_SUBTRACT 目标 - 源\n * * MIN 源与目标的最小值，在 WebGL 2 中可使用。在 WebGL 1 时，自动使用 EXT_blend_minmax 扩展中 MIN_EXT 值。\n * * MAX 源与目标的最大值，在 WebGL 2 中可使用。在 WebGL 1 时，自动使用 EXT_blend_minmax 扩展中 MAX_EXT 值。\n *\n * A GLenum specifying how source and destination colors are combined. Must be either:\n *\n * * gl.FUNC_ADD: source + destination (default value)\n * * gl.FUNC_SUBTRACT: source - destination\n * * gl.FUNC_REVERSE_SUBTRACT: destination - source\n *\n * When using the EXT_blend_minmax extension:\n *\n * * ext.MIN_EXT: Minimum of source and destination\n * * ext.MAX_EXT: Maximum of source and destination\n *\n * When using a WebGL 2 context, the following values are available additionally:\n *\n * * gl.MIN: Minimum of source and destination\n * * gl.MAX: Maximum of source and destination\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendEquation\n */\nexport type IGLBlendEquation = \"FUNC_ADD\" | \"FUNC_SUBTRACT\" | \"FUNC_REVERSE_SUBTRACT\" | \"MIN\" | \"MAX\";\n","const vertexFormatMap = {\n  uint8x2: { numComponents: 2, type: \"UNSIGNED_BYTE\", normalized: false, dataType: \"unsigned int\", byteSize: 2, wgslType: \"vec2<u32>\", typedArrayConstructor: Uint8Array },\n  uint8x4: { numComponents: 4, type: \"UNSIGNED_BYTE\", normalized: false, dataType: \"unsigned int\", byteSize: 4, wgslType: \"vec4<u32>\", typedArrayConstructor: Uint8Array },\n  sint8x2: { numComponents: 2, type: \"BYTE\", normalized: false, dataType: \"signed int\", byteSize: 2, wgslType: \"vec2<i32>\", typedArrayConstructor: Int8Array },\n  sint8x4: { numComponents: 4, type: \"BYTE\", normalized: false, dataType: \"signed int\", byteSize: 4, wgslType: \"vec4<i32>\", typedArrayConstructor: Int8Array },\n  unorm8x2: { numComponents: 2, type: \"UNSIGNED_BYTE\", normalized: true, dataType: \"unsigned normalized\", byteSize: 2, wgslType: \"vec2<f32>\", typedArrayConstructor: Uint8Array },\n  unorm8x4: { numComponents: 4, type: \"UNSIGNED_BYTE\", normalized: true, dataType: \"unsigned normalized\", byteSize: 4, wgslType: \"vec4<f32>\", typedArrayConstructor: Uint8Array },\n  snorm8x2: { numComponents: 2, type: \"BYTE\", normalized: true, dataType: \"signed normalized\", byteSize: 2, wgslType: \"vec2<f32>\", typedArrayConstructor: Int8Array },\n  snorm8x4: { numComponents: 4, type: \"BYTE\", normalized: true, dataType: \"signed normalized\", byteSize: 4, wgslType: \"vec4<f32>\", typedArrayConstructor: Int8Array },\n  uint16x2: { numComponents: 2, type: \"UNSIGNED_SHORT\", normalized: false, dataType: \"unsigned int\", byteSize: 4, wgslType: \"vec2<u32>\", typedArrayConstructor: Uint16Array },\n  uint16x4: { numComponents: 4, type: \"UNSIGNED_SHORT\", normalized: false, dataType: \"unsigned int\", byteSize: 8, wgslType: \"vec4<u32>\", typedArrayConstructor: Uint16Array },\n  sint16x2: { numComponents: 2, type: \"SHORT\", normalized: false, dataType: \"signed int\", byteSize: 4, wgslType: \"vec2<i32>\", typedArrayConstructor: Int16Array },\n  sint16x4: { numComponents: 4, type: \"SHORT\", normalized: false, dataType: \"signed int\", byteSize: 8, wgslType: \"vec4<i32>\", typedArrayConstructor: Int16Array },\n  unorm16x2: { numComponents: 2, type: \"UNSIGNED_SHORT\", normalized: true, dataType: \"unsigned normalized\", byteSize: 4, wgslType: \"vec2<f32>\", typedArrayConstructor: Uint16Array },\n  unorm16x4: { numComponents: 4, type: \"UNSIGNED_SHORT\", normalized: true, dataType: \"unsigned normalized\", byteSize: 8, wgslType: \"vec4<f32>\", typedArrayConstructor: Uint16Array },\n  snorm16x2: { numComponents: 2, type: \"SHORT\", normalized: true, dataType: \"signed normalized\", byteSize: 4, wgslType: \"vec2<f32>\", typedArrayConstructor: Int16Array },\n  snorm16x4: { numComponents: 4, type: \"SHORT\", normalized: true, dataType: \"signed normalized\", byteSize: 8, wgslType: \"vec4<f32>\", typedArrayConstructor: Int16Array },\n  float16x2: { numComponents: 2, type: \"HALF_FLOAT\", normalized: false, dataType: \"float\", byteSize: 4, wgslType: \"vec2<f16>\", typedArrayConstructor: void 0 },\n  float16x4: { numComponents: 4, type: \"HALF_FLOAT\", normalized: false, dataType: \"float\", byteSize: 8, wgslType: \"vec4<f16>\", typedArrayConstructor: void 0 },\n  float32: { numComponents: 1, type: \"FLOAT\", normalized: false, dataType: \"float\", byteSize: 4, wgslType: \"f32\", typedArrayConstructor: Float32Array },\n  float32x2: { numComponents: 2, type: \"FLOAT\", normalized: false, dataType: \"float\", byteSize: 8, wgslType: \"vec2<f32>\", typedArrayConstructor: Float32Array },\n  float32x3: { numComponents: 3, type: \"FLOAT\", normalized: false, dataType: \"float\", byteSize: 12, wgslType: \"vec3<f32>\", typedArrayConstructor: Float32Array },\n  float32x4: { numComponents: 4, type: \"FLOAT\", normalized: false, dataType: \"float\", byteSize: 16, wgslType: \"vec4<f32>\", typedArrayConstructor: Float32Array },\n  uint32: { numComponents: 1, type: \"UNSIGNED_INT\", normalized: false, dataType: \"unsigned int\", byteSize: 4, wgslType: \"u32\", typedArrayConstructor: Uint32Array },\n  uint32x2: { numComponents: 2, type: \"UNSIGNED_INT\", normalized: false, dataType: \"unsigned int\", byteSize: 8, wgslType: \"vec2<u32>\", typedArrayConstructor: Uint32Array },\n  uint32x3: { numComponents: 3, type: \"UNSIGNED_INT\", normalized: false, dataType: \"unsigned int\", byteSize: 12, wgslType: \"vec3<u32>\", typedArrayConstructor: Uint32Array },\n  uint32x4: { numComponents: 4, type: \"UNSIGNED_INT\", normalized: false, dataType: \"unsigned int\", byteSize: 16, wgslType: \"vec4<u32>\", typedArrayConstructor: Uint32Array },\n  sint32: { numComponents: 1, type: \"INT\", normalized: false, dataType: \"signed int\", byteSize: 4, wgslType: \"i32\", typedArrayConstructor: Int32Array },\n  sint32x2: { numComponents: 2, type: \"INT\", normalized: false, dataType: \"signed int\", byteSize: 8, wgslType: \"vec2<i32>\", typedArrayConstructor: Int32Array },\n  sint32x3: { numComponents: 3, type: \"INT\", normalized: false, dataType: \"signed int\", byteSize: 12, wgslType: \"vec3<i32>\", typedArrayConstructor: Int32Array },\n  sint32x4: { numComponents: 4, type: \"INT\", normalized: false, dataType: \"signed int\", byteSize: 16, wgslType: \"vec4<i32>\", typedArrayConstructor: Int32Array },\n  \"unorm10-10-10-2\": { numComponents: 4, type: \"UNSIGNED_INT_2_10_10_10_REV\", normalized: true, dataType: \"unsigned normalized\", byteSize: 4, wgslType: \"vec4<f32>\", typedArrayConstructor: Int32Array }\n};\nclass BlendState {\n  /**\n   * 当混合系数用到了混合常量值时设置混合常量值。\n   *\n   * @param blend\n   * @returns\n   */\n  static getBlendConstantColor(blendState) {\n    if (!blendState)\n      return void 0;\n    const { color, alpha, constantColor } = blendState;\n    if ((color == null ? void 0 : color.srcFactor) === \"constant\" || (color == null ? void 0 : color.srcFactor) === \"one-minus-constant\" || (color == null ? void 0 : color.dstFactor) === \"constant\" || (color == null ? void 0 : color.dstFactor) === \"one-minus-constant\" || (alpha == null ? void 0 : alpha.srcFactor) === \"constant\" || (alpha == null ? void 0 : alpha.srcFactor) === \"one-minus-constant\" || (alpha == null ? void 0 : alpha.dstFactor) === \"constant\" || (alpha == null ? void 0 : alpha.dstFactor) === \"one-minus-constant\") {\n      return constantColor ?? [0, 0, 0, 0];\n    }\n    return void 0;\n  }\n}\nclass VertexAttribute {\n  /**\n   * 获取顶点属性数据的顶点数量。\n   *\n   * @param attribute 顶点属性数据。\n   * @returns\n   */\n  static getVertexCount(attribute) {\n    const attributeSize = VertexAttribute.getVertexByteSize(attribute);\n    const offset = attribute.offset || 0;\n    const arrayStride = attribute.arrayStride || attributeSize;\n    const attributeCount = (attribute.data.byteLength - offset) / arrayStride;\n    return attributeCount;\n  }\n  /**\n   * 获取顶点属性数据的字节尺寸。\n   *\n   * @param attribute 顶点属性数据。\n   */\n  static getVertexByteSize(attribute) {\n    const attributeSize = vertexFormatMap[attribute.format].byteSize;\n    return attributeSize;\n  }\n}\nclass RenderObject {\n  /**\n   * 获取顶点数量。\n   *\n   * @returns 顶点数量。\n   */\n  static getNumVertex(geometry) {\n    const attributes = geometry.vertices;\n    const vertexList = Object.keys(attributes).map((v) => attributes[v]).filter((v) => v.data && v.stepMode !== \"instance\");\n    const count = vertexList.length > 0 ? VertexAttribute.getVertexCount(vertexList[0]) : 0;\n    if (vertexList.length > 0) {\n      console.assert(vertexList.every((v) => count === VertexAttribute.getVertexCount(v)));\n    }\n    return count;\n  }\n  /**\n   * 获取实例数量。\n   *\n   * @returns 实例数量。\n   */\n  static getInstanceCount(geometry) {\n    const attributes = geometry.vertices;\n    const vertexList = Object.keys(attributes).map((v) => attributes[v]).filter((v) => v.data && v.stepMode === \"instance\");\n    const count = vertexList.length > 0 ? VertexAttribute.getVertexCount(vertexList[0]) : 1;\n    if (vertexList.length > 0) {\n      console.assert(vertexList.every((v) => count === VertexAttribute.getVertexCount(v)));\n    }\n    return count;\n  }\n  static getDraw(geometry) {\n    if (geometry[\"_draw\"])\n      return geometry[\"_draw\"];\n    const instanceCount = RenderObject.getInstanceCount(geometry);\n    if (geometry.indices) {\n      return {\n        __type__: \"DrawIndexed\",\n        indexCount: geometry.indices.length,\n        firstIndex: 0,\n        instanceCount\n      };\n    }\n    return {\n      __type__: \"DrawVertex\",\n      vertexCount: RenderObject.getNumVertex(geometry),\n      instanceCount\n    };\n  }\n}\nclass Texture {\n  /**\n   * 获取纹理每个像素占用的字节数量。\n   *\n   * @param format 纹理格式。\n   */\n  static getTextureBytesPerPixel(format = \"rgba8unorm\") {\n    var _a;\n    const bytesPerPixel = (_a = formatMap[format]) == null ? void 0 : _a.bytesPerPixel;\n    console.assert(!!bytesPerPixel, `未处理格式 ${format} ，无法查询到该格式中每个像素占用的字节数量！`);\n    return bytesPerPixel;\n  }\n  /**\n       * 获取纹理数据构造函数。\n  \n       * @param format 纹理格式。\n       * @returns\n       */\n  static getTextureDataConstructor(format = \"rgba8unorm\") {\n    var _a;\n    const bytesPerPixel = (_a = formatMap[format]) == null ? void 0 : _a.dataConstructor;\n    console.assert(!!bytesPerPixel, `未处理格式 ${format} ，无法查询到该格式的纹理数据构造函数！`);\n    return bytesPerPixel;\n  }\n}\nconst formatMap = {\n  r8unorm: { bytesPerPixel: 1, dataConstructor: Uint8Array },\n  r8snorm: { bytesPerPixel: 1, dataConstructor: Int8Array },\n  r8uint: { bytesPerPixel: 1, dataConstructor: Uint8Array },\n  r8sint: { bytesPerPixel: 1, dataConstructor: Int8Array },\n  r16uint: { bytesPerPixel: 2, dataConstructor: Uint16Array },\n  r16sint: { bytesPerPixel: 2, dataConstructor: Int16Array },\n  r16float: { bytesPerPixel: 2, dataConstructor: Uint16Array },\n  rg8unorm: { bytesPerPixel: 2, dataConstructor: Uint8Array },\n  rg8snorm: { bytesPerPixel: 2, dataConstructor: Int8Array },\n  rg8uint: { bytesPerPixel: 2, dataConstructor: Uint8Array },\n  rg8sint: { bytesPerPixel: 2, dataConstructor: Int8Array },\n  r32uint: { bytesPerPixel: 4, dataConstructor: Uint32Array },\n  r32sint: { bytesPerPixel: 4, dataConstructor: Int32Array },\n  r32float: { bytesPerPixel: 4, dataConstructor: Float32Array },\n  rg16uint: { bytesPerPixel: 4, dataConstructor: Uint16Array },\n  rg16sint: { bytesPerPixel: 4, dataConstructor: Int16Array },\n  rg16float: { bytesPerPixel: 4, dataConstructor: Uint16Array },\n  rgba8unorm: { bytesPerPixel: 4, dataConstructor: Uint8Array },\n  \"rgba8unorm-srgb\": { bytesPerPixel: 4, dataConstructor: Uint8Array },\n  rgba8snorm: { bytesPerPixel: 4, dataConstructor: Int8Array },\n  rgba8uint: { bytesPerPixel: 4, dataConstructor: Uint8Array },\n  rgba8sint: { bytesPerPixel: 4, dataConstructor: Int8Array },\n  bgra8unorm: { bytesPerPixel: 4, dataConstructor: Uint8Array },\n  \"bgra8unorm-srgb\": { bytesPerPixel: 4, dataConstructor: Uint8Array },\n  rgb9e5ufloat: { bytesPerPixel: 4, dataConstructor: Uint32Array },\n  rgb10a2uint: { bytesPerPixel: 4, dataConstructor: Uint32Array },\n  rgb10a2unorm: { bytesPerPixel: 4, dataConstructor: Uint32Array },\n  rg11b10ufloat: { bytesPerPixel: 4, dataConstructor: Uint32Array },\n  rg32uint: { bytesPerPixel: 8, dataConstructor: Uint32Array },\n  rg32sint: { bytesPerPixel: 8, dataConstructor: Int32Array },\n  rg32float: { bytesPerPixel: 8, dataConstructor: Float32Array },\n  rgba16uint: { bytesPerPixel: 8, dataConstructor: Uint16Array },\n  rgba16sint: { bytesPerPixel: 8, dataConstructor: Int16Array },\n  rgba16float: { bytesPerPixel: 8, dataConstructor: Uint16Array },\n  rgba32uint: { bytesPerPixel: 16, dataConstructor: Uint32Array },\n  rgba32sint: { bytesPerPixel: 16, dataConstructor: Int32Array },\n  rgba32float: { bytesPerPixel: 16, dataConstructor: Float32Array },\n  stencil8: { bytesPerPixel: 1, dataConstructor: Uint8Array },\n  depth16unorm: { bytesPerPixel: 2, dataConstructor: Uint16Array },\n  depth24plus: { bytesPerPixel: 3, dataConstructor: Uint8Array },\n  \"depth24plus-stencil8\": { bytesPerPixel: 4 },\n  depth32float: { bytesPerPixel: 4 },\n  \"depth32float-stencil8\": { bytesPerPixel: 5 },\n  \"bc1-rgba-unorm\": void 0,\n  \"bc1-rgba-unorm-srgb\": void 0,\n  \"bc2-rgba-unorm\": void 0,\n  \"bc2-rgba-unorm-srgb\": void 0,\n  \"bc3-rgba-unorm\": void 0,\n  \"bc3-rgba-unorm-srgb\": void 0,\n  \"bc4-r-unorm\": void 0,\n  \"bc4-r-snorm\": void 0,\n  \"bc5-rg-unorm\": void 0,\n  \"bc5-rg-snorm\": void 0,\n  \"bc6h-rgb-ufloat\": void 0,\n  \"bc6h-rgb-float\": void 0,\n  \"bc7-rgba-unorm\": void 0,\n  \"bc7-rgba-unorm-srgb\": void 0,\n  \"etc2-rgb8unorm\": void 0,\n  \"etc2-rgb8unorm-srgb\": void 0,\n  \"etc2-rgb8a1unorm\": void 0,\n  \"etc2-rgb8a1unorm-srgb\": void 0,\n  \"etc2-rgba8unorm\": void 0,\n  \"etc2-rgba8unorm-srgb\": void 0,\n  \"eac-r11unorm\": void 0,\n  \"eac-r11snorm\": void 0,\n  \"eac-rg11unorm\": void 0,\n  \"eac-rg11snorm\": void 0,\n  \"astc-4x4-unorm\": void 0,\n  \"astc-4x4-unorm-srgb\": void 0,\n  \"astc-5x4-unorm\": void 0,\n  \"astc-5x4-unorm-srgb\": void 0,\n  \"astc-5x5-unorm\": void 0,\n  \"astc-5x5-unorm-srgb\": void 0,\n  \"astc-6x5-unorm\": void 0,\n  \"astc-6x5-unorm-srgb\": void 0,\n  \"astc-6x6-unorm\": void 0,\n  \"astc-6x6-unorm-srgb\": void 0,\n  \"astc-8x5-unorm\": void 0,\n  \"astc-8x5-unorm-srgb\": void 0,\n  \"astc-8x6-unorm\": void 0,\n  \"astc-8x6-unorm-srgb\": void 0,\n  \"astc-8x8-unorm\": void 0,\n  \"astc-8x8-unorm-srgb\": void 0,\n  \"astc-10x5-unorm\": void 0,\n  \"astc-10x5-unorm-srgb\": void 0,\n  \"astc-10x6-unorm\": void 0,\n  \"astc-10x6-unorm-srgb\": void 0,\n  \"astc-10x8-unorm\": void 0,\n  \"astc-10x8-unorm-srgb\": void 0,\n  \"astc-10x10-unorm\": void 0,\n  \"astc-10x10-unorm-srgb\": void 0,\n  \"astc-12x10-unorm\": void 0,\n  \"astc-12x10-unorm-srgb\": void 0,\n  \"astc-12x12-unorm\": void 0,\n  \"astc-12x12-unorm-srgb\": void 0\n};\nclass TextureImageSource {\n  /**\n   * 获取纹理的图片资源尺寸。\n   *\n   * @param texImageSource 纹理的图片资源。\n   * @returns\n   */\n  static getTexImageSourceSize(image) {\n    let width;\n    let height;\n    if (image instanceof VideoFrame) {\n      width = image.codedWidth;\n      height = image.codedHeight;\n    } else if (image instanceof HTMLVideoElement) {\n      width = image.videoWidth;\n      height = image.videoHeight;\n    } else {\n      width = image.width;\n      height = image.height;\n    }\n    return [width, height];\n  }\n}\nclass ChainMap {\n  constructor() {\n    this._根字典 = /* @__PURE__ */ new WeakMap();\n    this._数量 = 0;\n  }\n  /**\n   * 获取键对应的值。\n   *\n   * @param keys 键。\n   * @returns 值。\n   */\n  get(keys) {\n    const keysLength = keys.length;\n    let map = this._根字典;\n    let key;\n    for (let i = 0, n = keysLength - 1; i < n; i++) {\n      key = wrapKey(keys[i]);\n      map = map.get(key);\n      if (map === void 0)\n        return void 0;\n    }\n    key = wrapKey(keys[keysLength - 1]);\n    return map.get(key);\n  }\n  /**\n   * 设置映射。\n   *\n   * @param keys 键。\n   * @param value 值。\n   *\n   * @returns 返回设置的值。\n   */\n  set(keys, value) {\n    const keysLength = keys.length;\n    let map = this._根字典;\n    let key;\n    for (let i = 0; i < keysLength - 1; i++) {\n      key = wrapKey(keys[i]);\n      if (!map.has(key)) {\n        map.set(key, /* @__PURE__ */ new WeakMap());\n      }\n      map = map.get(key);\n    }\n    key = wrapKey(keys[keysLength - 1]);\n    if (!map.has(key)) {\n      map.set(key, value);\n      this._数量++;\n    }\n    return value;\n  }\n  /**\n   * 删除映射。\n   *\n   * @param keys 键。\n   * @returns 如果找到目标值且被删除返回 `true` ，否则返回 `false` 。\n   */\n  delete(keys) {\n    const keysLength = keys.length;\n    let map = this._根字典;\n    let key;\n    for (let i = 0; i < keysLength - 1; i++) {\n      key = wrapKey(keys[i]);\n      map = map.get(key);\n      if (map === void 0)\n        return false;\n    }\n    key = wrapKey(keys[keysLength - 1]);\n    const result = map.delete(key);\n    if (result)\n      this._数量--;\n    return result;\n  }\n}\nconst keyMap = /* @__PURE__ */ new Map();\nlet idCounter = 0;\nfunction wrapKey(key) {\n  if (typeof key === \"object\" && key !== null) {\n    return key;\n  }\n  if (keyMap.has(key)) {\n    return keyMap.get(key);\n  }\n  const id = idCounter++;\n  const wrapper = {\n    __id: id,\n    __value: key\n  };\n  keyMap.set(key, wrapper);\n  return wrapper;\n}\nexport {\n  BlendState,\n  ChainMap,\n  RenderObject,\n  Texture,\n  TextureImageSource,\n  VertexAttribute,\n  vertexFormatMap\n};\n//# sourceMappingURL=index.js.map\n","import { CopyTextureToTexture, ImageCopyTexture, RenderPassColorAttachment, RenderPassDepthStencilAttachment, TextureView } from \"@feng3d/render-api\";\nimport { BlitFramebuffer, BlitFramebufferItem } from \"../data/BlitFramebuffer\";\n\n/**\n * 通过 IGLBlitFramebuffer 实现纹理之间拷贝并不靠谱。\n *\n * @param copyTextureToTexture GL纹理之间拷贝。\n * @returns\n */\nexport function getGLBlitFramebuffer(copyTextureToTexture: CopyTextureToTexture)\n{\n    const { source, destination, copySize } = copyTextureToTexture;\n\n    const sourceAspect = source.aspect || \"all\";\n    const destinationAspect = destination.aspect || \"all\";\n\n    console.assert(sourceAspect === destinationAspect, `拷贝纹理时两个纹理的 aspect 必须相同！`);\n\n    const sourceColorAttachments: RenderPassColorAttachment[] = [];\n    let sourceDepthStencilAttachment: RenderPassDepthStencilAttachment;\n    const destinationColorAttachments: RenderPassColorAttachment[] = [];\n    let destinationDepthStencilAttachment: RenderPassDepthStencilAttachment;\n\n    //\n    let mask: \"COLOR_BUFFER_BIT\" | \"DEPTH_BUFFER_BIT\" | \"STENCIL_BUFFER_BIT\";\n    if (sourceAspect === \"all\")\n    {\n        mask = \"COLOR_BUFFER_BIT\";\n        sourceColorAttachments.push({ view: getGLTextureView(source) });\n        destinationColorAttachments.push({ view: getGLTextureView(destination) });\n    }\n    else if (sourceAspect === \"depth-only\")\n    {\n        mask = \"DEPTH_BUFFER_BIT\";\n        sourceDepthStencilAttachment = { view: getGLTextureView(source) };\n        destinationDepthStencilAttachment = { view: getGLTextureView(destination) };\n    }\n    else if (sourceAspect === \"stencil-only\")\n    {\n        mask = \"STENCIL_BUFFER_BIT\";\n        sourceDepthStencilAttachment = { view: getGLTextureView(source) };\n        destinationDepthStencilAttachment = { view: getGLTextureView(destination) };\n    }\n\n    const sourceOrigin = source.origin || [0, 0];\n    const destinationOrigin = destination.origin || [0, 0];\n    //\n    const blitFramebufferItem: BlitFramebufferItem = [\n        sourceOrigin[0], sourceOrigin[1], sourceOrigin[0] + copySize[0], sourceOrigin[1] + copySize[1],\n        destinationOrigin[0], destinationOrigin[1], destinationOrigin[0] + copySize[0], destinationOrigin[1] + copySize[1],\n        mask, \"NEAREST\",\n    ];\n\n    const blitFramebuffer: BlitFramebuffer = {\n        __type__: \"BlitFramebuffer\",\n        read: {\n            colorAttachments: sourceColorAttachments,\n            depthStencilAttachment: sourceDepthStencilAttachment,\n        },\n        draw: {\n            colorAttachments: destinationColorAttachments,\n            depthStencilAttachment: destinationDepthStencilAttachment,\n        },\n        blitFramebuffers: [blitFramebufferItem]\n    };\n\n    return blitFramebuffer;\n}\n\nfunction getGLTextureView(source: ImageCopyTexture)\n{\n    if (!source.texture) return undefined;\n\n    const textureView: TextureView = {\n        texture: source.texture,\n        baseMipLevel: source.mipLevel,\n        baseArrayLayer: source.origin?.[2],\n    };\n\n    return textureView;\n}","class Watcher {\n  constructor() {\n    this._binds = [];\n  }\n  /**\n   * 创建一个 WatchSession 对象，用于监听对象属性的变化。\n   * WatchSession 提供了多种监听方法，并且可以通过 `off` 方法一次性取消所有监听。\n   *\n   * @returns {WatchSession} 返回一个包含监听方法和取消监听方法的 WatchSession 对象。\n   */\n  on() {\n    const offFuncs = [];\n    const watchInfo = {\n      watch: (object, property, handler, thisObject, onlyChanged = true, topObject, fullProperty) => {\n        this.watch(object, property, handler, thisObject, onlyChanged, topObject, fullProperty);\n        offFuncs.push(() => this.unwatch(object, property, handler, thisObject));\n        return watchInfo;\n      },\n      watchs: (object, propertys, handler, thisObject, onlyChanged) => {\n        this.watchs(object, propertys, handler, thisObject, onlyChanged);\n        offFuncs.push(() => this.unwatchs(object, propertys, handler, thisObject));\n        return watchInfo;\n      },\n      bind: (object0, property0, object1, property1) => {\n        this.bind(object0, property0, object1, property1);\n        offFuncs.push(() => this.unbind(object0, property0, object1, property1));\n        return watchInfo;\n      },\n      watchchain: (object, property, handler, thisObject, onlyChanged = true, topObject, fullProperty) => {\n        this.watchchain(object, property, handler, thisObject, onlyChanged, topObject, fullProperty);\n        offFuncs.push(() => this.unwatchchain(object, property, handler, thisObject));\n        return watchInfo;\n      },\n      watchobject: (object, property, handler, thisObject, onlyChanged = true) => {\n        this.watchobject(object, property, handler, thisObject, onlyChanged);\n        offFuncs.push(() => this.unwatchobject(object, property, handler, thisObject));\n        return watchInfo;\n      },\n      off: () => {\n        offFuncs.forEach((func) => func());\n        offFuncs.length = 0;\n      }\n    };\n    return watchInfo;\n  }\n  /**\n   * 监听对象属性的变化\n   *\n   * 注意：使用watch后获取该属性值的性能将会是原来的1/60，避免在运算密集处使用该函数。\n   *\n   * @param object 被监听对象\n   * @param property 被监听属性\n   * @param handler 变化回调函数 (newValue: V, oldValue: V, object: T, property: string) => void\n   * @param thisObject 变化回调函数 this值\n   * @param onlyChanged 值为 true 时表示只在变化时才触发回调函数，否则只要被赋值就触发回调函数。默认为 true 。\n   */\n  watch(object, property, handler, thisObject, onlyChanged = true, topObject, fullProperty) {\n    topObject = topObject || object;\n    fullProperty = fullProperty || property;\n    if (!Object.getOwnPropertyDescriptor(object, __watchs__)) {\n      Object.defineProperty(object, __watchs__, {\n        value: {},\n        enumerable: false,\n        configurable: true,\n        writable: false\n      });\n    }\n    const _property = property;\n    const watchs = object[__watchs__];\n    if (!watchs[_property]) {\n      const oldPropertyDescriptor = Object.getOwnPropertyDescriptor(object, _property);\n      watchs[_property] = { value: object[_property], oldPropertyDescriptor, handlers: [] };\n      let data = getPropertyDescriptor(object, _property);\n      if (data && data.set && data.get) {\n        data = { enumerable: data.enumerable, configurable: true, get: data.get, set: data.set };\n        const orgSet = data.set;\n        data.set = function(value) {\n          const oldValue = this[_property];\n          orgSet && orgSet.call(this, value);\n          notifyListener(value, oldValue, this, _property, topObject, fullProperty);\n        };\n      } else if (!data || !data.get && !data.set) {\n        data = { enumerable: true, configurable: true };\n        data.get = function() {\n          return this[__watchs__][_property].value;\n        };\n        data.set = function(value) {\n          const oldValue = this[__watchs__][_property].value;\n          this[__watchs__][_property].value = value;\n          notifyListener(value, oldValue, this, _property, topObject, fullProperty);\n        };\n      } else {\n        console.warn(`无法修改监听属性的描述，监听失败！`, object, _property, handler, thisObject);\n        return;\n      }\n      Object.defineProperty(object, _property, data);\n    }\n    const propertywatchs = watchs[_property];\n    const has = propertywatchs.handlers.reduce((v, item) => v || item.handler === handler && item.thisObject === thisObject, false);\n    if (!has) {\n      propertywatchs.handlers.push({ handler, thisObject, onlyChanged });\n    } else {\n      console.warn(`重复监听， 监听失败！`, object, _property, handler, thisObject);\n    }\n  }\n  /**\n   * 取消监听对象属性的变化\n   *\n   * @param object 被监听对象\n   * @param property 被监听属性\n   * @param handler 变化回调函数 (newValue: V, oldValue: V, object: T, property: string) => void\n   * @param thisObject 变化回调函数 this值\n   */\n  unwatch(object, property, handler, thisObject) {\n    const watchs = object[__watchs__];\n    if (!watchs)\n      return;\n    const _property = property;\n    if (watchs[_property]) {\n      const handlers = watchs[_property].handlers;\n      if (handler === void 0) {\n        handlers.length = 0;\n      }\n      for (let i = handlers.length - 1; i >= 0; i--) {\n        if (handlers[i].handler === handler && (handlers[i].thisObject === thisObject || thisObject === void 0)) {\n          handlers.splice(i, 1);\n        }\n      }\n      if (handlers.length === 0) {\n        const value = object[_property];\n        delete object[_property];\n        if (watchs[_property].oldPropertyDescriptor) {\n          Object.defineProperty(object, _property, watchs[_property].oldPropertyDescriptor);\n        }\n        object[_property] = value;\n        delete watchs[_property];\n      }\n      if (Object.keys(watchs).length === 0) {\n        delete object[__watchs__];\n      }\n    }\n  }\n  /**\n   * 监听对象属性的变化\n   *\n   * 注意：使用watch后获取该属性值的性能将会是原来的1/60，避免在运算密集处使用该函数。\n   *\n   * @param object 被监听对象\n   * @param property 被监听属性\n   * @param handler 变化回调函数 (newValue: V, oldValue: V, object: T, property: string) => void\n   * @param thisObject 变化回调函数 this值\n   * @param onlyChanged 值为 true 时表示只在变化时才触发回调函数，否则只要被赋值就触发回调函数。默认为 true 。\n   */\n  watchs(object, propertys, handler, thisObject, onlyChanged = true) {\n    propertys.forEach((v) => {\n      this.watch(object, v, handler, thisObject, onlyChanged);\n    });\n  }\n  /**\n   * 取消监听对象属性的变化\n   *\n   * @param object 被监听对象\n   * @param property 被监听属性\n   * @param handler 变化回调函数 (newValue: V, oldValue: V, object: T, property: string) => void\n   * @param thisObject 变化回调函数 this值\n   */\n  unwatchs(object, propertys, handler, thisObject) {\n    propertys.forEach((v) => {\n      this.unwatch(object, v, handler, thisObject);\n    });\n  }\n  /**\n   * 绑定两个对象的指定属性，保存两个属性值同步。\n   *\n   * @param object0 第一个对象。\n   * @param property0 第一个对象的属性名称。\n   * @param object1 第二个对象。\n   * @param property1 第二个对象的属性名称。\n   */\n  bind(object0, property0, object1, property1) {\n    const fun0 = () => {\n      object1[property1] = object0[property0];\n    };\n    const fun1 = () => {\n      object0[property0] = object1[property1];\n    };\n    this.watch(object0, property0, fun0);\n    this.watch(object1, property1, fun1);\n    this._binds.push([object0, property0, fun0, object1, property1, fun1]);\n  }\n  /**\n   * 解除两个对象的指定属性的绑定。\n   *\n   * @param object0 第一个对象。\n   * @param property0 第一个对象的属性名称。\n   * @param object1 第二个对象。\n   * @param property1 第二个对象的属性名称。\n   */\n  unbind(object0, property0, object1, property1) {\n    const binds = this._binds;\n    for (let i = binds.length - 1; i >= 0; i--) {\n      const v = binds[i];\n      if (v[1] === property0 && v[4] === property1 || v[1] === property1 && v[4] === property0) {\n        if (v[0] === object0 && v[3] === object1 || v[0] === object1 && v[3] === object0) {\n          this.unwatch(v[0], v[1], v[2]);\n          this.unwatch(v[3], v[4], v[5]);\n          binds.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n  /**\n   * 监听对象属性链值变化\n   *\n   * @param object 被监听对象\n   * @param property 被监听属性 例如：\"a.b\"\n   * @param handler 变化回调函数 (newValue: any, oldValue: any, object: any, property: string) => void\n   * @param thisObject 变化回调函数 this值\n   * @param onlyChanged 值为 true 时表示只在变化时才触发回调函数，否则只要被赋值就触发回调函数。默认为 true 。\n   */\n  watchchain(object, property, handler, thisObject, onlyChanged = true, topObject, fullProperty) {\n    topObject = topObject || object;\n    fullProperty = fullProperty || property;\n    const notIndex = property.indexOf(\".\");\n    if (notIndex === -1) {\n      this.watch(object, property, handler, thisObject, onlyChanged, topObject, fullProperty);\n      return;\n    }\n    if (!Object.getOwnPropertyDescriptor(object, __watchchains__)) {\n      Object.defineProperty(object, __watchchains__, { value: {}, enumerable: false, writable: false, configurable: true });\n    }\n    const watchchains = object[__watchchains__];\n    if (!watchchains[property]) {\n      watchchains[property] = [];\n    }\n    const propertywatchs = watchchains[property];\n    const has = propertywatchs.reduce((v, item) => v || item.handler === handler && item.thisObject === thisObject, false);\n    if (!has) {\n      const currentp = property.substr(0, notIndex);\n      const nextp = property.substr(notIndex + 1);\n      if (object[currentp]) {\n        this.watchchain(object[currentp], nextp, handler, thisObject, onlyChanged, topObject, fullProperty);\n      }\n      const watchchainFun = (newValue, oldValue) => {\n        if (oldValue)\n          this.unwatchchain(oldValue, nextp, handler, thisObject);\n        if (newValue)\n          this.watchchain(newValue, nextp, handler, thisObject, onlyChanged, topObject, fullProperty);\n        const ov = getObjectPropertyValue(oldValue, nextp);\n        const nv = getObjectPropertyValue(newValue, nextp);\n        if (!onlyChanged || ov !== nv) {\n          handler.call(thisObject, nv, ov, topObject, fullProperty);\n        }\n      };\n      this.watch(object, currentp, watchchainFun, void 0, onlyChanged);\n      propertywatchs.push({ handler, thisObject, watchchainFun });\n    }\n  }\n  /**\n   * 取消监听对象属性链值变化\n   *\n   * @param object 被监听对象\n   * @param property 被监听属性 例如：\"a.b\"\n   * @param handler 变化回调函数 (object: T, property: string, oldValue: V) => void\n   * @param thisObject 变化回调函数 this值\n   */\n  unwatchchain(object, property, handler, thisObject) {\n    const notIndex = property.indexOf(\".\");\n    if (notIndex === -1) {\n      this.unwatch(object, property, handler, thisObject);\n      return;\n    }\n    const currentp = property.substr(0, notIndex);\n    const nextp = property.substr(notIndex + 1);\n    const watchchains = object[__watchchains__];\n    if (!watchchains || !watchchains[property])\n      return;\n    const propertywatchs = watchchains[property];\n    for (let i = propertywatchs.length - 1; i >= 0; i--) {\n      const element = propertywatchs[i];\n      if (objectIsEmpty(handler) || handler === element.handler && thisObject === element.thisObject) {\n        if (object[currentp]) {\n          this.unwatchchain(object[currentp], nextp, element.handler, element.thisObject);\n        }\n        this.unwatch(object, currentp, element.watchchainFun);\n        propertywatchs.splice(i, 1);\n      }\n    }\n    if (propertywatchs.length === 0)\n      delete watchchains[property];\n    if (Object.keys(watchchains).length === 0) {\n      delete object[__watchchains__];\n    }\n  }\n  /**\n   * 监听对象属性链值变化\n   *\n   * @param object 被监听对象\n   * @param property 被监听属性 例如：{a:{b:null,d:null}} 表示监听 object.a.b 与 object.a.d 值得变化，如果property===object时表示监听对象中所有叶子属性变化。\n   * @param handler 变化回调函数 (newValue: any, oldValue: any, host: any, property: string) => void\n   * @param thisObject 变化回调函数 this值\n   * @param onlyChanged 值为 true 时表示只在变化时才触发回调函数，否则只要被赋值就触发回调函数。默认为 true 。\n   */\n  watchobject(object, property, handler, thisObject, onlyChanged = true) {\n    const chains = getObjectPropertyChains(property);\n    chains.forEach((v) => {\n      this.watchchain(object, v, handler, thisObject, onlyChanged);\n    });\n  }\n  /**\n   * 取消监听对象属性链值变化\n   *\n   * @param object 被监听对象\n   * @param property 被监听属性 例如：{a:{b:null,d:null}} 表示监听 object.a.b 与 object.a.d 值得变化，如果property===object时表示监听对象中所有叶子属性变化。\n   * @param handler 变化回调函数 newValue: any, oldValue: any, host: any, property: string => void\n   * @param thisObject 变化回调函数 this值\n   */\n  unwatchobject(object, property, handler, thisObject) {\n    const chains = getObjectPropertyChains(property);\n    chains.forEach((v) => {\n      this.unwatchchain(object, v, handler, thisObject);\n    });\n  }\n}\nconst watcher = new Watcher();\nconst __watchs__ = \"__watchs__\";\nconst __watchchains__ = \"__watchchains__\";\nfunction notifyListener(newValue, oldValue, host, property, topObject, fullProperty) {\n  topObject = topObject || host;\n  fullProperty = fullProperty || property;\n  const watchs = host[__watchs__];\n  const handlers = watchs[property].handlers.concat();\n  handlers.forEach((element) => {\n    if (!element.onlyChanged || newValue !== oldValue) {\n      element.handler.call(element.thisObject, newValue, oldValue, topObject, fullProperty);\n    }\n  });\n}\nfunction getPropertyDescriptor(object, property) {\n  const data = Object.getOwnPropertyDescriptor(object, property);\n  if (data) {\n    return data;\n  }\n  const prototype = Object.getPrototypeOf(object);\n  if (prototype) {\n    return getPropertyDescriptor(prototype, property);\n  }\n  return void 0;\n}\nfunction objectIsEmpty(obj) {\n  if (obj === void 0 || obj === null) {\n    return true;\n  }\n  return false;\n}\nfunction getObjectPropertyValue(object, property) {\n  if (typeof property === \"string\")\n    property = property.split(\".\");\n  let value = object;\n  for (let i = 0; i < property.length; i++) {\n    if (objectIsEmpty(value))\n      return void 0;\n    value = value[property[i]];\n  }\n  return value;\n}\nfunction getObjectPropertyChains(object) {\n  const result = [];\n  const propertys = Object.keys(object);\n  const hosts = new Array(propertys.length).fill(object);\n  const parentPropertyIndices = new Array(propertys.length).fill(-1);\n  let index = 0;\n  while (index < propertys.length) {\n    const host = hosts[index];\n    const cp = propertys[index];\n    const cv = host[cp];\n    let vks;\n    if (objectIsEmpty(cv) || isBaseType(cv) || (vks = Object.keys(cv)).length === 0) {\n      const ps = [cp];\n      let ci = index;\n      while ((ci = parentPropertyIndices[ci]) !== -1) {\n        ps.push(propertys[ci]);\n      }\n      ps.reverse();\n      result.push(ps.join(\".\"));\n    } else {\n      vks.forEach((k) => {\n        propertys.push(k);\n        hosts.push(cv);\n        parentPropertyIndices.push(index);\n      });\n    }\n    index++;\n  }\n  return result;\n}\nfunction isBaseType(object) {\n  if (object === void 0 || object === null || typeof object === \"boolean\" || typeof object === \"string\" || typeof object === \"number\") {\n    return true;\n  }\n  return false;\n}\nexport {\n  Watcher,\n  watcher\n};\n//# sourceMappingURL=index.js.map\n","import { Buffer, UnReadonly } from \"@feng3d/render-api\";\nimport { watcher } from \"@feng3d/watcher\";\n\ndeclare global\n{\n    interface WebGLBuffer\n    {\n        /**\n         * 销毁。\n         */\n        destroy: () => void;\n    }\n}\n\nexport function getGLBuffer(gl: WebGLRenderingContext, buffer: Buffer)\n{\n    let webGLBuffer = gl._bufferMap.get(buffer);\n    if (webGLBuffer) return webGLBuffer;\n\n    webGLBuffer = gl.createBuffer();\n    gl._bufferMap.set(buffer, webGLBuffer);\n\n    const target = buffer.target;\n\n    const size = buffer.size;\n    const usage = buffer.usage || \"STATIC_DRAW\";\n\n    // 上传数据到WebGL\n    gl.bindBuffer(gl[target], webGLBuffer);\n    gl.bufferData(gl[target], size, gl[usage]);\n\n    const writeBuffer = () =>\n    {\n        const writeBuffers = buffer.writeBuffers;\n\n        if (!writeBuffers) return;\n\n        gl.bindBuffer(gl[target], webGLBuffer);\n        writeBuffers.forEach((writeBuffer) =>\n        {\n            const bufferOffset = writeBuffer.bufferOffset ?? 0;\n            const data = writeBuffer.data;\n            const dataOffset = writeBuffer.dataOffset ?? 0;\n            //\n            let arrayBufferView: Uint8Array;\n            if (\"buffer\" in data)\n            {\n                arrayBufferView = new Uint8Array(\n                    data.buffer,\n                    data.byteOffset + dataOffset * data.BYTES_PER_ELEMENT,\n                    (data.length - dataOffset) * data.BYTES_PER_ELEMENT\n                );\n            }\n            else\n            {\n                arrayBufferView = new Uint8Array(\n                    data,\n                    dataOffset,\n                    data.byteLength - dataOffset\n                );\n            }\n            gl.bufferSubData(gl[target], bufferOffset, arrayBufferView);\n        });\n        (buffer as UnReadonly<Buffer>).writeBuffers = null;\n    };\n\n    const dataChange = () =>\n    {\n        if (!buffer.data) return;\n\n        const writeBuffers = buffer.writeBuffers || [];\n        writeBuffers.unshift({ data: buffer.data });\n        (buffer as UnReadonly<Buffer>).writeBuffers = writeBuffers;\n    };\n\n    dataChange();\n    writeBuffer();\n\n    //\n    watcher.watch(buffer, \"data\", dataChange);\n    watcher.watch(buffer, \"writeBuffers\", writeBuffer);\n\n    //\n    webGLBuffer.destroy = () =>\n    {\n        watcher.unwatch(buffer, \"data\", dataChange);\n        watcher.unwatch(buffer, \"writeBuffers\", writeBuffer);\n    };\n\n    return webGLBuffer;\n}\n\nexport function deleteBuffer(gl: WebGLRenderingContext, buffer: Buffer)\n{\n    const webGLBuffer = gl._bufferMap.get(buffer);\n    if (webGLBuffer)\n    {\n        gl._bufferMap.delete(buffer);\n        webGLBuffer.destroy();\n        delete webGLBuffer.destroy;\n        //\n        gl.deleteBuffer(webGLBuffer);\n    }\n}\n","import { PrimitiveTopology } from \"@feng3d/render-api\";\n\nexport function getGLDrawMode(topology: PrimitiveTopology): GLDrawMode\n{\n    let drawMode = drawModeMap[topology];\n\n    console.assert(!!drawMode, `WebGL 不支持参数 IPrimitiveTopology ${topology} !`);\n\n    drawMode = drawMode || topology as any;\n\n    return drawMode;\n}\n\nconst drawModeMap: { [key: string]: GLDrawMode } = {\n    \"point-list\": \"POINTS\",\n    \"line-list\": \"LINES\",\n    \"line-strip\": \"LINE_STRIP\",\n    \"triangle-list\": \"TRIANGLES\",\n    \"triangle-strip\": \"TRIANGLE_STRIP\",\n    LINE_LOOP: \"LINE_LOOP\",\n    TRIANGLE_FAN: \"TRIANGLE_FAN\",\n};\n\n/**\n * 渲染模式，默认 TRIANGLES，每三个顶点绘制一个三角形。\n *\n * * POINTS 绘制单个点。\n * * LINE_LOOP 绘制循环连线。\n * * LINE_STRIP 绘制连线\n * * LINES 每两个顶点绘制一条线段。\n * * TRIANGLES 每三个顶点绘制一个三角形。\n * * TRIANGLE_STRIP 绘制三角形条带。\n * * TRIANGLE_FAN  绘制三角扇形。\n *\n * A GLenum specifying the type primitive to render. Possible values are:\n *\n * * gl.POINTS: Draws a single dot.\n * * gl.LINE_STRIP: Draws a straight line to the next vertex.\n * * gl.LINE_LOOP: Draws a straight line to the next vertex, and connects the last vertex back to the first.\n * * gl.LINES: Draws a line between a pair of vertices.\n * * gl.TRIANGLE_STRIP\n * * gl.TRIANGLE_FAN\n * * gl.TRIANGLES: Draws a triangle for a group of three vertices.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements\n */\nexport type GLDrawMode = \"POINTS\" | \"LINE_STRIP\" | \"LINE_LOOP\" | \"LINES\" | \"TRIANGLE_STRIP\" | \"TRIANGLE_FAN\" | \"TRIANGLES\";\n","import { Renderbuffer } from \"../data/Renderbuffer\";\n\nexport function getGLRenderbuffer(gl: WebGLRenderingContext, renderbuffer: Renderbuffer, sampleCount?: 4)\n{\n    let webGLRenderbuffer = gl._renderbuffers.get(renderbuffer);\n    if (webGLRenderbuffer) return webGLRenderbuffer;\n\n    webGLRenderbuffer = gl.createRenderbuffer();\n    gl._renderbuffers.set(renderbuffer, webGLRenderbuffer);\n\n    const { internalformat, width, height } = renderbuffer;\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, webGLRenderbuffer);\n    if (sampleCount === 4 && gl instanceof WebGL2RenderingContext)\n    {\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, sampleCount, gl[internalformat], width, height);\n    }\n    else\n    {\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl[internalformat], width, height);\n    }\n\n    return webGLRenderbuffer;\n}\n\nexport function deleteRenderbuffer(gl: WebGLRenderingContext, renderbuffer: Renderbuffer)\n{\n    const webGLRenderbuffer = gl._renderbuffers.get(renderbuffer);\n    gl._renderbuffers.delete(renderbuffer);\n    //\n    gl.deleteRenderbuffer(webGLRenderbuffer);\n}","import { TextureFormat } from \"@feng3d/render-api\";\n\nexport function getGLTextureFormats(format: TextureFormat = \"rgba8unorm\")\n{\n    const glTextureFormat: GLTextureFormats = formatMap[format];\n\n    console.assert(!!glTextureFormat, `未处理格式 ${format}；或者WebGL不支持纹理， 该格式只在WebGPU中支持！`);\n\n    return glTextureFormat;\n}\n\nexport interface GLTextureFormats\n{\n    /**\n     * 内部纹理格式。\n     *\n     * 默认 \"RGBA\"。\n     */\n    readonly internalformat?: GLTextureInternalFormat,\n\n    /**\n     * 纹理格式。\n     *\n     * 默认 \"RGBA\"。\n     */\n    readonly format?: GLTextureFormat;\n\n    /**\n     * 数据类型。\n     *\n     * 默认 \"UNSIGNED_BYTE\"。\n     */\n    readonly type?: GLTextureDataType;\n}\n\nconst formatMap: { [key: string]: GLTextureFormats } = {\n    r8unorm: { internalformat: \"R8\", format: \"RED\", type: \"UNSIGNED_BYTE\" },\n    r8snorm: undefined,\n    r8uint: { internalformat: \"R8\", format: \"RED\", type: \"UNSIGNED_BYTE\" },\n    r8sint: undefined,\n    r16uint: undefined,\n    r16sint: undefined,\n    r16float: { internalformat: \"R16F\", format: \"RED\", type: \"HALF_FLOAT\" },\n    rg8unorm: undefined,\n    rg8snorm: undefined,\n    rg8uint: undefined,\n    rg8sint: undefined,\n    r32uint: undefined,\n    r32sint: undefined,\n    r32float: undefined,\n    rg16uint: undefined,\n    rg16sint: undefined,\n    rg16float: { internalformat: \"RG16F\", format: \"RG\", type: \"HALF_FLOAT\" },\n    rgba8unorm: { internalformat: \"RGBA8\", format: \"RGBA\", type: \"UNSIGNED_BYTE\" },\n    \"rgba8unorm-srgb\": { internalformat: \"SRGB8\", format: \"RGB\", type: \"UNSIGNED_BYTE\" },\n    rgba8snorm: undefined,\n    rgba8uint: { internalformat: \"RGBA8UI\", format: \"RGBA_INTEGER\", type: \"UNSIGNED_BYTE\" },\n    rgba8sint: undefined,\n    bgra8unorm: undefined,\n    \"bgra8unorm-srgb\": undefined,\n    rgb9e5ufloat: undefined,\n    rgb10a2uint: undefined,\n    rgb10a2unorm: undefined,\n    rg11b10ufloat: undefined,\n    rg32uint: undefined,\n    rg32sint: undefined,\n    rg32float: undefined,\n    rgba16uint: undefined,\n    rgba16sint: undefined,\n    rgba16float: { internalformat: \"RGB16F\", format: \"RGB\", type: \"HALF_FLOAT\" },\n    rgba32uint: undefined,\n    rgba32sint: undefined,\n    rgba32float: { internalformat: \"RGBA32F\", format: \"RGBA\", type: \"FLOAT\" },\n    stencil8: undefined,\n    depth16unorm: { internalformat: \"DEPTH_COMPONENT16\", format: \"DEPTH_COMPONENT\", type: \"UNSIGNED_SHORT\" },\n    depth24plus: undefined,\n    \"depth24plus-stencil8\": undefined,\n    depth32float: undefined,\n    \"depth32float-stencil8\": undefined,\n    \"bc1-rgba-unorm\": undefined,\n    \"bc1-rgba-unorm-srgb\": undefined,\n    \"bc2-rgba-unorm\": undefined,\n    \"bc2-rgba-unorm-srgb\": undefined,\n    \"bc3-rgba-unorm\": undefined,\n    \"bc3-rgba-unorm-srgb\": undefined,\n    \"bc4-r-unorm\": undefined,\n    \"bc4-r-snorm\": undefined,\n    \"bc5-rg-unorm\": undefined,\n    \"bc5-rg-snorm\": undefined,\n    \"bc6h-rgb-ufloat\": undefined,\n    \"bc6h-rgb-float\": undefined,\n    \"bc7-rgba-unorm\": undefined,\n    \"bc7-rgba-unorm-srgb\": undefined,\n    \"etc2-rgb8unorm\": undefined,\n    \"etc2-rgb8unorm-srgb\": undefined,\n    \"etc2-rgb8a1unorm\": undefined,\n    \"etc2-rgb8a1unorm-srgb\": undefined,\n    \"etc2-rgba8unorm\": undefined,\n    \"etc2-rgba8unorm-srgb\": undefined,\n    \"eac-r11unorm\": undefined,\n    \"eac-r11snorm\": undefined,\n    \"eac-rg11unorm\": undefined,\n    \"eac-rg11snorm\": undefined,\n    \"astc-4x4-unorm\": undefined,\n    \"astc-4x4-unorm-srgb\": undefined,\n    \"astc-5x4-unorm\": undefined,\n    \"astc-5x4-unorm-srgb\": undefined,\n    \"astc-5x5-unorm\": undefined,\n    \"astc-5x5-unorm-srgb\": undefined,\n    \"astc-6x5-unorm\": undefined,\n    \"astc-6x5-unorm-srgb\": undefined,\n    \"astc-6x6-unorm\": undefined,\n    \"astc-6x6-unorm-srgb\": undefined,\n    \"astc-8x5-unorm\": undefined,\n    \"astc-8x5-unorm-srgb\": undefined,\n    \"astc-8x6-unorm\": undefined,\n    \"astc-8x6-unorm-srgb\": undefined,\n    \"astc-8x8-unorm\": undefined,\n    \"astc-8x8-unorm-srgb\": undefined,\n    \"astc-10x5-unorm\": undefined,\n    \"astc-10x5-unorm-srgb\": undefined,\n    \"astc-10x6-unorm\": undefined,\n    \"astc-10x6-unorm-srgb\": undefined,\n    \"astc-10x8-unorm\": undefined,\n    \"astc-10x8-unorm-srgb\": undefined,\n    \"astc-10x10-unorm\": undefined,\n    \"astc-10x10-unorm-srgb\": undefined,\n    \"astc-12x10-unorm\": undefined,\n    \"astc-12x10-unorm-srgb\": undefined,\n    \"astc-12x12-unorm\": undefined,\n    \"astc-12x12-unorm-srgb\": undefined,\n};\n\n/**\n * internalformat\tformat\ttype\n *\n * @see https://registry.khronos.org/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\n */\ntype GLTextureTypes =\n    | { internalformat: \"RGB\", format: \"RGB\", type: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT_5_6_5\" }\n    | { internalformat: \"RGBA\", format: \"RGBA\", type: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT_4_4_4_4\" | \"UNSIGNED_SHORT_5_5_5_1\" }\n    | { internalformat: \"LUMINANCE_ALPHA\", format: \"LUMINANCE_ALPHA\", type: \"UNSIGNED_BYTE\" }\n    | { internalformat: \"LUMINANCE\", format: \"LUMINANCE\", type: \"UNSIGNED_BYTE\" }\n    | { internalformat: \"ALPHA\", format: \"ALPHA\", type: \"UNSIGNED_BYTE\" }\n    | { internalformat: \"R8\", format: \"RED\", type: \"UNSIGNED_BYTE\" }\n    | { internalformat: \"R16F\", format: \"RED\", type: \"HALF_FLOAT\" | \" FLOAT\" }\n    | { internalformat: \"R32F\", format: \"RED\", type: \"FLOAT\" }\n    | { internalformat: \"R8UI\", format: \"RED_INTEGER\", type: \"UNSIGNED_BYTE\" }\n    | { internalformat: \"RG8\", format: \"RG\", type: \"UNSIGNED_BYTE\" }\n    | { internalformat: \"RG16F\", format: \"RG\", type: \"HALF_FLOAT\" | \"FLOAT\" }\n    | { internalformat: \"RG32F\", format: \"RG\", type: \"FLOAT\" }\n    | { internalformat: \"RG8UI\", format: \"RG_INTEGER\", type: \"UNSIGNED_BYTE\" }\n    | { internalformat: \"RGB8\", format: \"RGB\", type: \"UNSIGNED_BYTE\" }\n    | { internalformat: \"SRGB8\", format: \"RGB\", type: \"UNSIGNED_BYTE\" }\n    | { internalformat: \"RGB565\", format: \"RGB\", type: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT_5_6_5\" }\n    | { internalformat: \"R11F_G11F_B10F\", format: \"RGB\", type: \"UNSIGNED_INT_10F_11F_11F_REV\" | \"HALF_FLOAT\" | \"FLOAT\" }\n    | { internalformat: \"RGB9_E5\", format: \"RGB\", type: \"HALF_FLOAT\" | \"FLOAT\" }\n    | { internalformat: \"RGB16F\", format: \"RGB\", type: \"HALF_FLOAT\" | \"FLOAT\" }\n    | { internalformat: \"RGB32F\", format: \"RGB\", type: \"FLOAT\" }\n    | { internalformat: \"RGB8UI\", format: \"RGB_INTEGER\", type: \"UNSIGNED_BYTE\" }\n    | { internalformat: \"RGBA8\", format: \"RGBA\", type: \"UNSIGNED_BYTE\" }\n    | { internalformat: \"SRGB8_ALPHA8\", format: \"RGBA\", type: \"UNSIGNED_BYTE\" }\n    | { internalformat: \"RGB5_A1\", format: \"RGBA\", type: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT_5_5_5_1\" }\n    | { internalformat: \"RGB10_A2\", format: \"RGBA\", type: \"UNSIGNED_INT_2_10_10_10_REV\" }\n    | { internalformat: \"RGBA4\", format: \"RGBA\", type: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT_4_4_4_4\" }\n    | { internalformat: \"RGBA16F\", format: \"RGBA\", type: \"HALF_FLOAT\" | \"FLOAT\" }\n    | { internalformat: \"RGBA32F\", format: \"RGBA\", type: \"FLOAT\" }\n    | { internalformat: \"RGBA8UI\", format: \"RGBA_INTEGER\", type: \"UNSIGNED_BYTE\" }\n    // 深度纹理\n    | { internalformat: \"DEPTH_COMPONENT16\", format: \"DEPTH_COMPONENT\", type: \"UNSIGNED_SHORT\", }\n    ;\n\nexport type GLTextureInternalFormat = GLTextureTypes[\"internalformat\"];\nexport type GLTextureFormat = GLTextureTypes[\"format\"];\nexport type GLTextureDataType = GLTextureTypes[\"type\"];\n","import { RenderPassColorAttachment, RenderPassDescriptor, TextureFormat, TextureView } from \"@feng3d/render-api\";\nimport { BlitFramebuffer } from \"../data/BlitFramebuffer\";\nimport { RenderbufferInternalformat, Renderbuffer } from \"../data/Renderbuffer\";\nimport { getGLTextureFormats } from \"./getGLTextureFormats\";\n\n/**\n *\n * 当需要渲染到纹理并且开启多重采样时，就必须使用支持多重采样的渲染缓冲区来进行接受中间结果再拷贝到模板纹理上。\n *\n * 当`passDescriptor.multisample`值存在时，引擎将会自动创建支持`multisample`的`IGLRenderbuffer`用于接收颜色附件的结果。在渲染通道执行结束后在由`IGLRenderbuffer`拷贝到对应纹理上。\n *\n * @param sourcePassDescriptor 需要渲染到纹理并且开启多重采样的渲染通道描述。\n */\nexport function getGLRenderPassDescriptorWithMultisample(sourcePassDescriptor: RenderPassDescriptor): GLRenderPassDescriptorWithMultisample\n{\n    if (sourcePassDescriptor[_IGLRenderPassDescriptorWithMultisample]) return sourcePassDescriptor[_IGLRenderPassDescriptorWithMultisample];\n\n    const texture = (sourcePassDescriptor.colorAttachments[0].view as TextureView).texture;\n\n    const textureSize = texture.size;\n\n    const renderbuffers: Renderbuffer[] = [];\n\n    // 创建支持 多重采样的 渲染通道\n    const passDescriptor: RenderPassDescriptor = {\n        colorAttachments: sourcePassDescriptor.colorAttachments.map((v) =>\n        {\n            const texture = v.view.texture;\n\n            const renderbuffer: Renderbuffer = {\n                internalformat: getGLRenderbufferInternalformat(texture.format),\n                width: textureSize[0],\n                height: textureSize[1],\n            };\n            renderbuffers.push(renderbuffer);\n\n            const colorAttachment: RenderPassColorAttachment = {\n                ...v,\n                view: renderbuffer as any,\n            };\n\n            return colorAttachment;\n        }),\n        depthStencilAttachment: sourcePassDescriptor.depthStencilAttachment,\n        sampleCount: sourcePassDescriptor.sampleCount,\n    };\n\n    // 拷贝 渲染缓冲区到 IGLTexture\n    const blitFramebuffer: BlitFramebuffer = {\n        __type__: \"BlitFramebuffer\",\n        read: passDescriptor,\n        draw: sourcePassDescriptor,\n        blitFramebuffers: [[0, 0, textureSize[0], textureSize[1],\n            0, 0, textureSize[0], textureSize[1],\n            \"COLOR_BUFFER_BIT\", \"NEAREST\"]],\n    };\n\n    sourcePassDescriptor[_IGLRenderPassDescriptorWithMultisample] = { passDescriptor, blitFramebuffer, renderbuffers } as GLRenderPassDescriptorWithMultisample;\n\n    return sourcePassDescriptor[_IGLRenderPassDescriptorWithMultisample];\n}\n\nfunction getGLRenderbufferInternalformat(format?: TextureFormat)\n{\n    const { internalformat } = getGLTextureFormats(format);\n\n    return internalformat as RenderbufferInternalformat;\n}\n\nexport const _IGLRenderPassDescriptorWithMultisample = \"_IGLRenderPassDescriptorWithMultisample\";\n\n/**\n * 由`passDescriptor.multisample`值存在的IGLRenderPassDescriptor生成。\n */\nexport interface GLRenderPassDescriptorWithMultisample\n{\n    /**\n     * 渲染到渲染缓冲区上。\n     */\n    passDescriptor: RenderPassDescriptor;\n    /**\n     * 拷贝渲染缓冲区到目标纹理中。\n     */\n    blitFramebuffer: BlitFramebuffer;\n    /**\n     * 需要销毁的临时渲染缓冲区。\n     */\n    renderbuffers: Renderbuffer[];\n}","import { TextureDimension } from \"@feng3d/render-api\";\n\n/**\n * 纹理绑定点。\n *\n * * gl.TEXTURE_2D: A two-dimensional texture.\n * * gl.TEXTURE_CUBE_MAP: A cube-mapped texture.\n *\n * When using a WebGL 2 context, the following values are available additionally:\n *\n * * gl.TEXTURE_3D: A three-dimensional texture.\n * * gl.TEXTURE_2D_ARRAY: A two-dimensional array texture.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindTexture\n */\nexport type GLTextureTarget = \"TEXTURE_2D\" | \"TEXTURE_CUBE_MAP\" | \"TEXTURE_3D\" | \"TEXTURE_2D_ARRAY\";\n\nexport function getGLTextureTarget(dimension: TextureDimension = \"2d\")\n{\n    const target: GLTextureTarget = dimensionMap[dimension];\n\n    console.assert(!!target, `WebGL 不支持纹理维度 ${dimension} , 该维度只在WebGPU中支持！`);\n\n    return target;\n}\n\nconst dimensionMap: { [key: string]: GLTextureTarget } = {\n    \"1d\": undefined,\n    \"2d\": \"TEXTURE_2D\",\n    \"2d-array\": \"TEXTURE_2D_ARRAY\",\n    cube: \"TEXTURE_CUBE_MAP\",\n    \"cube-array\": undefined,\n    \"3d\": \"TEXTURE_3D\",\n};","import { Texture, TextureDataSource, TextureImageSource, TextureSize } from \"@feng3d/render-api\";\nimport { watcher } from \"@feng3d/watcher\";\nimport { getGLTextureFormats } from \"./getGLTextureFormats\";\nimport { getGLTextureTarget } from \"./getGLTextureTarget\";\n\ndeclare global\n{\n    interface WebGLTexture\n    {\n        /**\n         * 销毁WebGL纹理。\n         */\n        destroy: () => void;\n    }\n}\n\nexport const defaultTexturePixelStore: GLTexturePixelStore = {\n    packAlignment: 4,\n    unpackAlignment: 4,\n    unpackFlipY: false,\n    unpackPremulAlpha: false,\n    unpackColorSpaceConversion: \"BROWSER_DEFAULT_WEBGL\",\n    packRowLength: 0,\n    packSkipPixels: 0,\n    packSkipRows: 0,\n    unpackRowLength: 0,\n    unpackImageHeight: 0,\n    unpackSkipPixels: 0,\n    unpackSkipRows: 0,\n    unpackSkipImages: 0,\n};\n\nexport function getGLTexture(gl: WebGLRenderingContext, texture: Texture)\n{\n    let webGLTexture = gl._textures.get(texture);\n    if (webGLTexture) return webGLTexture;\n\n    // 创建纹理\n    const createTexture = () =>\n    {\n        const target = getGLTextureTarget(texture.dimension);\n        const { internalformat, format, type } = getGLTextureFormats(texture.format);\n\n        webGLTexture = gl.createTexture(); // Create a texture object\n        gl._textures.set(texture, webGLTexture);\n\n        gl.bindTexture(gl[target], webGLTexture);\n\n        //\n        const { sources, generateMipmap } = texture;\n\n        // 设置纹理尺寸\n        const [width, height, depth] = texture.size;\n        const mipLevelCount = texture.mipLevelCount || 1;\n\n        if (sources)\n        {\n            sources.forEach((v) =>\n            {\n                const { textureOrigin, size } = v;\n                //\n                const mipLevel = v.mipLevel ?? 0;\n                const width = size?.[0];\n                const height = size?.[1];\n                const depthOrArrayLayers = size?.[2];\n                const xoffset = textureOrigin?.[0];\n                const yoffset = textureOrigin?.[1];\n                const zoffset = textureOrigin?.[2];\n                if (gl instanceof WebGL2RenderingContext)\n                {\n                    const imageSource = v as TextureImageSource;\n                    if (imageSource.image)\n                    {\n                        const { image, imageOrigin, flipY, premultipliedAlpha } = imageSource;\n\n                        //\n                        const pixelStore: GLTexturePixelStore = {};\n                        pixelStore.unpackSkipPixels = imageOrigin?.[0] || 0;\n                        pixelStore.unpackSkipRows = imageOrigin?.[1] || 0;\n                        pixelStore.unpackFlipY = flipY || false;\n                        pixelStore.unpackPremulAlpha = premultipliedAlpha || false;\n\n                        setTexturePixelStore(gl, pixelStore);\n\n                        if (target === \"TEXTURE_2D\" || target === \"TEXTURE_CUBE_MAP\")\n                        {\n                            const bindTarget = target === \"TEXTURE_CUBE_MAP\" ? getTextureCubeMapTarget(zoffset) : target;\n                            if (width && height)\n                            {\n                                gl.texImage2D(gl[bindTarget], mipLevel, gl[internalformat], width, height, 0, gl[format], gl[type], image);\n                            }\n                            else\n                            {\n                                gl.texImage2D(gl[bindTarget], mipLevel, gl[internalformat], gl[format], gl[type], image);\n                            }\n                        }\n                        else if (target === \"TEXTURE_3D\" || target === \"TEXTURE_2D_ARRAY\")\n                        {\n                            gl.texImage3D(gl[target], mipLevel, gl[internalformat], width, height, depth, 0, gl[format], gl[type], image);\n                        }\n                        else\n                        {\n                            console.error(`未处理 ${target} 纹理初始化存储！`);\n                        }\n                    }\n                    else\n                    {\n                        const bufferSource = v as TextureDataSource;\n                        const { data, dataLayout, dataImageOrigin } = bufferSource;\n\n                        //\n                        const offset = dataLayout?.offset || 0;\n\n                        //\n                        const pixelStore: GLTexturePixelStore = {};\n                        pixelStore.unpackSkipPixels = dataImageOrigin?.[0] || 0;\n                        pixelStore.unpackSkipRows = dataImageOrigin?.[1] || 0;\n                        pixelStore.unpackSkipImages = dataImageOrigin?.[2] || 0;\n                        pixelStore.unpackRowLength = dataLayout?.width;\n                        pixelStore.unpackImageHeight = dataLayout?.height;\n\n                        setTexturePixelStore(gl, pixelStore);\n\n                        if (target === \"TEXTURE_2D\" || target === \"TEXTURE_CUBE_MAP\")\n                        {\n                            const bindTarget = target === \"TEXTURE_CUBE_MAP\" ? getTextureCubeMapTarget(zoffset) : target;\n                            gl.texImage2D(gl[bindTarget], mipLevel, gl[internalformat], width, height, 0, gl[format], gl[type], data, offset);\n                        }\n                        else if (target === \"TEXTURE_3D\" || target === \"TEXTURE_2D_ARRAY\")\n                        {\n                            gl.texImage3D(gl[target], mipLevel, gl[internalformat], width, height, depth, 0, gl[format], gl[type], data, offset);\n                        }\n                        else\n                        {\n                            console.error(`未处理 ${target} 纹理初始化存储！`);\n                        }\n                    }\n                }\n                else\n                {\n                    const imageSource = v as TextureImageSource;\n                    if (imageSource.image)\n                    {\n                        const { image, imageOrigin, flipY, premultipliedAlpha } = imageSource;\n\n                        //\n                        const pixelStore: GLTexturePixelStore = {};\n                        pixelStore.unpackSkipPixels = imageOrigin?.[0] || 0;\n                        pixelStore.unpackSkipRows = imageOrigin?.[1] || 0;\n                        pixelStore.unpackFlipY = flipY || false;\n                        pixelStore.unpackPremulAlpha = premultipliedAlpha || false;\n\n                        setTexturePixelStore(gl, pixelStore);\n\n                        if (target === \"TEXTURE_2D\" || target === \"TEXTURE_CUBE_MAP\")\n                        {\n                            const bindTarget = target === \"TEXTURE_CUBE_MAP\" ? getTextureCubeMapTarget(zoffset) : target;\n                            gl.texImage2D(gl[bindTarget], mipLevel, gl[format], gl[format], gl[type], image);\n                        }\n                        else\n                        {\n                            console.error(`未处理 ${target} 纹理初始化存储！`);\n                        }\n                    }\n                    else\n                    {\n                        const bufferSource = v as TextureDataSource;\n                        const { data, dataLayout, dataImageOrigin } = bufferSource;\n\n                        //\n                        const offset = dataLayout?.offset || 0;\n\n                        //\n                        const pixelStore: GLTexturePixelStore = {};\n                        pixelStore.unpackSkipPixels = dataImageOrigin?.[0] || 0;\n                        pixelStore.unpackSkipRows = dataImageOrigin?.[1] || 0;\n                        pixelStore.unpackSkipImages = dataImageOrigin?.[2] || 0;\n                        pixelStore.unpackRowLength = dataLayout?.width;\n                        pixelStore.unpackImageHeight = dataLayout?.height;\n\n                        setTexturePixelStore(gl, pixelStore);\n\n                        if (target === \"TEXTURE_2D\" || target === \"TEXTURE_CUBE_MAP\")\n                        {\n                            const bindTarget = target === \"TEXTURE_CUBE_MAP\" ? getTextureCubeMapTarget(zoffset) : target;\n                            console.assert(offset === 0, `WebGL1中ITextureDataLayout.offset必须为0`);\n                            gl.texImage2D(gl[bindTarget], mipLevel, gl[format], width, height, 0, gl[format], gl[type], data);\n                        }\n                        else\n                        {\n                            console.error(`未处理 ${target} 纹理初始化存储！`);\n                        }\n                    }\n                }\n            });\n\n            //\n            if (generateMipmap)\n            {\n                gl.generateMipmap(gl[target]);\n            }\n        }\n        else\n        {\n            if (gl instanceof WebGL2RenderingContext)\n            {\n                if (target === \"TEXTURE_2D\" || target === \"TEXTURE_CUBE_MAP\")\n                {\n                    gl.texStorage2D(gl[target], mipLevelCount, gl[internalformat], width, height);\n                }\n                else if (target === \"TEXTURE_3D\" || target === \"TEXTURE_2D_ARRAY\")\n                {\n                    gl.texStorage3D(gl[target], mipLevelCount, gl[internalformat], width, height, depth);\n                }\n                else\n                {\n                    console.error(`未处理 ${target} 纹理初始化存储！`);\n                }\n            }\n            else\n            {\n                if (target === \"TEXTURE_2D\" || target === \"TEXTURE_CUBE_MAP\")\n                {\n                    for (let i = 0; i < mipLevelCount; i++)\n                    {\n                        gl.texImage2D(gl[target], i, gl[format], width, height, 0, gl[format], gl[type], null);\n                    }\n                }\n                else\n                {\n                    console.error(`未处理 ${target} 纹理初始化存储！`);\n                }\n            }\n        }\n    };\n    createTexture();\n\n    const updateSources = () =>\n    {\n        webGLTexture.destroy();\n    };\n\n    watcher.watch(texture, \"sources\", updateSources);\n\n    // 更新纹理\n    const updateTexture = () =>\n    {\n        const { writeTextures } = texture;\n        if (!writeTextures || writeTextures.length === 0) return;\n\n        const target = getGLTextureTarget(texture.dimension);\n        const { format, type } = getGLTextureFormats(texture.format);\n\n        gl.bindTexture(gl[target], webGLTexture);\n\n        writeTextures.forEach((v) =>\n        {\n            const { mipLevel, textureOrigin, size } = v;\n            //\n            const width = size?.[0];\n            const height = size?.[1];\n            const depthOrArrayLayers = size?.[2];\n            const xoffset = textureOrigin?.[0];\n            const yoffset = textureOrigin?.[1];\n            const zoffset = textureOrigin?.[2];\n\n            // 处理图片资源\n            const imageSource = v as TextureImageSource;\n            if (imageSource.image)\n            {\n                const { image, imageOrigin, flipY, premultipliedAlpha } = imageSource;\n\n                //\n                const pixelStore: GLTexturePixelStore = {};\n                pixelStore.unpackSkipPixels = imageOrigin?.[0] || 0;\n                pixelStore.unpackSkipRows = imageOrigin?.[1] || 0;\n                pixelStore.unpackFlipY = flipY || false;\n                pixelStore.unpackPremulAlpha = premultipliedAlpha || false;\n\n                setTexturePixelStore(gl, pixelStore);\n\n                if (gl instanceof WebGL2RenderingContext)\n                {\n                    if (target === \"TEXTURE_2D\" || target === \"TEXTURE_CUBE_MAP\")\n                    {\n                        const bindTarget = target === \"TEXTURE_CUBE_MAP\" ? getTextureCubeMapTarget(depthOrArrayLayers) : target;\n\n                        if (width && height)\n                        {\n                            gl.texSubImage2D(gl[bindTarget], mipLevel, xoffset, yoffset, width, height, gl[format], gl[type], image);\n                        }\n                        else\n                        {\n                            gl.texSubImage2D(gl[bindTarget], mipLevel, xoffset, yoffset, gl[format], gl[type], image);\n                        }\n                    }\n                    else if (target === \"TEXTURE_3D\" || target === \"TEXTURE_2D_ARRAY\")\n                    {\n                        gl.texSubImage3D(gl[target], mipLevel, xoffset, yoffset, zoffset, width, height, depthOrArrayLayers, gl[format], gl[type], image);\n                    }\n                    else\n                    {\n                        console.error(`未处理 WebGL1 中 ${target} 纹理类型的图片资源上传！`);\n                    }\n                }\n                // 处理 WebGL1\n                else\n                {\n                    // eslint-disable-next-line no-lonely-if\n                    if (target === \"TEXTURE_2D\" || target === \"TEXTURE_CUBE_MAP\")\n                    {\n                        const bindTarget = target === \"TEXTURE_CUBE_MAP\" ? getTextureCubeMapTarget(depthOrArrayLayers) : target;\n\n                        gl.texSubImage2D(gl[bindTarget], mipLevel, xoffset, yoffset, gl[format], gl[type], image);\n                    }\n                    else\n                    {\n                        console.error(`WebGL1 中 不支持 ${target} 纹理类型！`);\n                    }\n                }\n\n                return;\n            }\n\n            // 处理数据资源\n            const bufferSource = v as TextureDataSource;\n            const { data, dataLayout, dataImageOrigin } = bufferSource;\n\n            //\n            const offset = dataLayout?.offset || 0;\n\n            //\n            const pixelStore: GLTexturePixelStore = {};\n            pixelStore.unpackSkipPixels = dataImageOrigin?.[0] || 0;\n            pixelStore.unpackSkipRows = dataImageOrigin?.[1] || 0;\n            pixelStore.unpackSkipImages = dataImageOrigin?.[2] || 0;\n            pixelStore.unpackRowLength = dataLayout?.width;\n            pixelStore.unpackImageHeight = dataLayout?.height;\n\n            setTexturePixelStore(gl, pixelStore);\n\n            if (gl instanceof WebGL2RenderingContext)\n            {\n                // eslint-disable-next-line no-lonely-if\n                if (target === \"TEXTURE_2D\" || target === \"TEXTURE_CUBE_MAP\")\n                {\n                    const bindTarget = target === \"TEXTURE_CUBE_MAP\" ? getTextureCubeMapTarget(depthOrArrayLayers) : target;\n\n                    gl.texSubImage2D(gl[bindTarget], mipLevel, xoffset, yoffset, width, height, gl[format], gl[type], data, offset);\n                }\n                else if (target === \"TEXTURE_3D\" || target === \"TEXTURE_2D_ARRAY\")\n                {\n                    gl.texSubImage3D(gl[target], mipLevel, xoffset, yoffset, zoffset, width, height, depthOrArrayLayers, gl[format], gl[type], data, offset);\n                }\n                else\n                {\n                    console.error(`未处理 WebGL1 中 ${target} 纹理类型的像素资源上传。`);\n                }\n            }\n            // 处理 WebGL1\n            else\n            {\n                // eslint-disable-next-line no-lonely-if\n                if (target === \"TEXTURE_2D\" || target === \"TEXTURE_CUBE_MAP\")\n                {\n                    const bindTarget = target === \"TEXTURE_CUBE_MAP\" ? getTextureCubeMapTarget(depthOrArrayLayers) : target;\n\n                    gl.texSubImage2D(gl[bindTarget], mipLevel, xoffset, yoffset, width, height, gl[format], gl[type], data);\n\n                    console.assert(!offset, `WebGL1 不支持 IGLTextureDataSource.dataLayout.offset ！`);\n                }\n                else\n                {\n                    console.error(`WebGL1 中 不支持 ${target} 纹理类型！`);\n                }\n            }\n        });\n    };\n    updateTexture();\n\n    watcher.watchs(texture, [\"generateMipmap\"], updateTexture);\n    watcher.watch(texture, \"writeTextures\", updateTexture);\n\n    // 监听纹理尺寸发生变化\n    const resize = (newValue: TextureSize, oldValue: TextureSize) =>\n    {\n        if (!!newValue && !!oldValue)\n        {\n            if (newValue[0] === oldValue[0]\n                && newValue[1] === oldValue[1]\n                && (newValue[2] || 1) === (oldValue[2] || 1)\n            )\n            {\n                return;\n            }\n        }\n\n        webGLTexture.destroy();\n    };\n    watcher.watch(texture, \"size\", resize);\n\n    webGLTexture.destroy = () =>\n    {\n        //\n        gl.deleteTexture(webGLTexture);\n        gl._textures.delete(texture);\n        //\n        watcher.unwatchs(texture, [\"generateMipmap\"], updateTexture);\n        watcher.unwatch(texture, \"sources\", updateSources);\n        watcher.unwatch(texture, \"writeTextures\", updateTexture);\n        watcher.unwatch(texture, \"size\", resize);\n        //\n        delete webGLTexture.destroy;\n    };\n\n    return webGLTexture;\n}\n\nexport function deleteTexture(gl: WebGLRenderingContext, texture: Texture)\n{\n    const webGLTexture = gl._textures.get(texture);\n    if (!webGLTexture) return;\n\n    webGLTexture.destroy();\n}\n\n/**\n * 设置像素解包打包时参数。\n *\n * @param gl\n * @param pixelStore 像素解包打包时参数。\n */\nfunction setTexturePixelStore(gl: WebGLRenderingContext, pixelStore: GLTexturePixelStore)\n{\n    const {\n        packAlignment,\n        unpackAlignment,\n        unpackFlipY,\n        unpackPremulAlpha,\n        unpackColorSpaceConversion,\n        packRowLength,\n        packSkipPixels,\n        packSkipRows,\n        unpackRowLength,\n        unpackImageHeight,\n        unpackSkipPixels,\n        unpackSkipRows,\n        unpackSkipImages,\n    } = { ...defaultTexturePixelStore, ...pixelStore };\n\n    //\n    gl.pixelStorei(gl.PACK_ALIGNMENT, packAlignment);\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, unpackFlipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, unpackPremulAlpha);\n    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl[unpackColorSpaceConversion]);\n\n    if (gl instanceof WebGL2RenderingContext)\n    {\n        gl.pixelStorei(gl.PACK_ROW_LENGTH, packRowLength);\n        gl.pixelStorei(gl.PACK_SKIP_PIXELS, packSkipPixels);\n        gl.pixelStorei(gl.PACK_SKIP_ROWS, packSkipRows);\n        gl.pixelStorei(gl.UNPACK_ROW_LENGTH, unpackRowLength);\n        gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);\n        gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);\n        gl.pixelStorei(gl.UNPACK_SKIP_ROWS, unpackSkipRows);\n        gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, unpackSkipImages);\n    }\n}\n\n/**\n * 像素解包打包时参数。\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei\n */\ninterface GLTexturePixelStore\n{\n    /**\n     * Packing of pixel data into memory\n     *\n     * gl.PACK_ALIGNMENT\n     *\n     * 默认值为 4 。\n     */\n    packAlignment?: 1 | 2 | 4 | 8;\n\n    /**\n     * Unpacking of pixel data from memory.\n     *\n     * gl.UNPACK_ALIGNMENT\n     *\n     * 默认值为 4 。\n     */\n    unpackAlignment?: 1 | 2 | 4 | 8;\n\n    /**\n     * 解包图像数据时进行Y轴反转。\n     *\n     * Flips the source data along its vertical axis if true.\n     *\n     * gl.UNPACK_FLIP_Y_WEBGL\n     *\n     * 默认为 false。\n     */\n    unpackFlipY?: boolean;\n\n    /**\n     * 将图像RGB颜色值得每一个分量乘以A。\n     *\n     * Multiplies the alpha channel into the other color channels\n     *\n     * gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL\n     *\n     * 默认为 false。\n     */\n    unpackPremulAlpha?: boolean;\n\n    /**\n     * Default color space conversion or no color space conversion.\n     *\n     * gl.UNPACK_COLORSPACE_CONVERSION_WEBGL\n     *\n     * 默认为 \"BROWSER_DEFAULT_WEBGL\" 。\n     */\n    unpackColorSpaceConversion?: \"BROWSER_DEFAULT_WEBGL\" | \"NONE\";\n\n    /**\n     * Number of pixels in a row.\n     *\n     * gl.PACK_ROW_LENGTH\n     *\n     * 默认值为 0 。\n     *\n     * 仅 WebGL2。\n     */\n    packRowLength?: number;\n\n    /**\n     * Number of pixel locations skipped before the first pixel is written into memory.\n     *\n     * gl.PACK_SKIP_PIXELS\n     *\n     * 默认值为 0 。\n     *\n     * 仅 WebGL2。\n     */\n    packSkipPixels?: number;\n\n    /**\n     * Number of rows of pixel locations skipped before the first pixel is written into memory\n     *\n     * gl.PACK_SKIP_ROWS\n     *\n     * 默认值为 0 。\n     *\n     * 仅 WebGL2。\n     */\n    packSkipRows?: number;\n\n    /**\n     * Number of pixels in a row.\n     *\n     * gl.UNPACK_ROW_LENGTH\n     *\n     * 默认值为 0 。\n     *\n     * 仅 WebGL2。\n     */\n    unpackRowLength?: number;\n\n    /**\n     * Image height used for reading pixel data from memory\n     *\n     * gl.UNPACK_IMAGE_HEIGHT\n     *\n     * 默认值为 0 。\n     *\n     * 仅 WebGL2。\n     */\n    unpackImageHeight?: number;\n\n    /**\n     *\n     * Number of pixel images skipped before the first pixel is read from memory\n     *\n     * gl.UNPACK_SKIP_PIXELS\n     *\n     * 默认值为 0 。\n     *\n     * 仅 WebGL2。\n     */\n    unpackSkipPixels?: number;\n\n    /**\n     *\n     * Number of rows of pixel locations skipped before the first pixel is read from memory\n     *\n     * gl.UNPACK_SKIP_ROWS\n     *\n     * 默认值为 0 。\n     *\n     * 仅 WebGL2。\n     */\n    unpackSkipRows?: number;\n\n    /**\n     *\n     * Number of pixel images skipped before the first pixel is read from memory\n     *\n     * gl.UNPACK_SKIP_IMAGES\n     *\n     * 默认值为 0 。\n     *\n     * 仅 WebGL2。\n     */\n    unpackSkipImages?: number;\n}\n\nfunction getTextureCubeMapTarget(depthOrArrayLayers: number)\n{\n    const textureCubeMapTarget: GLTextureCubeMapTarget = textureCubeMapTargetMap[depthOrArrayLayers];\n\n    console.assert(!!textureCubeMapTarget, `CubeMap的depthOrArrayLayers值应在[0-5]之间！`);\n\n    return textureCubeMapTarget;\n}\n\nconst textureCubeMapTargetMap: GLTextureCubeMapTarget[] = [\n    \"TEXTURE_CUBE_MAP_POSITIVE_X\",\n    \"TEXTURE_CUBE_MAP_NEGATIVE_X\",\n    \"TEXTURE_CUBE_MAP_POSITIVE_Y\",\n    \"TEXTURE_CUBE_MAP_NEGATIVE_Y\",\n    \"TEXTURE_CUBE_MAP_POSITIVE_Z\",\n    \"TEXTURE_CUBE_MAP_NEGATIVE_Z\",\n];\n\n/**\n * A GLenum specifying the texture target.\n *\n * gl.TEXTURE_CUBE_MAP_POSITIVE_X: Positive X face for a cube-mapped texture.\n * gl.TEXTURE_CUBE_MAP_NEGATIVE_X: Negative X face for a cube-mapped texture.\n * gl.TEXTURE_CUBE_MAP_POSITIVE_Y: Positive Y face for a cube-mapped texture.\n * gl.TEXTURE_CUBE_MAP_NEGATIVE_Y: Negative Y face for a cube-mapped texture.\n * gl.TEXTURE_CUBE_MAP_POSITIVE_Z: Positive Z face for a cube-mapped texture.\n * gl.TEXTURE_CUBE_MAP_NEGATIVE_Z: Negative Z face for a cube-mapped texture.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D\n */\ntype GLTextureCubeMapTarget =\n    | \"TEXTURE_CUBE_MAP_POSITIVE_X\"\n    | \"TEXTURE_CUBE_MAP_NEGATIVE_X\"\n    | \"TEXTURE_CUBE_MAP_POSITIVE_Y\"\n    | \"TEXTURE_CUBE_MAP_NEGATIVE_Y\"\n    | \"TEXTURE_CUBE_MAP_POSITIVE_Z\"\n    | \"TEXTURE_CUBE_MAP_NEGATIVE_Z\";","import { RenderPassDescriptor, TextureView } from \"@feng3d/render-api\";\nimport { Renderbuffer } from \"../data/Renderbuffer\";\nimport { deleteRenderbuffer, getGLRenderbuffer } from \"./getGLRenderbuffer\";\nimport { _IGLRenderPassDescriptorWithMultisample, GLRenderPassDescriptorWithMultisample } from \"./getGLRenderPassDescriptorWithMultisample\";\nimport { getGLTexture } from \"./getGLTexture\";\nimport { getGLTextureTarget } from \"./getGLTextureTarget\";\n\n/**\n * 获取帧缓冲区\n */\nexport function getGLFramebuffer(gl: WebGLRenderingContext, passDescriptor: RenderPassDescriptor)\n{\n    const view = passDescriptor?.colorAttachments?.[0]?.view || passDescriptor?.depthStencilAttachment?.view;\n    if (!view) return null;\n\n    let webGLFramebuffer = gl._framebuffers.get(passDescriptor);\n    if (webGLFramebuffer) return webGLFramebuffer;\n\n    const sampleCount = passDescriptor.sampleCount;\n\n    webGLFramebuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, webGLFramebuffer);\n    gl._framebuffers.set(passDescriptor, webGLFramebuffer);\n\n    // 处理颜色附件\n    const drawBuffers: number[] = [];\n    passDescriptor.colorAttachments?.forEach((item, i) =>\n    {\n        const view = item.view as (TextureView | Renderbuffer);\n        const attachment = gl[`COLOR_ATTACHMENT${i}`];\n        drawBuffers.push(attachment);\n        if (\"texture\" in view)\n        {\n            const texture = view.texture;\n            const baseMipLevel = view.baseMipLevel || 0;\n            const baseArrayLayer = view.baseArrayLayer || 0;\n\n            const webGLTexture = getGLTexture(gl, texture);\n            const textureTarget = getGLTextureTarget(texture.dimension);\n\n            if (textureTarget === \"TEXTURE_2D\")\n            {\n                gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl[textureTarget], webGLTexture, baseMipLevel);\n            }\n            else if (textureTarget === \"TEXTURE_2D_ARRAY\")\n            {\n                if (gl instanceof WebGL2RenderingContext)\n                {\n                    gl.framebufferTextureLayer(gl.DRAW_FRAMEBUFFER, attachment, webGLTexture, baseMipLevel, baseArrayLayer);\n                }\n            }\n            else\n            {\n                console.error(`未处理 ${textureTarget} 的颜色附件纹理设置！`);\n            }\n        }\n        else\n        {\n            const renderbuffer = getGLRenderbuffer(gl, view, sampleCount);\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, renderbuffer);\n        }\n    });\n\n    if (gl instanceof WebGL2RenderingContext)\n    {\n        gl.drawBuffers(drawBuffers);\n    }\n    else\n    {\n        console.error(`WebGL1 不支持 drawBuffers 。`);\n    }\n\n    // 处理深度模板附件\n    if (passDescriptor.depthStencilAttachment?.view)\n    {\n        const view = passDescriptor.depthStencilAttachment.view;\n\n        const texture = view.texture;\n        const baseMipLevel = view.baseMipLevel || 0;\n        const baseArrayLayer = view.baseArrayLayer || 0;\n\n        const webGLTexture = getGLTexture(gl, texture);\n        const textureTarget = getGLTextureTarget(texture.dimension);\n\n        if (textureTarget === \"TEXTURE_2D\")\n        {\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl[textureTarget], webGLTexture, baseMipLevel);\n        }\n        else if (textureTarget === \"TEXTURE_2D_ARRAY\")\n        {\n            if (gl instanceof WebGL2RenderingContext)\n            {\n                gl.framebufferTextureLayer(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, webGLTexture, baseMipLevel, baseArrayLayer);\n            }\n        }\n        else\n        {\n            console.error(`未处理 ${textureTarget} 的深度模板附件纹理设置！`);\n        }\n    }\n\n    return webGLFramebuffer;\n}\n\n/**\n *\n * @param gl\n * @param passDescriptor\n * @param handleMultisample 处理存在多重采样的渲染通道描述。\n * @returns\n */\nexport function deleteFramebuffer(gl: WebGLRenderingContext, passDescriptor: RenderPassDescriptor, handleMultisample = true)\n{\n    if (handleMultisample && passDescriptor?.[_IGLRenderPassDescriptorWithMultisample])\n    {\n        deleteRenderPassDescriptorWithMultisample(gl, passDescriptor[_IGLRenderPassDescriptorWithMultisample]);\n\n        return;\n    }\n\n    const webGLFramebuffer = gl._framebuffers.get(passDescriptor);\n    gl._framebuffers.delete(passDescriptor);\n    //\n    gl.deleteFramebuffer(webGLFramebuffer);\n}\n\nfunction deleteRenderPassDescriptorWithMultisample(gl: WebGLRenderingContext, renderPassDescriptorWithMultisample: GLRenderPassDescriptorWithMultisample)\n{\n    deleteFramebuffer(gl, renderPassDescriptorWithMultisample.blitFramebuffer.read, false);\n    deleteFramebuffer(gl, renderPassDescriptorWithMultisample.blitFramebuffer.draw, false);\n\n    renderPassDescriptorWithMultisample.renderbuffers.forEach((v) =>\n    {\n        deleteRenderbuffer(gl, v);\n    });\n}","/**\n * WebGL中Uniform类型\n */\nexport type GLUniformType = keyof typeof webGLUniformTypeValue;\n\n/**\n * WebGL中Uniform纹理类型\n */\nexport type GLUniformTextureType = keyof typeof webGLUniformTextureTypeValue;\n\n/**\n * WebGL中Uniform缓冲区类型\n */\nexport type GLUniformBufferType = keyof typeof webGLUniformBufferTypeValue;\n\n/**\n * 获取Unifrom类型名称\n *\n * @param value WebGL中Unifrom类型对应的值。\n * @returns Unifrom类型名称\n */\nexport function getWebGLUniformType(value: number): GLUniformType\n{\n    const result = webGLUniformValueType[value];\n    console.assert(!!result);\n\n    return result;\n}\n\n/**\n * 判断是否为纹理Unifrom类型。\n *\n * @param type Unifrom类型名称\n * @returns 是否为纹理Unifrom类型。\n */\nexport function isWebGLUniformTextureType(type: GLUniformType): boolean\n{\n    return webGLUniformTextureTypeValue[type] !== undefined;\n}\n\n/**\n * WebGL1 缓冲区数据类型。\n */\nconst webGL1UniformBufferTypeValue = { FLOAT: 5126, FLOAT_VEC2: 35664, FLOAT_VEC3: 35665, FLOAT_VEC4: 35666, INT: 5124, INT_VEC2: 35667, INT_VEC3: 35668, INT_VEC4: 35669, BOOL: 35670, BOOL_VEC2: 35671, BOOL_VEC3: 35672, BOOL_VEC4: 35673, FLOAT_MAT2: 35674, FLOAT_MAT3: 35675, FLOAT_MAT4: 35676 };\n/**\n * WebGL1 纹理数据类型。\n */\nconst webGL1UniformTextureTypeValue = { SAMPLER_2D: 35678, SAMPLER_CUBE: 35680 };\n\n/**\n * 仅 WebGL2 缓冲区数据类型。\n */\nconst webGL2OnlyUniformBufferTypeValue = { UNSIGNED_INT: 5125, UNSIGNED_INT_VEC2: 36294, UNSIGNED_INT_VEC3: 36295, UNSIGNED_INT_VEC4: 36296, FLOAT_MAT2x3: 35685, FLOAT_MAT2x4: 35686, FLOAT_MAT3x2: 35687, FLOAT_MAT3x4: 35688, FLOAT_MAT4x2: 35689, FLOAT_MAT4x3: 35690 };\n/**\n * 仅 WebGL2 纹理数据类型。\n */\nconst webGL2OnlyUniformTextureTypeValue = { SAMPLER_3D: 35679, SAMPLER_2D_SHADOW: 35682, SAMPLER_2D_ARRAY: 36289, SAMPLER_2D_ARRAY_SHADOW: 36292, SAMPLER_CUBE_SHADOW: 36293, INT_SAMPLER_2D: 36298, INT_SAMPLER_3D: 36299, INT_SAMPLER_CUBE: 36300, INT_SAMPLER_2D_ARRAY: 36303, UNSIGNED_INT_SAMPLER_2D: 36306, UNSIGNED_INT_SAMPLER_3D: 36307, UNSIGNED_INT_SAMPLER_CUBE: 36308, UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311 };\n\n/**\n * WebGL Uniform 类型与值的映射。\n */\nconst webGLUniformTypeValue = { ...webGL1UniformBufferTypeValue, ...webGL1UniformTextureTypeValue, ...webGL2OnlyUniformBufferTypeValue, ...webGL2OnlyUniformTextureTypeValue };\n\n/**\n * WebGL Uniform 纹理类型与值的映射。\n */\nconst webGLUniformTextureTypeValue = { ...webGL1UniformTextureTypeValue, ...webGL2OnlyUniformTextureTypeValue };\n\n/**\n * WebGL Uniform 缓冲区数据与值的映射。\n */\nconst webGLUniformBufferTypeValue = { ...webGL1UniformBufferTypeValue, ...webGL2OnlyUniformBufferTypeValue };\n\n/**\n * WebGL Uniform 值与类型的映射。\n */\nconst webGLUniformValueType = Object.keys(webGLUniformTypeValue).reduce((pv, cv) =>\n{\n    pv[webGLUniformTypeValue[cv]] = cv;\n\n    return pv;\n}, {});\n","import { BufferBindingInfo, GLVertexAttributeTypes, RenderPipeline } from \"@feng3d/render-api\";\nimport { getWebGLUniformType, GLUniformBufferType, GLUniformType, isWebGLUniformTextureType } from \"../const/GLUniformType\";\nimport { TransformFeedbackPipeline, TransformFeedbackVaryings } from \"../data/TransformFeedbackPass\";\n\ndeclare global\n{\n    export interface WebGLProgram\n    {\n        vertex: string;\n        fragment: string;\n        /**\n         * 属性信息列表\n         */\n        attributes: IGLAttributeInfo[];\n        /**\n         * uniform信息列表\n         */\n        uniforms: GLUniformInfo[];\n\n        /**\n         * 统一变量块信息列表。\n         *\n         * 仅 WebGL2 中存在。\n         */\n        uniformBlocks: UniformBlockInfo[];\n    }\n}\n\nexport interface IGLAttributeInfo\n{\n    /**\n     * 名称。\n     */\n    name: string;\n\n    /**\n     * 顶点尺寸。\n     */\n    size: number;\n\n    /**\n     * 属性缓冲数据类型\n     */\n    type?: GLVertexAttributeTypes;\n\n    /**\n     * 属性地址\n     */\n    location: number;\n}\n\n/**\n * 激活渲染程序\n */\nexport function getGLProgram(gl: WebGLRenderingContext, material: RenderPipeline | TransformFeedbackPipeline)\n{\n    const shaderKey = getKey(material);\n    let result = gl._programs[shaderKey];\n    if (result) return result;\n\n    const vertex = material.vertex.code;\n    const fragment = (material as RenderPipeline).fragment?.code || `#version 300 es\n        precision highp float;\n        precision highp int;\n\n        void main()\n        {\n        }\n    `;\n    const transformFeedbackVaryings = (material as TransformFeedbackPipeline).transformFeedbackVaryings;\n\n    result = getWebGLProgram(gl, vertex, fragment, transformFeedbackVaryings);\n    gl._programs[shaderKey] = result;\n\n    return result;\n}\n\nexport function deleteProgram(gl: WebGLRenderingContext, material: RenderPipeline)\n{\n    const shaderKey = getKey(material);\n    const result = gl._programs[shaderKey];\n    if (result)\n    {\n        delete gl._programs[shaderKey];\n        gl.deleteProgram(result);\n    }\n}\n\nfunction getKey(material: RenderPipeline | TransformFeedbackPipeline)\n{\n    const vertex = material.vertex.code;\n    const fragment = (material as RenderPipeline).fragment?.code;\n    const transformFeedbackVaryings = (material as TransformFeedbackPipeline).transformFeedbackVaryings;\n\n    return `---vertexShader---\\n${vertex}\\n---fragment---\\n${fragment}\\n---feedback---${transformFeedbackVaryings?.varyings.toString()} ${transformFeedbackVaryings?.bufferMode}`;\n}\n\nfunction getWebGLProgram(gl: WebGLRenderingContext, vshader: string, fshader: string, transformFeedbackVaryings: TransformFeedbackVaryings)\n{\n    // 编译顶点着色器\n    const vertexShader = getWebGLShader(gl, \"VERTEX_SHADER\", vshader);\n\n    // 编译片段着色器\n    const fragmentShader = getWebGLShader(gl, \"FRAGMENT_SHADER\", fshader);\n\n    // 创建着色器程序\n    const program = createLinkProgram(gl, vertexShader, fragmentShader, transformFeedbackVaryings);\n\n    // 获取属性信息\n    const numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    const attributes: IGLAttributeInfo[] = [];\n    for (let i = 0; i < numAttributes; i++)\n    {\n        const activeInfo = gl.getActiveAttrib(program, i);\n        const { name, size, type } = activeInfo;\n        const location = gl.getAttribLocation(program, name);\n        const typeString = getGLAttributeType(type as any);\n        attributes.push({ name, size, type: typeString, location });\n    }\n    // 获取uniform信息\n    const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    const uniforms: GLUniformInfo[] = [];\n    let textureID = 0;\n    for (let i = 0; i < numUniforms; i++)\n    {\n        const activeInfo = gl.getActiveUniform(program, i);\n        const { name, size, type } = activeInfo;\n        const typeString = getWebGLUniformType(type);\n        const isTexture = isWebGLUniformTextureType(typeString);\n\n        const reg = /(\\w+)/g;\n\n        const names = [name];\n        if (size > 1)\n        {\n            console.assert(name.substring(name.length - 3) === \"[0]\");\n            const baseName = name.substring(0, name.length - 3);\n            for (let j = 1; j < size; j++)\n            {\n                names[j] = `${baseName}[${j}]`;\n            }\n        }\n\n        const items: UniformItemInfo[] = [];\n        for (let j = 0; j < names.length; j++)\n        {\n            const name = names[j];\n            let result: RegExpExecArray = reg.exec(name);\n            const paths: string[] = [];\n            while (result)\n            {\n                paths.push(result[1]);\n                result = reg.exec(name);\n            }\n            const location = gl.getUniformLocation(program, name);\n\n            if (isTexture)\n            {\n                items.push({ location, paths, textureID });\n                textureID++;\n            }\n            else\n            {\n                items.push({ location, paths, textureID: -1 });\n            }\n        }\n        uniforms[i] = { name, type: typeString, isTexture, items };\n    }\n    if (gl instanceof WebGL2RenderingContext)\n    {\n        const numUniformBlocks = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);\n        const uniformBlockActiveInfos = new Array(numUniformBlocks).fill(0).map((v, i) =>\n        {\n            //\n            gl.uniformBlockBinding(program, i, i);\n            // 获取包含的统一变量列表。\n            const uniformIndices: Uint32Array = gl.getActiveUniformBlockParameter(program, i, gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES);\n            const uniformList: GLUniformInfo[] = [];\n            for (let i = 0; i < uniformIndices.length; i++)\n            {\n                const unifrom = uniforms[uniformIndices[i]];\n                unifrom.inBlock = true;\n                uniformList.push(unifrom);\n            }\n            const name = gl.getActiveUniformBlockName(program, i);\n            //\n            const info: UniformBlockInfo = {\n                name,\n                index: i,\n                dataSize: gl.getActiveUniformBlockParameter(program, i, gl.UNIFORM_BLOCK_DATA_SIZE),\n                uniforms: uniformList,\n                bufferBindingInfo: undefined,\n            };\n\n            //\n            info.bufferBindingInfo = getBufferBindingInfo(info);\n\n            return info;\n        });\n        program.uniformBlocks = uniformBlockActiveInfos;\n    }\n\n    //\n    program.vertex = vshader;\n    program.fragment = fshader;\n    program.attributes = attributes;\n    program.uniforms = uniforms;\n\n    return program;\n}\n\n/**\n * 统一变量块信息。\n */\nexport interface UniformBlockInfo\n{\n    /**\n     * 名称。\n     */\n    name: string;\n\n    /**\n     * 绑定位置。\n     */\n    index: number;\n\n    /**\n     * 数据尺寸。\n     */\n    dataSize: number;\n\n    /**\n     * 包含的统一变量列表。\n     */\n    uniforms: GLUniformInfo[];\n\n    /**\n     * 缓冲区绑定信息。\n     */\n    bufferBindingInfo: BufferBindingInfo;\n}\n\n/**\n * 编译着色器代码\n *\n * @param type 着色器类型\n * @param code 着色器代码\n * @return 编译后的着色器对象\n */\nfunction getWebGLShader(gl: WebGLRenderingContext, type: ShaderType, code: string)\n{\n    let shader = gl._shaders[code];\n    if (shader) return shader;\n\n    shader = gl.createShader(gl[type]);\n    gl._shaders[code] = shader;\n\n    gl.shaderSource(shader, code);\n    gl.compileShader(shader);\n\n    // 检查编译结果\n    const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (!compiled)\n    {\n        const error = gl.getShaderInfoLog(shader);\n        gl.deleteShader(shader);\n        throw `Failed to compile shader: ${error}`;\n    }\n\n    return shader;\n}\n\nfunction createLinkProgram(gl: WebGLRenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, transformFeedbackVaryings: TransformFeedbackVaryings)\n{\n    // 创建程序对象\n    const program = gl.createProgram();\n\n    // 添加着色器\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n\n    if (transformFeedbackVaryings)\n    {\n        if (gl instanceof WebGL2RenderingContext)\n        {\n            gl.transformFeedbackVaryings(program, transformFeedbackVaryings.varyings, gl[transformFeedbackVaryings.bufferMode]);\n        }\n        else\n        {\n            console.error(`WebGL1 不支持 transformFeedbackVaryings 功能！`);\n        }\n    }\n\n    // 链接程序\n    gl.linkProgram(program);\n\n    // 检查结果\n    const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (!linked)\n    {\n        const error = gl.getProgramInfoLog(program);\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n        gl.deleteShader(vertexShader);\n        throw `Failed to link program: ${error}`;\n    }\n\n    return program;\n}\n\n/**\n * Shader type.\n *\n * Either a gl.FRAGMENT_SHADER or a gl.VERTEX_SHADER.\n */\nexport type ShaderType = \"FRAGMENT_SHADER\" | \"VERTEX_SHADER\";\n\nfunction getBufferBindingInfo(uniformBlock: UniformBlockInfo): BufferBindingInfo\n{\n    const size = uniformBlock.dataSize;\n    //\n    let currentSize = 0;\n    let structName: string;\n\n    const items: { paths: string[], offset: number, size: number, Cls: Float32ArrayConstructor | Int32ArrayConstructor | Uint32ArrayConstructor }[] = [];\n    uniformBlock.uniforms.forEach((uniformInfo) =>\n    {\n        const uniformBufferType = uniformInfo.type as GLUniformBufferType;\n        const alignSize = uniformBufferTypeAlignSizeMap[uniformBufferType];\n        console.assert(alignSize, `没有找到 ${uniformBufferType} 统一缓冲类型对应的对齐与尺寸。`);\n\n        //\n        const currentstructName = uniformInfo.name.substring(0, uniformInfo.name.lastIndexOf(\".\"));\n        if (structName !== currentstructName)\n        {\n            currentSize = roundUp(16, currentSize); // 结构体之间对齐\n            structName = currentstructName;\n        }\n\n        //\n        uniformInfo.items.forEach((itemInfo) =>\n        {\n            currentSize = roundUp(alignSize.align, currentSize); // 结构体成员对齐\n            const itemInfoOffset = currentSize;\n            const itemInfoSize = alignSize.size;\n            //\n            currentSize += alignSize.size;\n            const Cls = alignSize.clsType;\n            //\n            const paths = itemInfo.paths.slice(1);\n            //\n            items.push({ paths, offset: itemInfoOffset, size: itemInfoSize, Cls });\n        });\n    });\n    currentSize = roundUp(16, currentSize); // 整个统一块数据对齐\n\n    console.assert(size === currentSize, `uniformBlock映射尺寸出现错误( ${size}  ${currentSize} )！`);\n\n    const bufferBindingInfo: BufferBindingInfo = {\n        size: uniformBlock.dataSize,\n        items,\n    };\n\n    return bufferBindingInfo;\n}\n\nfunction roundUp(k: number, n: number): number\n{\n    return Math.ceil(n / k) * k;\n}\n\n/**\n *\n * @see https://github.com/brendan-duncan/wgsl_reflect/blob/main/src/wgsl_reflect.ts#L1206\n * @see https://www.orillusion.com/zh/wgsl.html#memory-layouts\n */\nconst uniformBufferTypeAlignSizeMap: {\n    [key: string]: {\n        align: number,\n        size: number,\n        clsType: Float32ArrayConstructor | Int32ArrayConstructor | Uint32ArrayConstructor,\n    }\n} = {\n    FLOAT: { align: 4, size: 4, clsType: Float32Array },\n    FLOAT_VEC2: { align: 8, size: 8, clsType: Float32Array },\n    FLOAT_VEC3: { align: 16, size: 12, clsType: Float32Array },\n    FLOAT_VEC4: { align: 16, size: 16, clsType: Float32Array },\n    INT: { align: 4, size: 4, clsType: Int32Array },\n    INT_VEC2: { align: 8, size: 8, clsType: Int32Array },\n    INT_VEC3: { align: 16, size: 12, clsType: Int32Array },\n    INT_VEC4: { align: 16, size: 16, clsType: Int32Array },\n    BOOL: { align: 4, size: 4, clsType: Int32Array },\n    BOOL_VEC2: { align: 8, size: 8, clsType: Int32Array },\n    BOOL_VEC3: { align: 16, size: 12, clsType: Int32Array },\n    BOOL_VEC4: { align: 16, size: 16, clsType: Int32Array },\n    FLOAT_MAT2: { align: 8, size: 16, clsType: Float32Array },\n    FLOAT_MAT3: { align: 16, size: 48, clsType: Float32Array },\n    FLOAT_MAT4: { align: 16, size: 64, clsType: Float32Array },\n    UNSIGNED_INT: { align: 4, size: 4, clsType: Uint32Array },\n    UNSIGNED_INT_VEC2: { align: 8, size: 8, clsType: Uint32Array },\n    UNSIGNED_INT_VEC3: { align: 16, size: 12, clsType: Uint32Array },\n    UNSIGNED_INT_VEC4: { align: 16, size: 16, clsType: Uint32Array },\n    FLOAT_MAT2x3: { align: 16, size: 32, clsType: Float32Array },\n    FLOAT_MAT2x4: { align: 16, size: 32, clsType: Float32Array },\n    FLOAT_MAT3x2: { align: 8, size: 24, clsType: Float32Array },\n    FLOAT_MAT3x4: { align: 16, size: 48, clsType: Float32Array },\n    FLOAT_MAT4x2: { align: 8, size: 32, clsType: Float32Array },\n    FLOAT_MAT4x3: { align: 16, size: 64, clsType: Float32Array },\n};\n\n/**\n * WebGL统一变量\n */\nexport interface GLUniformInfo\n{\n    /**\n     * 名称。\n     */\n    name: string;\n\n    type: GLUniformType;\n\n    /**\n     * 是否纹理。\n     */\n    isTexture: boolean;\n\n    /**\n     * 子项信息列表。\n     */\n    items: UniformItemInfo[]\n\n    /**\n     * 是否在Block中。\n     */\n    inBlock?: boolean;\n}\n\n/**\n * WebGL统一变量\n */\nexport interface UniformItemInfo\n{\n    /**\n     * uniform地址\n     */\n    location: WebGLUniformLocation;\n\n    /**\n     * texture索引\n     */\n    textureID: number;\n\n    /**\n     * Uniform数组索引，当Uniform数据为数组数据时生效\n     */\n    paths: string[];\n}\n\n/**\n * WebGL 属性类型。\n */\nexport type GLAttributeType = keyof typeof webglAttributeTypeValue;\n\n/**\n * 获取顶点数据类型名称。\n *\n * @param gl\n * @param value\n */\nexport function getGLAttributeType(value: keyof typeof webglAttributeValueType): GLAttributeType\n{\n    return webglAttributeValueType[value];\n}\n\nconst webglAttributeTypeValue = Object.freeze({ FLOAT: 5126, BYTE: 5120, SHORT: 5122, UNSIGNED_BYTE: 5121, UNSIGNED_SHORT: 5123, HALF_FLOAT: 5131, INT: 5124, UNSIGNED_INT: 5125 });\nconst webglAttributeValueType = Object.freeze({ 5120: \"BYTE\", 5121: \"UNSIGNED_BYTE\", 5122: \"SHORT\", 5123: \"UNSIGNED_SHORT\", 5124: \"INT\", 5125: \"UNSIGNED_INT\", 5126: \"FLOAT\", 5131: \"HALF_FLOAT\" });\n","import { RenderPassObject, OcclusionQuery, RenderPass } from \"@feng3d/render-api\";\n\nimport \"../data/polyfills/OcclusionQuery\";\n\nexport function getGLRenderOcclusionQuery(gl: WebGLRenderingContext, renderObjects?: readonly RenderPassObject[])\n{\n    if (!renderObjects) return defautRenderOcclusionQuery;\n    if (!(gl instanceof WebGL2RenderingContext)) return defautRenderOcclusionQuery;\n    let renderOcclusionQuery: GLRenderOcclusionQuery = renderObjects[\"_GLRenderOcclusionQuery\"];\n    if (renderOcclusionQuery) return renderOcclusionQuery;\n\n    const occlusionQueryObjects: OcclusionQuery[] = renderObjects.filter((cv) => cv.__type__ === \"OcclusionQuery\") as any;\n    if (occlusionQueryObjects.length === 0)\n    {\n        renderObjects[\"_GLRenderOcclusionQuery\"] = defautRenderOcclusionQuery;\n\n        return defautRenderOcclusionQuery;\n    }\n\n    /**\n     * 初始化。\n     */\n    const init = () =>\n    {\n        occlusionQueryObjects.forEach((v, i) =>\n        {\n            v._step = getGLOcclusionQueryStep(gl, v);\n        });\n    };\n\n    /**\n     * 查询结果。\n     */\n    const resolve = (renderPass: RenderPass) =>\n    {\n        const results = occlusionQueryObjects.map((v) => v._step.resolve());\n\n        Promise.all(results).then((v) =>\n        {\n            renderPass.onOcclusionQuery?.(occlusionQueryObjects, v);\n        });\n    };\n\n    renderObjects[\"_GLRenderOcclusionQuery\"] = renderOcclusionQuery = { init, resolve };\n\n    return renderOcclusionQuery;\n}\n\ninterface GLRenderOcclusionQuery\n{\n    init: () => void\n    resolve: (renderPass: RenderPass) => void\n}\n\nconst defautRenderOcclusionQuery = { init: () => { }, resolve: () => { } };\n\nexport function getGLOcclusionQueryStep(gl: WebGL2RenderingContext, occlusionQuery: OcclusionQuery)\n{\n    const query: { result?: number } = {};\n    let webGLQuery: WebGLQuery;\n\n    // 开始查询\n    const begin = () =>\n    {\n        webGLQuery = gl.createQuery();\n\n        gl.beginQuery(gl.ANY_SAMPLES_PASSED, webGLQuery);\n    };\n\n    const end = () =>\n    {\n        // 结束查询\n        gl.endQuery(gl.ANY_SAMPLES_PASSED);\n    };\n\n    /**\n     * 获取查询结果。\n     */\n    const resolve = async () =>\n    {\n        if (query.result !== undefined) return query.result;\n\n        if (gl instanceof WebGL2RenderingContext)\n        {\n            const result: number = await new Promise((resolve, reject) =>\n            {\n                (function tick()\n                {\n                    if (!gl.getQueryParameter(webGLQuery, gl.QUERY_RESULT_AVAILABLE))\n                    {\n                        // A query's result is never available in the same frame\n                        // the query was issued.  Try in the next frame.\n                        requestAnimationFrame(tick);\n\n                        return;\n                    }\n\n                    const result = query.result = gl.getQueryParameter(webGLQuery, gl.QUERY_RESULT) as number;\n\n                    occlusionQuery.onQuery(result);\n\n                    resolve(result);\n\n                    gl.deleteQuery(webGLQuery);\n                })();\n            });\n\n            return result;\n        }\n\n        return undefined;\n    };\n\n    return { begin, end, resolve } as GLOcclusionQueryStep;\n}\n\n/**\n * 不被遮挡查询步骤。\n */\nexport interface GLOcclusionQueryStep\n{\n    /**\n     * 开始查询\n     */\n    begin: () => void;\n\n    /**\n     * 结束查询\n     */\n    end: () => void;\n\n    /**\n     * 获取查询结果，将获取被赋值新结果的遮挡查询对象。\n     */\n    resolve: () => Promise<number>\n}","import { CompareFunction } from \"@feng3d/render-api\";\n\nexport function getIGLCompareFunction(depthCompare: CompareFunction)\n{\n    const glDepthCompare: GLCompareFunction = depthCompareMap[depthCompare];\n\n    console.assert(!!glDepthCompare, `接收到错误值，请从 ${Object.keys(depthCompareMap).toString()} 中取值！`);\n\n    return glDepthCompare;\n}\n\nconst depthCompareMap: { [key: string]: GLCompareFunction } = {\n    never: \"NEVER\",\n    less: \"LESS\",\n    equal: \"EQUAL\",\n    \"less-equal\": \"LEQUAL\",\n    greater: \"GREATER\",\n    \"not-equal\": \"NOTEQUAL\",\n    \"greater-equal\": \"GEQUAL\",\n    always: \"ALWAYS\",\n};\n\n/**\n * 指定深度比较函数的枚举，该函数设置绘制像素的条件，默认 LESS，如果传入值小于深度缓冲区值则通过。\n *\n * A GLenum specifying the depth comparison function, which sets the conditions under which the pixel will be drawn. The default value is gl.LESS.\n *\n * * `NEVER` 总是不通过。\n * * `LESS` 如果传入值小于深度缓冲区值则通过。\n * * `EQUAL` 如果传入值等于深度缓冲区值则通过。\n * * `LEQUAL` 如果传入值小于或等于深度缓冲区值则通过。\n * * `GREATER` 如果传入值大于深度缓冲区值则通过。\n * * `NOTEQUAL` 如果传入值不等于深度缓冲区值则通过。\n * * `GEQUAL` 如果传入值大于或等于深度缓冲区值则通过。\n * * `ALWAYS` 总是通过。\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthFunc\n */\nexport type GLCompareFunction = \"NEVER\" | \"LESS\" | \"EQUAL\" | \"LEQUAL\" | \"GREATER\" | \"NOTEQUAL\" | \"GEQUAL\" | \"ALWAYS\";\n","import { IAddressMode, IFilterMode, Sampler } from \"@feng3d/render-api\";\nimport { getIGLCompareFunction } from \"../runs/runDepthState\";\n\nexport type GLSamplerCompareMode = \"NONE\" | \"COMPARE_REF_TO_TEXTURE\";\n\nexport function getGLSampler(gl: WebGLRenderingContext, sampler?: Sampler)\n{\n    let webGLSampler = gl._samplers.get(sampler);\n    if (webGLSampler) return webGLSampler;\n\n    if (gl instanceof WebGL2RenderingContext)\n    {\n        webGLSampler = gl.createSampler();\n        gl._samplers.set(sampler, webGLSampler);\n\n        const minFilter: GLTextureMinFilter = getIGLTextureMinFilter(sampler.minFilter, sampler.mipmapFilter);\n        const magFilter: GLTextureMagFilter = getIGLTextureMagFilter(sampler.magFilter);\n        const wrapS: GLTextureWrap = getIGLTextureWrap(sampler.addressModeU);\n        const wrapT: GLTextureWrap = getIGLTextureWrap(sampler.addressModeV);\n        const wrapR: GLTextureWrap = getIGLTextureWrap(sampler.addressModeW);\n        const lodMinClamp = sampler.lodMinClamp || 0;\n        const lodMaxClamp = sampler.lodMaxClamp || 16;\n        const compareMode: GLSamplerCompareMode = sampler.compare ? \"COMPARE_REF_TO_TEXTURE\" : \"NONE\";\n        const compare = getIGLCompareFunction(sampler.compare ?? \"less-equal\");\n\n        //\n        gl.samplerParameteri(webGLSampler, gl.TEXTURE_MIN_FILTER, gl[minFilter]);\n        gl.samplerParameteri(webGLSampler, gl.TEXTURE_MAG_FILTER, gl[magFilter]);\n        gl.samplerParameteri(webGLSampler, gl.TEXTURE_WRAP_S, gl[wrapS]);\n        gl.samplerParameteri(webGLSampler, gl.TEXTURE_WRAP_T, gl[wrapT]);\n        gl.samplerParameteri(webGLSampler, gl.TEXTURE_WRAP_R, gl[wrapR]);\n        gl.samplerParameterf(webGLSampler, gl.TEXTURE_MIN_LOD, lodMinClamp);\n        gl.samplerParameterf(webGLSampler, gl.TEXTURE_MAX_LOD, lodMaxClamp);\n        gl.samplerParameteri(webGLSampler, gl.TEXTURE_COMPARE_MODE, gl[compareMode]);\n        gl.samplerParameteri(webGLSampler, gl.TEXTURE_COMPARE_FUNC, gl[compare]);\n    }\n\n    return webGLSampler;\n}\n\nexport function deleteSampler(gl: WebGLRenderingContext, sampler?: Sampler)\n{\n    if (gl instanceof WebGL2RenderingContext)\n    {\n        const webGLSampler = gl._samplers.get(sampler);\n        gl._samplers.delete(sampler);\n        gl.deleteSampler(webGLSampler);\n    }\n}\n\n/**\n * 纹理坐标s包装函数枚举\n * Wrapping function for texture coordinate s\n *\n * * `REPEAT`\n * * `CLAMP_TO_EDGE`\n * * `MIRRORED_REPEAT`\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter\n */\nexport type GLTextureWrap = \"REPEAT\" | \"CLAMP_TO_EDGE\" | \"MIRRORED_REPEAT\";\n\nexport function getIGLTextureWrap(addressMode: IAddressMode = \"repeat\")\n{\n    const textureWrap: GLTextureWrap = addressModeMap[addressMode];\n\n    console.assert(!!textureWrap, `接收到错误值，请从 ${Object.keys(addressModeMap).toString()} 中取值！`);\n\n    return textureWrap;\n}\n\nconst addressModeMap: { [key: string]: GLTextureWrap } = {\n    \"clamp-to-edge\": \"CLAMP_TO_EDGE\",\n    repeat: \"REPEAT\",\n    \"mirror-repeat\": \"MIRRORED_REPEAT\",\n};\n\n/**\n * 纹理缩小过滤器\n * Texture minification filter\n *\n * * `LINEAR`\n * * `NEAREST`\n * * `NEAREST_MIPMAP_NEAREST`\n * * `LINEAR_MIPMAP_NEAREST`\n * * `NEAREST_MIPMAP_LINEAR`\n * * `LINEAR_MIPMAP_LINEAR`\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter\n */\nexport type GLTextureMinFilter = \"LINEAR\" | \"NEAREST\" | \"NEAREST_MIPMAP_NEAREST\" | \"LINEAR_MIPMAP_NEAREST\" | \"NEAREST_MIPMAP_LINEAR\" | \"LINEAR_MIPMAP_LINEAR\";\n\nexport function getIGLTextureMinFilter(minFilter: IFilterMode = \"nearest\", mipmapFilter?: IFilterMode): GLTextureMinFilter\n{\n    let glMinFilter: GLTextureMinFilter;\n    if (minFilter === \"linear\")\n    {\n        if (mipmapFilter === \"linear\")\n        {\n            glMinFilter = \"LINEAR_MIPMAP_LINEAR\";\n        }\n        else if (mipmapFilter === \"nearest\")\n        {\n            glMinFilter = \"LINEAR_MIPMAP_NEAREST\";\n        }\n        else\n        {\n            glMinFilter = \"LINEAR\";\n        }\n    }\n    else\n    {\n        if (mipmapFilter === \"linear\")\n        {\n            glMinFilter = \"NEAREST_MIPMAP_LINEAR\";\n        }\n        else if (mipmapFilter === \"nearest\")\n        {\n            glMinFilter = \"NEAREST_MIPMAP_NEAREST\";\n        }\n        else\n        {\n            glMinFilter = \"NEAREST\";\n        }\n    }\n\n    return glMinFilter;\n}\n/**\n * 纹理放大滤波器\n * Texture magnification filter\n *\n * * `LINEAR`\n * * `NEAREST`\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter\n */\nexport type GLTextureMagFilter = \"LINEAR\" | \"NEAREST\";\n\nexport function getIGLTextureMagFilter(magFilter: IFilterMode = \"nearest\")\n{\n    const glMagFilter: GLTextureMagFilter = magFilterMap[magFilter];\n\n    console.assert(!!glMagFilter, `接收到错误值，请从 ${Object.keys(magFilterMap).toString()} 中取值！`);\n\n    return glMagFilter;\n}\n\nconst magFilterMap: { [key: string]: GLTextureMagFilter } = {\n    nearest: \"NEAREST\",\n    linear: \"LINEAR\",\n};","import { TransformFeedback } from \"../data/TransformFeedbackPass\";\nimport { getIGLBuffer } from \"../runs/getIGLBuffer\";\nimport { getGLBuffer } from \"./getGLBuffer\";\n\nexport function getGLTransformFeedback(gl: WebGLRenderingContext, transformFeedback: TransformFeedback)\n{\n    let webGLTransformFeedback = gl._transforms.get(transformFeedback);\n    if (webGLTransformFeedback) return webGLTransformFeedback;\n\n    if (gl instanceof WebGL2RenderingContext)\n    {\n        webGLTransformFeedback = gl.createTransformFeedback();\n        gl._transforms.set(transformFeedback, webGLTransformFeedback);\n\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, webGLTransformFeedback);\n        transformFeedback.bindBuffers.forEach((v) =>\n        {\n            const { index, data } = v;\n            const buffer = getIGLBuffer(data, \"ARRAY_BUFFER\", \"STREAM_COPY\");\n\n            const webGLBuffer = getGLBuffer(gl, buffer);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, index, webGLBuffer);\n        });\n\n        // 移除可能绑定在GL上的回写数据缓冲区\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    }\n\n    return webGLTransformFeedback;\n}\n\nexport function deleteTransformFeedback(gl: WebGLRenderingContext, transformFeedback: TransformFeedback)\n{\n    const webGLTransformFeedback = gl._transforms.get(transformFeedback);\n    if (!webGLTransformFeedback) return;\n\n    gl._transforms.delete(transformFeedback);\n    if (gl instanceof WebGL2RenderingContext)\n    {\n        gl.deleteTransformFeedback(webGLTransformFeedback);\n    }\n}\n","/**\n * 用于标记 GL 提交次数。更改时触发回调。\n */\nexport const _GL_Submit_Times = \"_GL_Submit_Times\";","import { CompareFunction, StencilOperation } from \"@feng3d/render-api\";\n\nexport function getIGLStencilFunc(compare: CompareFunction)\n{\n    const stencilFunc: GLStencilFunc = compareMap[compare];\n\n    return stencilFunc;\n}\n\nconst compareMap: { [key: string]: GLStencilFunc } = {\n    never: \"NEVER\",\n    less: \"LESS\",\n    equal: \"EQUAL\",\n    \"less-equal\": \"LEQUAL\",\n    greater: \"GREATER\",\n    \"not-equal\": \"NOTEQUAL\",\n    \"greater-equal\": \"GEQUAL\",\n    always: \"ALWAYS\",\n};\n\n/**\n * A GLenum specifying the test function. The default function is gl.ALWAYS.\n *\n * * `NEVER` 总是不通过。\n * * `LESS` 如果 (ref & mask) <  (stencil & mask) 则通过。\n * * `EQUAL` 如果 (ref & mask) = (stencil & mask) 则通过。\n * * `LEQUAL` 如果 (ref & mask) <= (stencil & mask) 则通过。\n * * `GREATER` 如果 (ref & mask) > (stencil & mask) 则通过。\n * * `NOTEQUAL` 如果 (ref & mask) != (stencil & mask) 则通过。\n * * `GEQUAL` 如果 (ref & mask) >= (stencil & mask) 则通过。\n * * `ALWAYS` 总是通过。\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilFunc\n */\nexport type GLStencilFunc = \"NEVER\" | \"LESS\" | \"EQUAL\" | \"LEQUAL\" | \"GREATER\" | \"NOTEQUAL\" | \"GEQUAL\" | \"ALWAYS\";\n\nexport function getIGLStencilOp(stencilOperation?: StencilOperation)\n{\n    const glStencilOp: GLStencilOp = stencilOperationMap[stencilOperation];\n\n    return glStencilOp;\n}\nconst stencilOperationMap: { [key: string]: GLStencilOp } = {\n    keep: \"KEEP\",\n    zero: \"ZERO\",\n    replace: \"REPLACE\",\n    invert: \"INVERT\",\n    \"increment-clamp\": \"INCR\",\n    \"decrement-clamp\": \"DECR\",\n    \"increment-wrap\": \"INCR_WRAP\",\n    \"decrement-wrap\": \"DECR_WRAP\",\n};\n\n/**\n * The WebGLRenderingContext.stencilOp() method of the WebGL API sets both the front and back-facing stencil test actions.\n *\n * * `KEEP` 保持当前值。\n * * `ZERO` 设置模板缓冲值为0\n * * `REPLACE` 将模板缓冲区的值设置为WebGLRenderingContext.stencilFunc()指定的参考值。\n * * `INCR` 增加当前模板缓冲区的值。最大到可表示的无符号值的最大值。\n * * `INCR_WRAP` 增加当前模板缓冲区的值。当增加最大的可表示无符号值时，将模板缓冲区值包装为零。\n * * `DECR` 递减当前模板缓冲区的值。最小为0。\n * * `DECR_WRAP` 递减当前模板缓冲区的值。当模板缓冲区值减为0时，将模板缓冲区值包装为可表示的最大无符号值。\n * * `INVERT` 按位反转当前模板缓冲区值。\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilOp\n */\nexport type GLStencilOp = \"KEEP\" | \"ZERO\" | \"REPLACE\" | \"INCR\" | \"INCR_WRAP\" | \"DECR\" | \"DECR_WRAP\" | \"INVERT\";\n","import { Buffer, BufferBinding, BufferBindingInfo, UnReadonly } from \"@feng3d/render-api\";\nimport { watcher } from \"@feng3d/watcher\";\nimport { getIGLBuffer } from \"../runs/getIGLBuffer\";\n\n/**\n *\n * @param uniformBlock\n * @param uniformData\n *\n * @see https://learnopengl-cn.readthedocs.io/zh/latest/04%20Advanced%20OpenGL/08%20Advanced%20GLSL/#uniform_1\n */\n// 在文件顶部添加Map声明\nconst bufferBindingInfoMap = new WeakMap<BufferBinding, BufferBindingInfo>();\n\nexport function updateBufferBinding(bufferBindingInfo: BufferBindingInfo, uniformData: BufferBinding)\n{\n    // 使用Map替代属性访问\n    if (bufferBindingInfoMap.has(uniformData))\n    {\n        const preVariableInfo = bufferBindingInfoMap.get(uniformData);\n        if (preVariableInfo.size !== bufferBindingInfo.size)\n        {\n            console.warn(`updateBufferBinding 出现一份数据对应多个 variableInfo`, { uniformData, bufferBindingInfo, preVariableInfo });\n        }\n\nreturn;\n    }\n\n    // 使用Map存储数据\n    bufferBindingInfoMap.set(uniformData, bufferBindingInfo);\n\n    const size = bufferBindingInfo.size;\n    // 是否存在默认值。\n    const hasDefautValue = !!uniformData.bufferView;\n    if (!hasDefautValue)\n    {\n        (uniformData as UnReadonly<BufferBinding>).bufferView = new Uint8Array(size);\n    }\n    else\n    {\n        console.assert(uniformData.bufferView.byteLength === size, `uniformData.bufferView 统一块数据提供数据尺寸不对！`);\n    }\n\n    //\n    const buffer = getIGLBuffer(uniformData.bufferView);\n    const offset = uniformData.bufferView.byteOffset;\n\n    //\n    bufferBindingInfo.items.forEach((v) =>\n    {\n        const { paths, offset: itemInfoOffset, size: itemInfoSize, Cls } = v;\n        const update = () =>\n        {\n            let value: any = uniformData;\n            for (let i = 0; i < paths.length; i++)\n            {\n                value = value[paths[i]];\n                if (value === undefined)\n                {\n                    if (!hasDefautValue)\n                    {\n                        console.warn(`没有找到 统一块变量属性 ${paths.join(\".\")} 的值！`);\n                    }\n\n                    return;\n                }\n            }\n\n            let data: Int16Array | Int32Array | Uint32Array | Float32Array;\n            if (typeof value === \"number\")\n            {\n                data = new Cls([value]);\n            }\n            else if (value.constructor.name !== Cls.name)\n            {\n                data = new Cls(value as ArrayLike<number>);\n            }\n            else\n            {\n                data = value as any;\n            }\n\n            const writeBuffers = buffer.writeBuffers ?? [];\n            writeBuffers.push({ data: data.buffer, bufferOffset: offset + itemInfoOffset, size: Math.min(itemInfoSize, data.byteLength) });\n            (buffer as UnReadonly<Buffer>).writeBuffers = writeBuffers;\n        };\n\n        update();\n        watcher.watchchain(uniformData, paths.join(\".\"), update, undefined, false);\n    });\n}\n","import { BindingResources, BlendComponent, BlendState, Buffer, BufferBinding, ColorTargetState, CommandEncoder, CopyBufferToBuffer, CopyTextureToTexture, CullFace, DepthStencilState, DrawIndexed, DrawVertex, FrontFace, IndicesDataTypes, OcclusionQuery, PrimitiveState, RenderObject, RenderPass, RenderPassDescriptor, RenderPassObject, RenderPipeline, Sampler, ScissorRect, Submit, TextureView, TypedArray, UnReadonly, VertexAttribute, VertexAttributes, vertexFormatMap, Viewport } from \"@feng3d/render-api\";\n\nimport { getGLBlitFramebuffer } from \"./caches/getGLBlitFramebuffer\";\nimport { getGLBuffer } from \"./caches/getGLBuffer\";\nimport { getGLDrawMode, GLDrawMode } from \"./caches/getGLDrawMode\";\nimport { getGLFramebuffer } from \"./caches/getGLFramebuffer\";\nimport { getGLProgram, UniformItemInfo } from \"./caches/getGLProgram\";\nimport { getGLRenderOcclusionQuery } from \"./caches/getGLRenderOcclusionQuery\";\nimport { getGLRenderPassDescriptorWithMultisample } from \"./caches/getGLRenderPassDescriptorWithMultisample\";\nimport { getGLSampler, getIGLTextureMagFilter, getIGLTextureMinFilter, getIGLTextureWrap, GLTextureMagFilter, GLTextureMinFilter, GLTextureWrap } from \"./caches/getGLSampler\";\nimport { getGLTextureTarget, GLTextureTarget } from \"./caches/getGLTextureTarget\";\nimport { getGLTransformFeedback } from \"./caches/getGLTransformFeedback\";\nimport { _GL_Submit_Times } from \"./const/const\";\nimport { GLUniformBufferType } from \"./const/GLUniformType\";\nimport { BlitFramebuffer } from \"./data/BlitFramebuffer\";\nimport { DrawElementType } from \"./data/polyfills/Buffer\";\nimport { SamplerTexture } from \"./data/SamplerTexture\";\nimport { TransformFeedback, TransformFeedbackObject, TransformFeedbackPass, TransformFeedbackPipeline } from \"./data/TransformFeedbackPass\";\nimport { getGLTexture } from \"./internal\";\nimport { getIGLBuffer } from \"./runs/getIGLBuffer\";\nimport { getIGLBlendEquation, getIGLBlendFactor, IGLBlendEquation, IGLBlendFactor } from \"./runs/runColorTargetStates\";\nimport { getIGLCompareFunction } from \"./runs/runDepthState\";\nimport { getIGLStencilFunc, getIGLStencilOp } from \"./runs/runStencilState\";\nimport { updateBufferBinding } from \"./utils/updateBufferBinding\";\n\nimport \"./data/polyfills/OcclusionQuery\";\n\ndeclare global\n{\n    interface WebGLTexture\n    {\n        minFilter?: GLTextureMinFilter,\n        magFilter?: GLTextureMagFilter,\n        wrapS?: GLTextureWrap,\n        wrapT?: GLTextureWrap,\n        wrapR?: GLTextureWrap,\n        maxAnisotropy?: number,\n        lodMinClamp?: number;\n        lodMaxClamp?: number;\n    }\n}\n\nexport class RunWebGL\n{\n    runSubmit(gl: WebGLRenderingContext, submit: Submit)\n    {\n        const commandBuffers = submit.commandEncoders.map((v) =>\n        {\n            const commandBuffer = this.runCommandEncoder(gl, v);\n\n            return commandBuffer;\n        });\n\n        // 派发提交WebGPU事件\n        gl[_GL_Submit_Times] = ~~gl[_GL_Submit_Times] + 1;\n    }\n\n    protected runCommandEncoder(gl: WebGLRenderingContext, commandEncoder: CommandEncoder)\n    {\n        commandEncoder.passEncoders.forEach((passEncoder) =>\n        {\n            if (!passEncoder.__type__)\n            {\n                this.runRenderPass(gl, passEncoder as RenderPass);\n            }\n            else if (passEncoder.__type__ === \"RenderPass\")\n            {\n                this.runRenderPass(gl, passEncoder);\n            }\n            else if (passEncoder.__type__ === \"TransformFeedbackPass\")\n            {\n                this.runTransformFeedbackPass(gl, passEncoder);\n            }\n            else if (passEncoder.__type__ === \"BlitFramebuffer\")\n            {\n                this.runBlitFramebuffer(gl, passEncoder);\n            }\n            else if (passEncoder.__type__ === \"CopyTextureToTexture\")\n            {\n                this.runCopyTextureToTexture(gl, passEncoder);\n            }\n            else if (passEncoder.__type__ === \"CopyBufferToBuffer\")\n            {\n                this.runCopyBuffer(gl, passEncoder);\n            }\n            else\n            {\n                console.error(`未处理 passEncoder ${passEncoder}`);\n            }\n        });\n    }\n\n    protected runTransformFeedbackPass(gl: WebGLRenderingContext, transformFeedbackPass: TransformFeedbackPass)\n    {\n        // 执行变换反馈通道时关闭光栅化功能\n        if (gl instanceof WebGL2RenderingContext)\n        {\n            gl.enable(gl.RASTERIZER_DISCARD);\n        }\n        transformFeedbackPass.transformFeedbackObjects.forEach((transformFeedbackObject) =>\n        {\n            this.runTransformFeedbackObject(gl, transformFeedbackObject);\n        });\n        if (gl instanceof WebGL2RenderingContext)\n        {\n            gl.disable(gl.RASTERIZER_DISCARD);\n        }\n    }\n\n    protected runRenderPass(gl: WebGLRenderingContext, renderPass: RenderPass)\n    {\n        // 获取附件尺寸\n        const attachmentSize = getGLRenderPassAttachmentSize(gl, renderPass.descriptor);\n\n        // 处理不被遮挡查询\n        const occlusionQuery = getGLRenderOcclusionQuery(gl, renderPass.renderPassObjects);\n        //\n        occlusionQuery.init();\n\n        if (renderPass.descriptor?.sampleCount && (renderPass.descriptor.colorAttachments[0].view as TextureView).texture)\n        {\n            const { passDescriptor, blitFramebuffer } = getGLRenderPassDescriptorWithMultisample(renderPass.descriptor);\n\n            this.runRenderPassDescriptor(gl, passDescriptor);\n\n            this.runRenderObjects(gl, attachmentSize, renderPass.renderPassObjects);\n\n            this.runBlitFramebuffer(gl, blitFramebuffer);\n        }\n        else\n        {\n            this.runRenderPassDescriptor(gl, renderPass.descriptor);\n\n            this.runRenderObjects(gl, attachmentSize, renderPass.renderPassObjects);\n        }\n\n        occlusionQuery.resolve(renderPass);\n    }\n\n    private runRenderPassDescriptor(gl: WebGLRenderingContext, passDescriptor: RenderPassDescriptor)\n    {\n        passDescriptor = passDescriptor || {};\n\n        //\n        const framebuffer = getGLFramebuffer(gl, passDescriptor);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n        //\n        const colorAttachment = passDescriptor.colorAttachments?.[0];\n        //\n        const clearValue = colorAttachment?.clearValue ?? [0, 0, 0, 0];\n        const loadOp = colorAttachment?.loadOp ?? \"clear\";\n        gl.clearColor(clearValue[0], clearValue[1], clearValue[2], clearValue[3]);\n\n        //\n        const depthStencilAttachment = passDescriptor.depthStencilAttachment;\n        const depthClearValue = depthStencilAttachment?.depthClearValue ?? 1;\n        const depthLoadOp = depthStencilAttachment?.depthLoadOp ?? \"load\";\n        const stencilClearValue = depthStencilAttachment?.stencilClearValue ?? 0;\n        const stencilLoadOp = depthStencilAttachment?.stencilLoadOp ?? \"load\";\n\n        //\n        gl.clearDepth(depthClearValue);\n        gl.clearStencil(stencilClearValue);\n\n        //\n        gl.clear((loadOp === \"clear\" ? gl.COLOR_BUFFER_BIT : 0)\n            | (depthLoadOp === \"clear\" ? gl.DEPTH_BUFFER_BIT : 0)\n            | (stencilLoadOp === \"clear\" ? gl.STENCIL_BUFFER_BIT : 0)\n        );\n    }\n\n    private runRenderObjects(gl: WebGLRenderingContext, attachmentSize: { width: number, height: number }, renderObjects?: readonly RenderPassObject[])\n    {\n        renderObjects?.forEach((renderObject) =>\n        {\n            if (renderObject.__type__ === \"OcclusionQuery\")\n            {\n                this.runOcclusionQuery(gl, attachmentSize, renderObject);\n            }\n            else\n            {\n                this.runRenderObject(gl, attachmentSize, renderObject);\n            }\n        });\n    }\n\n    private runRenderObject(gl: WebGLRenderingContext, attachmentSize: { width: number, height: number }, renderObject: RenderObject)\n    {\n        const { viewport, scissorRect, pipeline, vertices, indices, draw, bindingResources: uniforms } = renderObject;\n        const primitive = pipeline?.primitive;\n\n        this.runViewPort(gl, attachmentSize, viewport);\n\n        this.runScissor(gl, attachmentSize, scissorRect);\n\n        this.runRenderPipeline(gl, pipeline);\n\n        this.runUniforms(gl, pipeline, uniforms);\n\n        this.runVertexArray(gl, pipeline, vertices, indices);\n\n        this.runPrimitiveState(gl, primitive);\n\n        const topology = primitive?.topology || \"triangle-list\";\n        const drawMode = getGLDrawMode(topology);\n\n        if (draw.__type__ === \"DrawVertex\")\n        {\n            this.runDrawVertex(gl, drawMode, draw);\n        }\n        else\n        {\n            this.runDrawIndexed(gl, drawMode, indices, draw);\n        }\n    }\n\n    private runTransformFeedbackObject(gl: WebGLRenderingContext, renderObject: TransformFeedbackObject)\n    {\n        const { pipeline: material, vertices, uniforms, transformFeedback, draw } = renderObject;\n\n        const drawMode = getGLDrawMode(\"point-list\");\n\n        this.runTransformFeedbackPipeline(gl, material);\n\n        this.runVertexArray(gl, material, vertices, undefined);\n\n        this.runUniforms(gl, material, uniforms);\n\n        this.runTransformFeedback(gl, transformFeedback, drawMode);\n\n        this.runDrawVertex(gl, drawMode, draw);\n\n        this.endTransformFeedback(gl, transformFeedback);\n    }\n\n    private endTransformFeedback(gl: WebGLRenderingContext, transformFeedback: TransformFeedback)\n    {\n        //\n        if (transformFeedback)\n        {\n            if (gl instanceof WebGL2RenderingContext)\n            {\n                gl.endTransformFeedback();\n                gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n                gl.bindBuffer(gl.ARRAY_BUFFER, null);\n                gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, null);\n            }\n        }\n    }\n\n    private runDrawIndexed(gl: WebGLRenderingContext, drawMode: GLDrawMode, indices: IndicesDataTypes, drawIndexed: DrawIndexed)\n    {\n        const type: DrawElementType = indices.BYTES_PER_ELEMENT === 2 ? \"UNSIGNED_SHORT\" : \"UNSIGNED_INT\";\n        //\n        const indexCount = drawIndexed.indexCount;\n        const firstIndex = drawIndexed.firstIndex || 0;\n        const instanceCount = drawIndexed.instanceCount || 1;\n        //\n        const offset = firstIndex * indices.BYTES_PER_ELEMENT;\n\n        //\n        if (instanceCount > 1)\n        {\n            if (gl instanceof WebGL2RenderingContext)\n            {\n                gl.drawElementsInstanced(gl[drawMode], indexCount, gl[type], offset, instanceCount);\n            }\n            else\n            {\n                const extension = gl.getExtension(\"ANGLE_instanced_arrays\");\n                extension.drawElementsInstancedANGLE(gl[drawMode], indexCount, gl[type], offset, instanceCount);\n            }\n        }\n        else\n        {\n            gl.drawElements(gl[drawMode], indexCount, gl[type], offset);\n        }\n    }\n\n    private runDrawVertex(gl: WebGLRenderingContext, drawMode: GLDrawMode, drawArrays: DrawVertex)\n    {\n        //\n        const vertexCount = drawArrays.vertexCount;\n        const firstVertex = drawArrays.firstVertex || 0;\n        const instanceCount = drawArrays.instanceCount || 1;\n\n        if (instanceCount > 1)\n        {\n            if (gl instanceof WebGL2RenderingContext)\n            {\n                gl.drawArraysInstanced(gl[drawMode], firstVertex, vertexCount, instanceCount);\n            }\n            else\n            {\n                const extension = gl.getExtension(\"ANGLE_instanced_arrays\");\n                extension.drawArraysInstancedANGLE(gl[drawMode], firstVertex, vertexCount, instanceCount);\n            }\n        }\n        else\n        {\n            gl.drawArrays(gl[drawMode], firstVertex, vertexCount);\n        }\n    }\n\n    /**\n     * 激活常量\n     */\n    private runUniforms(gl: WebGLRenderingContext, material: RenderPipeline, uniforms: BindingResources)\n    {\n        const webGLProgram = getGLProgram(gl, material);\n\n        webGLProgram.uniforms.forEach((uniformInfo) =>\n        {\n            const { name, type, items, isTexture, inBlock } = uniformInfo;\n            if (inBlock) return;\n\n            items.forEach((v) =>\n            {\n                const { paths } = v;\n\n                let uniformData = uniforms[paths[0]];\n                for (let i = 1; i < paths.length; i++)\n                {\n                    uniformData = uniformData[paths[i]];\n                }\n                if (uniformData === undefined)\n                {\n                    console.error(`沒有找到Uniform ${name} 數據！`);\n                }\n\n                if (isTexture)\n                {\n                    this.runSamplerTexture(gl, v, uniformData as SamplerTexture);\n                }\n                else\n                {\n                    this.runUniform(gl, type as GLUniformBufferType, v, uniformData);\n                }\n            });\n        });\n\n        if (gl instanceof WebGL2RenderingContext)\n        {\n            webGLProgram.uniformBlocks.forEach((uniformBlock) =>\n            {\n                const { name, index } = uniformBlock;\n                const uniformData = uniforms[name] as TypedArray | BufferBinding;\n\n                //\n                let typedArray = uniformData as TypedArray;\n                if (!(typedArray.buffer && typedArray.BYTES_PER_ELEMENT))\n                {\n                    const bufferBinding = uniforms[name] as BufferBinding;\n                    updateBufferBinding(uniformBlock.bufferBindingInfo, bufferBinding);\n                    typedArray = bufferBinding.bufferView;\n                }\n                const buffer = getIGLBuffer(typedArray, \"UNIFORM_BUFFER\", \"DYNAMIC_DRAW\");\n                buffer.target ??= \"UNIFORM_BUFFER\";\n                buffer.usage ??= \"DYNAMIC_DRAW\";\n\n                (buffer as UnReadonly<Buffer>).label = buffer.label || (`UniformBuffer ${name}`);\n\n                //\n                const webGLBuffer = getGLBuffer(gl, buffer);\n                gl.bindBufferBase(gl.UNIFORM_BUFFER, index, webGLBuffer);\n            });\n        }\n    }\n\n    private runSamplerTexture(gl: WebGLRenderingContext, uniformInfo: UniformItemInfo, samplerTexture: SamplerTexture)\n    {\n        const { texture, sampler } = samplerTexture;\n        const { location, textureID } = uniformInfo;\n\n        const textureTarget = getGLTextureTarget(texture.dimension);\n\n        // 设置纹理所在采样编号\n        gl.uniform1i(location, textureID);\n        //\n        const webGLTexture = getGLTexture(gl, texture);\n        gl.activeTexture(gl[`TEXTURE${textureID}`]);\n        // 绑定纹理\n        gl.bindTexture(gl[textureTarget], webGLTexture);\n\n        // 运行采样器\n        this.runSampler(gl, textureTarget, webGLTexture, sampler, textureID);\n\n        return webGLTexture;\n    }\n\n    /**\n     * 设置采样参数\n     */\n    private runSampler(gl: WebGLRenderingContext, textureTarget: GLTextureTarget, webGLTexture: WebGLTexture, sampler: Sampler, textureID: number)\n    {\n        if (gl instanceof WebGL2RenderingContext)\n        {\n            const webGLSampler = getGLSampler(gl, sampler);\n            gl.bindSampler(textureID, webGLSampler);\n        }\n        else\n        {\n            const minFilter = getIGLTextureMinFilter(sampler.minFilter, sampler.mipmapFilter);\n            const magFilter = getIGLTextureMagFilter(sampler.magFilter);\n            const wrapS = getIGLTextureWrap(sampler.addressModeU);\n            const wrapT = getIGLTextureWrap(sampler.addressModeV);\n\n            // 设置纹理参数\n            if (webGLTexture.minFilter !== minFilter)\n            {\n                gl.texParameteri(gl[textureTarget], gl.TEXTURE_MIN_FILTER, gl[minFilter]);\n                webGLTexture.minFilter = minFilter;\n            }\n            if (webGLTexture.magFilter !== magFilter)\n            {\n                gl.texParameteri(gl[textureTarget], gl.TEXTURE_MAG_FILTER, gl[magFilter]);\n                webGLTexture.magFilter = magFilter;\n            }\n            if (webGLTexture.wrapS !== wrapS)\n            {\n                gl.texParameteri(gl[textureTarget], gl.TEXTURE_WRAP_S, gl[wrapS]);\n                webGLTexture.wrapS = wrapS;\n            }\n            if (webGLTexture.wrapT !== wrapT)\n            {\n                gl.texParameteri(gl[textureTarget], gl.TEXTURE_WRAP_T, gl[wrapT]);\n                webGLTexture.wrapT = wrapT;\n            }\n        }\n\n        //\n        const maxAnisotropy = sampler?.maxAnisotropy || 1;\n        if (webGLTexture.maxAnisotropy !== maxAnisotropy)\n        {\n            const extension = gl.getExtension(\"EXT_texture_filter_anisotropic\");\n            if (extension)\n            {\n                gl.texParameterf(gl[textureTarget], extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(maxAnisotropy, gl._capabilities.maxAnisotropy));\n            }\n            webGLTexture.maxAnisotropy = maxAnisotropy;\n        }\n    }\n\n    /**\n     * 设置环境Uniform数据\n     */\n    private runUniform(gl: WebGLRenderingContext, type: GLUniformBufferType, uniformInfo: UniformItemInfo, data: any)\n    {\n        if (typeof data === \"number\")\n        {\n            data = [data];\n        }\n        if (data.toArray) data = data.toArray();\n        const location = uniformInfo.location;\n        switch (type)\n        {\n            case \"BOOL\":\n            case \"INT\":\n                gl.uniform1iv(location, data);\n                break;\n            case \"BOOL_VEC2\":\n            case \"INT_VEC2\":\n                gl.uniform2iv(location, data);\n                break;\n            case \"BOOL_VEC3\":\n            case \"INT_VEC3\":\n                gl.uniform3iv(location, data);\n                break;\n            case \"BOOL_VEC4\":\n            case \"INT_VEC4\":\n                gl.uniform4iv(location, data);\n                break;\n            case \"FLOAT\":\n                gl.uniform1fv(location, [data]);\n                break;\n            case \"FLOAT_VEC2\":\n                gl.uniform2fv(location, data);\n                break;\n            case \"FLOAT_VEC3\":\n                gl.uniform3fv(location, data);\n                break;\n            case \"FLOAT_VEC4\":\n                gl.uniform4fv(location, data);\n                break;\n            case \"FLOAT_MAT2\":\n                gl.uniformMatrix2fv(location, false, data);\n                break;\n            case \"FLOAT_MAT3\":\n                gl.uniformMatrix3fv(location, false, data);\n                break;\n            case \"FLOAT_MAT4\":\n                gl.uniformMatrix4fv(location, false, data);\n                break;\n            case \"UNSIGNED_INT\":\n                (gl as any as WebGL2RenderingContext).uniform1uiv(location, data);\n                break;\n            case \"UNSIGNED_INT_VEC2\":\n                (gl as any as WebGL2RenderingContext).uniform2uiv(location, data);\n                break;\n            case \"UNSIGNED_INT_VEC3\":\n                (gl as any as WebGL2RenderingContext).uniform3uiv(location, data);\n                break;\n            case \"UNSIGNED_INT_VEC4\":\n                (gl as any as WebGL2RenderingContext).uniform4uiv(location, data);\n                break;\n            case \"FLOAT_MAT2x3\":\n                (gl as any as WebGL2RenderingContext).uniformMatrix2x3fv(location, false, data);\n                break;\n            case \"FLOAT_MAT2x4\":\n                (gl as any as WebGL2RenderingContext).uniformMatrix2x4fv(location, false, data);\n                break;\n            case \"FLOAT_MAT3x2\":\n                (gl as any as WebGL2RenderingContext).uniformMatrix3x2fv(location, false, data);\n                break;\n            case \"FLOAT_MAT3x4\":\n                (gl as any as WebGL2RenderingContext).uniformMatrix3x4fv(location, false, data);\n                break;\n            case \"FLOAT_MAT4x2\":\n                (gl as any as WebGL2RenderingContext).uniformMatrix4x2fv(location, false, data);\n                break;\n            case \"FLOAT_MAT4x3\":\n                (gl as any as WebGL2RenderingContext).uniformMatrix4x3fv(location, false, data);\n                break;\n            default:\n                console.error(`无法识别的uniform类型 ${uniformInfo.paths} ${type}`);\n        }\n    }\n\n    /**\n     * 执行设置或者上传渲染对象的顶点以及索引数据。\n     */\n    private runVertexArray(gl: WebGLRenderingContext, material: RenderPipeline, vertices: VertexAttributes, indices: IndicesDataTypes)\n    {\n        if (!vertices && !indices) return;\n\n        let webGLVertexArrayObject: WebGLVertexArrayObject;\n        if (gl instanceof WebGL2RenderingContext)\n        {\n            webGLVertexArrayObject = gl._vertexArrays.get([material, vertices, indices]);\n            if (webGLVertexArrayObject)\n            {\n                gl.bindVertexArray(webGLVertexArrayObject);\n\n                return;\n            }\n\n            webGLVertexArrayObject = gl.createVertexArray();\n            gl.bindVertexArray(webGLVertexArrayObject);\n            gl._vertexArrays.set([material, vertices, indices], webGLVertexArrayObject);\n        }\n\n        const shaderResult = getGLProgram(gl, material);\n\n        //\n        shaderResult.attributes.forEach((activeInfo) =>\n        {\n            const { name, location } = activeInfo;\n            // 处理 WebGL 内置属性 gl_VertexID 等\n            if (location < 0) return;\n\n            const attribute = vertices[name];\n            if (!attribute)\n            {\n                console.error(`缺少顶点 ${name} 数据！`);\n            }\n\n            this.runVertexAttribute(gl, location, attribute);\n        });\n\n        this.runIndexBuffer(gl, indices);\n    }\n\n    private runIndexBuffer(gl: WebGLRenderingContext, indices?: IndicesDataTypes)\n    {\n        if (!indices) return;\n\n        const indexBuffer = getIGLBuffer(indices, \"ELEMENT_ARRAY_BUFFER\");\n        indexBuffer.target ??= \"ELEMENT_ARRAY_BUFFER\";\n        indexBuffer.usage ??= \"STATIC_DRAW\";\n\n        const buffer = getGLBuffer(gl, indexBuffer);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n    }\n\n    private runVertexAttribute(gl: WebGLRenderingContext, location: number, attribute: VertexAttribute)\n    {\n        const { stepMode, format } = attribute;\n        let { arrayStride, offset } = attribute;\n\n        const glVertexFormat = vertexFormatMap[format];\n        const { numComponents, normalized, type } = glVertexFormat;\n\n        gl.enableVertexAttribArray(location);\n\n        if (stepMode === \"instance\")\n        {\n            if (gl instanceof WebGL2RenderingContext)\n            {\n                gl.vertexAttribDivisor(location, 1);\n            }\n            else\n            {\n                const extension = gl.getExtension(\"ANGLE_instanced_arrays\");\n                extension.vertexAttribDivisorANGLE(location, 1);\n            }\n        }\n\n        //\n        arrayStride = arrayStride || 0;\n        offset = offset || 0;\n\n        //\n        const buffer = getIGLBuffer(attribute.data, \"ARRAY_BUFFER\", \"STATIC_DRAW\");\n        buffer.target ??= \"ARRAY_BUFFER\";\n\n        const webGLBuffer = getGLBuffer(gl, buffer);\n        gl.bindBuffer(gl.ARRAY_BUFFER, webGLBuffer);\n\n        //\n        if (gl instanceof WebGL2RenderingContext && (type === \"INT\" || type === \"UNSIGNED_INT\"))\n        {\n            gl.vertexAttribIPointer(location, numComponents, gl[type], arrayStride, offset);\n        }\n        else\n        {\n            gl.vertexAttribPointer(location, numComponents, gl[type], normalized, arrayStride, offset);\n        }\n    }\n\n    private runTransformFeedback(gl: WebGLRenderingContext, transformFeedback: TransformFeedback, topology: GLDrawMode)\n    {\n        if (gl instanceof WebGL2RenderingContext)\n        {\n            if (transformFeedback)\n            {\n                const webGLTransformFeedback = getGLTransformFeedback(gl, transformFeedback);\n\n                gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, webGLTransformFeedback);\n\n                gl.beginTransformFeedback(gl[topology]);\n            }\n            else\n            {\n                gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n            }\n        }\n        else if (transformFeedback)\n        {\n            console.log(`WebGL1 不支持顶点着色器回写数据功能！`);\n        }\n    }\n\n    private runTransformFeedbackPipeline(gl: WebGLRenderingContext, renderPipeline: TransformFeedbackPipeline)\n    {\n        const program = getGLProgram(gl, renderPipeline);\n        gl.useProgram(program);\n    }\n\n    private runRenderPipeline(gl: WebGLRenderingContext, renderPipeline: RenderPipeline)\n    {\n        this.runProgram(gl, renderPipeline);\n\n        this.runDepthState(gl, renderPipeline.depthStencil);\n        this.runStencilState(gl, renderPipeline.depthStencil);\n    }\n\n    private runStencilState(gl: WebGLRenderingContext, depthStencil?: DepthStencilState)\n    {\n        const { stencilFront, stencilBack } = { ...depthStencil };\n        //\n        if (stencilFront || stencilBack)\n        {\n            const ref: number = depthStencil.stencilReference ?? 0;\n            const readMask = depthStencil.stencilReadMask ?? 0xFFFFFFFF;\n            const writeMask = depthStencil.stencilWriteMask ?? 0xFFFFFFFF;\n\n            gl.enable(gl.STENCIL_TEST);\n\n            if (stencilFront)\n            {\n                const func = getIGLStencilFunc(stencilFront.compare ?? \"always\");\n                const fail = getIGLStencilOp(stencilFront.failOp);\n                const zfail = getIGLStencilOp(stencilFront.depthFailOp);\n                const zpass = getIGLStencilOp(stencilFront.passOp);\n                //\n                gl.stencilFuncSeparate(gl.FRONT, gl[func], ref, readMask);\n                gl.stencilOpSeparate(gl.FRONT, gl[fail], gl[zfail], gl[zpass]);\n                gl.stencilMaskSeparate(gl.FRONT, writeMask);\n            }\n            if (stencilBack)\n            {\n                const func = getIGLStencilFunc(stencilBack.compare ?? \"always\");\n                const fail = getIGLStencilOp(stencilBack.failOp);\n                const zfail = getIGLStencilOp(stencilBack.depthFailOp);\n                const zpass = getIGLStencilOp(stencilBack.passOp);\n                //\n                gl.stencilFuncSeparate(gl.BACK, gl[func], ref, readMask);\n                gl.stencilOpSeparate(gl.BACK, gl[fail], gl[zfail], gl[zpass]);\n                gl.stencilMaskSeparate(gl.BACK, writeMask);\n            }\n        }\n        else\n        {\n            gl.disable(gl.STENCIL_TEST);\n        }\n    }\n\n    private runDepthState(gl: WebGLRenderingContext, depthStencil?: DepthStencilState)\n    {\n        if (depthStencil && (depthStencil.depthWriteEnabled || depthStencil.depthCompare !== \"always\"))\n        {\n            const depthCompare = getIGLCompareFunction(depthStencil.depthCompare ?? \"less\");\n            const depthWriteEnabled = depthStencil.depthWriteEnabled ?? true;\n            //\n            gl.enable(gl.DEPTH_TEST);\n            //\n            gl.depthFunc(gl[depthCompare]);\n            gl.depthMask(depthWriteEnabled);\n\n            //\n            if (depthStencil.depthBias || depthStencil.depthBiasSlopeScale)\n            {\n                const factor = depthStencil.depthBiasSlopeScale ?? 0;\n                const units = depthStencil.depthBias ?? 0;\n                //\n                gl.enable(gl.POLYGON_OFFSET_FILL);\n                gl.polygonOffset(factor, units);\n            }\n            else\n            {\n                gl.disable(gl.POLYGON_OFFSET_FILL);\n            }\n        }\n        else\n        {\n            gl.disable(gl.DEPTH_TEST);\n        }\n    }\n\n    private runPrimitiveState(gl: WebGLRenderingContext, primitive?: PrimitiveState)\n    {\n        const cullFace: CullFace = primitive?.cullFace || \"none\";\n        const frontFace: FrontFace = primitive?.frontFace || \"ccw\";\n\n        if (cullFace !== \"none\")\n        {\n            const glCullMode = cullFaceMap[cullFace];\n            console.assert(!!glCullMode, `接收到错误值，请从 ${Object.keys(cullFaceMap).toString()} 中取值！`);\n\n            const glFrontFace = frontFaceMap[frontFace];\n            console.assert(!!glFrontFace, `接收到错误 IFrontFace 值，请从 ${Object.keys(frontFaceMap).toString()} 中取值！`);\n\n            //\n            gl.enable(gl.CULL_FACE);\n            gl.cullFace(gl[glCullMode]);\n            gl.frontFace(gl[glFrontFace]);\n        }\n        else\n        {\n            gl.disable(gl.CULL_FACE);\n        }\n    }\n\n    private runProgram(gl: WebGLRenderingContext, material: RenderPipeline)\n    {\n        const program = getGLProgram(gl, material);\n        gl.useProgram(program);\n\n        //\n        this.runColorTargetStates(gl, material.fragment.targets);\n    }\n\n    private runColorTargetStates(gl: WebGLRenderingContext, targets?: readonly ColorTargetState[])\n    {\n        //\n        const colorMask = targets?.[0]?.writeMask || [true, true, true, true];\n        gl.colorMask(colorMask[0], colorMask[1], colorMask[2], colorMask[3]);\n\n        //\n        const blend = targets?.[0]?.blend;\n        if (blend)\n        {\n            const color: BlendComponent = blend.color;\n            const alpha: BlendComponent = blend.alpha;\n\n            const colorOperation: IGLBlendEquation = getIGLBlendEquation(color?.operation) || \"FUNC_ADD\";\n            const colorSrcFactor: IGLBlendFactor = getIGLBlendFactor(color?.srcFactor, color?.operation) || \"SRC_ALPHA\";\n            const colorDstFactor: IGLBlendFactor = getIGLBlendFactor(color?.dstFactor, color?.operation) || \"ONE_MINUS_SRC_ALPHA\";\n            //\n            const alphaOperation: IGLBlendEquation = getIGLBlendEquation(alpha?.operation) || colorOperation;\n            const alphaSrcFactor: IGLBlendFactor = getIGLBlendFactor(alpha?.srcFactor, color?.operation) || colorSrcFactor;\n            const alphaDstFactor: IGLBlendFactor = getIGLBlendFactor(alpha?.dstFactor, color?.operation) || colorDstFactor;\n\n            // 当混合系数用到了混合常量值时设置混合常量值。\n            const constantColor = BlendState.getBlendConstantColor(blend);\n            if (constantColor)\n            {\n                const constantColor = blend.constantColor ?? [0, 0, 0, 0];\n                gl.blendColor(constantColor[0], constantColor[1], constantColor[2], constantColor[3]);\n            }\n\n            //\n            gl.enable(gl.BLEND);\n            gl.blendEquationSeparate(gl[colorOperation], gl[alphaOperation]);\n            gl.blendFuncSeparate(gl[colorSrcFactor], gl[colorDstFactor], gl[alphaSrcFactor], gl[alphaDstFactor]);\n        }\n        else\n        {\n            gl.disable(gl.BLEND);\n        }\n    }\n\n    private runOcclusionQuery(gl: WebGLRenderingContext, attachmentSize: { width: number, height: number }, occlusionQuery: OcclusionQuery)\n    {\n        // 开始查询\n        occlusionQuery._step.begin();\n\n        // 正常渲染对象列表\n        occlusionQuery.renderObjects.forEach((renderObject) =>\n        {\n            this.runRenderObject(gl, attachmentSize, renderObject);\n        });\n\n        // 结束查询\n        occlusionQuery._step.end();\n    }\n\n    private runViewPort(gl: WebGLRenderingContext, attachmentSize: { width: number, height: number }, viewport: Viewport)\n    {\n        if (viewport)\n        {\n            const isYup = viewport.isYup ?? true;\n            const x = viewport.x ?? 0;\n            let y = viewport.y ?? 0;\n            const width = viewport.width ?? attachmentSize.width;\n            const height = viewport.height ?? attachmentSize.height;\n\n            if (!isYup)\n            {\n                y = attachmentSize.height - y - height;\n            }\n\n            gl.viewport(x, y, width, height);\n        }\n        else\n        {\n            gl.viewport(0, 0, attachmentSize.width, attachmentSize.height);\n        }\n    }\n\n    private runScissor(gl: WebGLRenderingContext, attachmentSize: { width: number, height: number }, scissor: ScissorRect)\n    {\n        if (scissor)\n        {\n            const isYup = scissor.isYup ?? true;\n            const x = scissor.x ?? 0;\n            let y = scissor.y ?? 0;\n            const width = scissor.width ?? attachmentSize.width;\n            const height = scissor.height ?? attachmentSize.height;\n\n            if (!isYup)\n            {\n                y = attachmentSize.height - y - height;\n            }\n\n            gl.enable(gl.SCISSOR_TEST);\n            gl.scissor(x, y, width, height);\n        }\n        else\n        {\n            gl.disable(gl.SCISSOR_TEST);\n        }\n    }\n\n    private runCopyTextureToTexture(gl: WebGLRenderingContext, copyTextureToTexture: CopyTextureToTexture)\n    {\n        const blitFramebuffer = getGLBlitFramebuffer(copyTextureToTexture);\n        this.runBlitFramebuffer(gl, blitFramebuffer);\n    }\n\n    private runBlitFramebuffer(gl: WebGLRenderingContext, blitFramebuffer: BlitFramebuffer)\n    {\n        const { read, draw, blitFramebuffers } = blitFramebuffer;\n\n        const readFramebuffer = getGLFramebuffer(gl, read);\n        const drawFramebuffer = getGLFramebuffer(gl, draw);\n\n        if (gl instanceof WebGL2RenderingContext)\n        {\n            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, readFramebuffer);\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, drawFramebuffer);\n\n            draw.colorAttachments.forEach((item, i) =>\n            {\n                const clearValue = draw.colorAttachments[i]?.clearValue;\n                if (clearValue)\n                {\n                    gl.clearBufferfv(gl.COLOR, i, clearValue);\n                }\n            });\n\n            blitFramebuffers.forEach((item) =>\n            {\n                const [srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter] = item;\n\n                gl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, gl[mask], gl[filter]);\n            });\n        }\n    }\n\n    private runCopyBuffer(gl: WebGLRenderingContext, copyBuffer: CopyBufferToBuffer)\n    {\n        if (gl instanceof WebGL2RenderingContext)\n        {\n            const { source: read, destination: write, sourceOffset: readOffset, destinationOffset: writeOffset, size } = copyBuffer;\n\n            const rb = getGLBuffer(gl, read);\n            const wb = getGLBuffer(gl, write);\n\n            gl.bindBuffer(gl.COPY_READ_BUFFER, rb);\n            gl.bindBuffer(gl.COPY_WRITE_BUFFER, wb);\n            gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, readOffset, writeOffset, size);\n\n            //\n            gl.bindBuffer(gl.COPY_READ_BUFFER, null);\n            gl.bindBuffer(gl.COPY_WRITE_BUFFER, null);\n        }\n        else\n        {\n            console.error(`WebGL1 不支持拷贝缓冲区功能！`);\n        }\n    }\n}\n\nconst cullFaceMap = Object.freeze({\n    FRONT_AND_BACK: \"FRONT_AND_BACK\",\n    none: \"BACK\", // 不会开启剔除面功能，什么值无所谓。\n    front: \"FRONT\",\n    back: \"BACK\",\n});\n\nconst frontFaceMap = Object.freeze({ ccw: \"CCW\", cw: \"CW\" });\n\n/**\n * 获取渲染通道附件尺寸。\n *\n * @param gl\n * @param descriptor\n */\nfunction getGLRenderPassAttachmentSize(gl: WebGLRenderingContext, descriptor: RenderPassDescriptor): { readonly width: number; readonly height: number; }\n{\n    if (!descriptor) return { width: gl.drawingBufferWidth, height: gl.drawingBufferHeight };\n\n    const colorAttachments = descriptor.colorAttachments;\n    if (colorAttachments)\n    {\n        const view = colorAttachments[0]?.view;\n        if (view)\n        {\n            return { width: view.texture.size[0], height: view.texture.size[1] };\n        }\n\n        return { width: gl.drawingBufferWidth, height: gl.drawingBufferHeight };\n    }\n\n    const depthStencilAttachment = descriptor.depthStencilAttachment;\n    if (depthStencilAttachment)\n    {\n        const view = depthStencilAttachment.view;\n        if (view)\n        {\n            return { width: view.texture.size[0], height: view.texture.size[1] };\n        }\n\n        return { width: gl.drawingBufferWidth, height: gl.drawingBufferHeight };\n    }\n\n    return { width: gl.drawingBufferWidth, height: gl.drawingBufferHeight };\n}","/**\n * WEBGL支持功能\n *\n * @see https://webglreport.com\n * @see http://html5test.com\n */\nexport class Capabilities\n{\n    /**\n     * 纹理各向异性过滤最大值\n     */\n    get maxAnisotropy()\n    {\n        if (this._maxAnisotropy) return this._maxAnisotropy;\n        this._maxAnisotropy = this._gl.getExtension(\"EXT_texture_filter_anisotropic\") ? this._gl.getParameter(this._gl.getExtension(\"EXT_texture_filter_anisotropic\").MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;\n\nreturn this._maxAnisotropy;\n    }\n    private _maxAnisotropy: number;\n\n    /**\n     * 支持最大纹理数量\n     */\n    get maxTextures()\n    {\n        if (this._maxTextures) return this._maxTextures;\n        this._maxTextures = this._gl.getParameter(this._gl.MAX_TEXTURE_IMAGE_UNITS);\n\nreturn this._maxTextures;\n    }\n    private _maxTextures: number;\n\n    /**\n     * 支持最大顶点纹理数量\n     */\n    get maxVertexTextures()\n    {\n        if (this._maxVertexTextures) return this._maxVertexTextures;\n        this._maxVertexTextures = this._gl.getParameter(this._gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n\nreturn this._maxVertexTextures;\n    }\n    private _maxVertexTextures: number;\n\n    /**\n     * 支持最大纹理尺寸\n     */\n    get maxTextureSize()\n    {\n        if (this._maxTextureSize) return this._maxTextureSize;\n        this._maxTextureSize = this._gl.getParameter(this._gl.MAX_TEXTURE_SIZE);\n\nreturn this._maxTextureSize;\n    }\n    private _maxTextureSize: number;\n\n    /**\n     * 支持最大立方体贴图尺寸\n     */\n    get maxCubemapSize()\n    {\n        if (this._maxCubemapSize) return this._maxCubemapSize;\n        this._maxCubemapSize = this._gl.getParameter(this._gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n\nreturn this._maxCubemapSize;\n    }\n    private _maxCubemapSize: number;\n\n    /**\n     * 支持属性数量\n     */\n    get maxAttributes()\n    {\n        if (this._maxAttributes) return this._maxAttributes;\n        this._maxAttributes = this._gl.getParameter(this._gl.MAX_VERTEX_ATTRIBS);\n\nreturn this._maxAttributes;\n    }\n    private _maxAttributes: number;\n\n    /**\n     * 顶点着色器支持最大 Uniform 数量\n     */\n    get maxVertexUniforms()\n    {\n        if (this._maxVertexUniforms) return this._maxVertexUniforms;\n        this._maxVertexUniforms = this._gl.getParameter(this._gl.MAX_VERTEX_UNIFORM_VECTORS);\n\nreturn this._maxVertexUniforms;\n    }\n    private _maxVertexUniforms: number;\n\n    /**\n     * 支持最大shader之间传递的变量数\n     */\n    get maxVaryings()\n    {\n        if (this._maxVaryings) return this._maxVaryings;\n        this._maxVaryings = this._gl.getParameter(this._gl.MAX_VARYING_VECTORS);\n\nreturn this._maxVaryings;\n    }\n    private _maxVaryings: number;\n\n    /**\n     * 片段着色器支持最大 Uniform 数量\n     */\n    get maxFragmentUniforms()\n    {\n        if (this._maxFragmentUniforms) return this._maxFragmentUniforms;\n        this._maxFragmentUniforms = this._gl.getParameter(this._gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n\nreturn this._maxFragmentUniforms;\n    }\n    private _maxFragmentUniforms: number;\n\n    /**\n     * 是否支持顶点纹理\n     */\n    get vertexTextures()\n    {\n        if (this._vertexTextures) return this._vertexTextures;\n        this._vertexTextures = this.maxVertexTextures > 0;\n\nreturn this._vertexTextures;\n    }\n    private _vertexTextures: boolean;\n\n    /**\n     * 是否支持浮点类型片段着色器纹理\n     */\n    get floatFragmentTextures()\n    {\n        if (this._floatFragmentTextures) return this._floatFragmentTextures;\n        this._floatFragmentTextures = this._gl instanceof WebGL2RenderingContext || !!this._gl.getExtension(\"OES_texture_float\");\n\nreturn this._floatFragmentTextures;\n    }\n    private _floatFragmentTextures: boolean;\n\n    /**\n     * 是否支持浮点类型顶点着色器纹理\n     */\n    get floatVertexTextures()\n    {\n        if (this._floatVertexTextures) return this._floatVertexTextures;\n        this._floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\n\nreturn this._floatVertexTextures;\n    }\n    private _floatVertexTextures: boolean;\n\n    /**\n     * Shader中支持浮点类型的最高精度\n     */\n    get maxPrecision()\n    {\n        if (this._maxPrecision) return this._maxPrecision;\n        this._maxPrecision = _getMaxPrecision(this._gl, this._precision);\n\nreturn this._maxPrecision;\n    }\n    private _maxPrecision: \"highp\" | \"mediump\" | \"lowp\";\n\n    /**\n     *\n     */\n    get maxSamples()\n    {\n        if (this._maxSamples) return this._maxSamples;\n        this._maxSamples = this._gl instanceof WebGL2RenderingContext ? this._gl.getParameter(this._gl.MAX_SAMPLES) : 0;\n\nreturn this._maxSamples;\n    }\n    private _maxSamples: number;\n\n    /**\n     * 支持模板的位数\n     */\n    get stencilBits()\n    {\n        if (this._stencilBits) return this._stencilBits;\n        this._stencilBits = this._gl.getParameter(this._gl.STENCIL_BITS);\n\nreturn this._stencilBits;\n    }\n    private _stencilBits: number;\n\n    /**\n     * 是否支持VAO。\n     */\n    get vaoAvailable()\n    {\n        if (this._vaoAvailable) return this._vaoAvailable;\n        this._vaoAvailable = this._gl instanceof WebGL2RenderingContext || !!this._gl.getExtension(\"OES_vertex_array_object\");\n\nreturn this._vaoAvailable;\n    }\n    private _vaoAvailable: boolean;\n\n    constructor(private _gl: WebGLRenderingContext | WebGL2RenderingContext, private _precision: \"highp\" | \"mediump\" | \"lowp\" = \"highp\")\n    {\n    }\n}\n\nfunction _getMaxPrecision(gl: WebGLRenderingContext | WebGL2RenderingContext, precision: \"highp\" | \"mediump\" | \"lowp\" = \"highp\")\n{\n    if (precision === \"highp\")\n    {\n        if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0\n            && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0)\n        {\n            return \"highp\";\n        }\n        precision = \"mediump\";\n    }\n    if (precision === \"mediump\")\n    {\n        if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0\n            && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0)\n        {\n            return \"mediump\";\n        }\n    }\n\n    return \"lowp\";\n}","import { Buffer, CanvasContext, ChainMap, IndicesDataTypes, RenderPassDescriptor, RenderPipeline, Sampler, Texture, VertexAttributes } from \"@feng3d/render-api\";\nimport { defaultWebGLContextAttributes } from \"../data/polyfills/CanvasContext\";\nimport { Renderbuffer } from \"../data/Renderbuffer\";\nimport { TransformFeedback } from \"../data/TransformFeedbackPass\";\nimport { Capabilities } from \"./Capabilities\";\n\ndeclare global\n{\n    interface WebGLRenderingContext\n    {\n        _capabilities: Capabilities;\n        //\n        _bufferMap: WeakMap<Buffer, WebGLBuffer>\n        _textures: WeakMap<Texture, WebGLTexture>\n        _renderbuffers: WeakMap<Renderbuffer, WebGLRenderbuffer>;\n        _framebuffers: WeakMap<RenderPassDescriptor, WebGLFramebuffer>;\n        _vertexArrays: ChainMap<[RenderPipeline, VertexAttributes, IndicesDataTypes], WebGLVertexArrayObject>;\n        _samplers: WeakMap<Sampler, WebGLSampler>;\n        _transforms: WeakMap<TransformFeedback, WebGLTransformFeedback>;\n        _programs: { [key: string]: WebGLProgram }\n        _shaders: { [key: string]: WebGLShader }\n    }\n}\n\n/**\n * 获取WebGL上下文。\n *\n * @param canvasContext\n * @returns\n */\nexport function getGLCanvasContext(canvasContext: CanvasContext)\n{\n    let gl: WebGLRenderingContext = canvasContext[\"_gl\"];\n    if (gl) return gl;\n\n    const canvas = typeof canvasContext.canvasId === \"string\" ? document.getElementById(canvasContext.canvasId) as HTMLCanvasElement : canvasContext.canvasId;\n    gl = canvasContext[\"_gl\"] = getWebGLContext(canvas, canvasContext);\n\n    canvasContext.webGLContextAttributes;\n    //\n    gl._capabilities = new Capabilities(gl);\n\n    gl._bufferMap = new WeakMap();\n    gl._textures = new WeakMap();\n    gl._renderbuffers = new WeakMap();\n    gl._framebuffers = new WeakMap();\n    gl._vertexArrays = new ChainMap();\n    gl._samplers = new WeakMap();\n    gl._transforms = new WeakMap();\n    gl._programs = {};\n    gl._shaders = {};\n\n    //\n    canvas.addEventListener(\"webglcontextlost\", _onContextLost, false);\n    canvas.addEventListener(\"webglcontextrestored\", _onContextRestore, false);\n    canvas.addEventListener(\"webglcontextcreationerror\", _onContextCreationError, false);\n\n    return gl;\n}\n\nfunction _onContextLost(event: Event)\n{\n    event.preventDefault();\n\n    console.warn(\"WebGLRenderer: Context Lost.\");\n}\n\nfunction _onContextRestore()\n{\n    console.warn(\"WebGLRenderer: Context Restored.\");\n}\n\nfunction _onContextCreationError(event: WebGLContextEvent)\n{\n    console.error(\"WebGLRenderer: A WebGL context could not be created. Reason: \", event.statusMessage);\n}\n\nfunction getWebGLContext(canvas: HTMLCanvasElement | OffscreenCanvas, canvasContext: CanvasContext): WebGLRenderingContext\n{\n    const contextAttributes = Object.assign({}, defaultWebGLContextAttributes, canvasContext.webGLContextAttributes);\n\n    // 使用用户提供参数获取WebGL上下文\n    let gl = canvas.getContext(canvasContext.webGLcontextId || \"webgl2\", contextAttributes);\n    gl || console.warn(`无法使用用户提供参数获取指定WebGL上下文`, contextAttributes);\n\n    gl = canvas.getContext(\"webgl2\", contextAttributes)\n        || canvas.getContext(\"webgl2\")\n        || canvas.getContext(\"webgl\", contextAttributes)\n        || canvas.getContext(\"webgl\");\n\n    gl || console.error(`无法获取WebGL上下文。`);\n\n    return gl as any;\n}\n","import { ReadPixels, RenderPassDescriptor, Texture } from \"@feng3d/render-api\";\nimport { deleteFramebuffer, getGLFramebuffer } from \"../caches/getGLFramebuffer\";\nimport { getGLTextureFormats } from \"../caches/getGLTextureFormats\";\n\nexport function readPixels(gl: WebGLRenderingContext, readPixels: ReadPixels)\n{\n    let bufferData:ArrayBufferView;\n\n    if (gl instanceof WebGL2RenderingContext)\n    {\n        const { textureView, origin, copySize } = readPixels;\n        const attachmentPoint: GLAttachmentPoint = \"COLOR_ATTACHMENT0\";\n        const [width, height] = copySize;\n        //\n        const { format, type } = getGLTextureFormats(textureView.texture.format);\n        const bytesPerPixel = Texture.getTextureBytesPerPixel(textureView.texture.format);\n        const DataConstructor = Texture.getTextureDataConstructor(textureView.texture.format);\n        //\n        const bytesPerRow = width * bytesPerPixel;\n        const bufferSize = bytesPerRow * height;\n        bufferData = new DataConstructor(bufferSize / DataConstructor.BYTES_PER_ELEMENT);\n        //\n        const frameBuffer: RenderPassDescriptor = {\n            colorAttachments: [\n                { view: textureView },\n            ]\n        };\n        //\n        const webGLFramebuffer = getGLFramebuffer(gl, frameBuffer);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, webGLFramebuffer);\n\n        //\n        gl.readBuffer(gl[attachmentPoint]);\n        gl.readPixels(origin[0], origin[1], width, height, gl[format], gl[type], bufferData, 0);\n\n        // 释放\n        deleteFramebuffer(gl, frameBuffer);\n    }\n    else\n    {\n        console.error(`WebGL1 不支持 readBuffer/readPixels ！`);\n    }\n\n    return bufferData;\n}\n\n/**\n * A GLenum specifying the attachment point for the texture. Possible values:\n *\n * gl.COLOR_ATTACHMENT0: Attaches the texture to the framebuffer's color buffer.\n * gl.DEPTH_ATTACHMENT: Attaches the texture to the framebuffer's depth buffer.\n * gl.STENCIL_ATTACHMENT: Attaches the texture to the framebuffer's stencil buffer.\n *\n * When using a WebGL 2 context, the following values are available additionally:\n *\n * gl.DEPTH_STENCIL_ATTACHMENT: depth and stencil buffer.\n * gl.COLOR_ATTACHMENT1 gl.COLOR_ATTACHMENT2 gl.COLOR_ATTACHMENT3 gl.COLOR_ATTACHMENT4 gl.COLOR_ATTACHMENT5 gl.COLOR_ATTACHMENT6 gl.COLOR_ATTACHMENT7 gl.COLOR_ATTACHMENT8 gl.COLOR_ATTACHMENT9 gl.COLOR_ATTACHMENT10 gl.COLOR_ATTACHMENT11 gl.COLOR_ATTACHMENT12 gl.COLOR_ATTACHMENT13 gl.COLOR_ATTACHMENT14 gl.COLOR_ATTACHMENT15\n */\nexport type GLAttachmentPoint = \"COLOR_ATTACHMENT0\" | \"DEPTH_ATTACHMENT\" | \"STENCIL_ATTACHMENT\"\n    | \"DEPTH_STENCIL_ATTACHMENT\"\n    | \"COLOR_ATTACHMENT1\" | \"COLOR_ATTACHMENT2\" | \"COLOR_ATTACHMENT3\" | \"COLOR_ATTACHMENT4\" | \"COLOR_ATTACHMENT5\"\n    | \"COLOR_ATTACHMENT6\" | \"COLOR_ATTACHMENT7\" | \"COLOR_ATTACHMENT8\" | \"COLOR_ATTACHMENT9\" | \"COLOR_ATTACHMENT10\"\n    | \"COLOR_ATTACHMENT11\" | \"COLOR_ATTACHMENT12\" | \"COLOR_ATTACHMENT13\" | \"COLOR_ATTACHMENT14\" | \"COLOR_ATTACHMENT15\"\n    ;\n","import { Buffer, CanvasContext, ReadPixels, RenderPassDescriptor, RenderPipeline, Sampler, Submit, Texture } from \"@feng3d/render-api\";\n\nimport { RunWebGL } from \"./RunWebGL\";\nimport { deleteBuffer } from \"./caches/getGLBuffer\";\nimport { getGLCanvasContext } from \"./caches/getGLCanvasContext\";\nimport { deleteFramebuffer } from \"./caches/getGLFramebuffer\";\nimport { deleteProgram } from \"./caches/getGLProgram\";\nimport { deleteRenderbuffer } from \"./caches/getGLRenderbuffer\";\nimport { deleteSampler } from \"./caches/getGLSampler\";\nimport { deleteTexture } from \"./caches/getGLTexture\";\nimport { deleteTransformFeedback } from \"./caches/getGLTransformFeedback\";\nimport { Renderbuffer } from \"./data/Renderbuffer\";\nimport { TransformFeedback } from \"./data/TransformFeedbackPass\";\nimport { readPixels } from \"./utils/readPixels\";\n\n/**\n * WEBGL 对象。\n *\n * 所有渲染都由该渲染器执行。與2D、3D場景無關，屬於更加底層的API。針對每一個 RenderObject 渲染數據進行渲染。\n */\nexport class WebGL\n{\n    private _runWebGL: RunWebGL = new RunWebGL();\n    private _renderingContext: CanvasContext;\n    private _gl: WebGLRenderingContext;\n\n    constructor(renderingContext?: CanvasContext)\n    {\n        this._renderingContext = renderingContext;\n        this._gl = getGLCanvasContext(this._renderingContext) as any;\n    }\n\n    /**\n     * 提交 GPU 。\n     *\n     * @param submit 一次 GPU 提交内容。\n     *\n     */\n    submit(submit: Submit)\n    {\n        this._runWebGL.runSubmit(this._gl, submit);\n    }\n\n    readPixels(glReadPixels: ReadPixels)\n    {\n        glReadPixels.result = readPixels(this._gl, glReadPixels);\n\n        return glReadPixels.result;\n    }\n\n    deleteFramebuffer(passDescriptor: RenderPassDescriptor)\n    {\n        deleteFramebuffer(this._gl, passDescriptor);\n    }\n\n    deleteRenderbuffer(renderbuffer: Renderbuffer)\n    {\n        deleteRenderbuffer(this._gl, renderbuffer);\n    }\n\n    deleteBuffer(buffer: Buffer)\n    {\n        deleteBuffer(this._gl, buffer);\n    }\n\n    deleteTexture(texture: Texture)\n    {\n        deleteTexture(this._gl, texture);\n    }\n\n    deleteSampler(sampler: Sampler)\n    {\n        deleteSampler(this._gl, sampler);\n    }\n\n    deleteProgram(material: RenderPipeline)\n    {\n        deleteProgram(this._gl, material);\n    }\n\n    deleteTransformFeedback(transformFeedback: TransformFeedback)\n    {\n        deleteTransformFeedback(this._gl, transformFeedback);\n    }\n}\n"],"names":["defaultWebGLContextAttributes","getIGLBuffer","data","target","usage","_IGLBuffer","buffer","getIGLBlendEquation","operation","glBlendEquation","operationMap","getIGLBlendFactor","blendFactor","glBlendFactor","blendFactorMap","vertexFormatMap","BlendState","blendState","color","alpha","constantColor","Texture","format","_a","bytesPerPixel","formatMap","ChainMap","keys","keysLength","map","key","n","wrapKey","value","i","result","keyMap","idCounter","wrapper","getGLBlitFramebuffer","copyTextureToTexture","source","destination","copySize","sourceAspect","destinationAspect","sourceColorAttachments","sourceDepthStencilAttachment","destinationColorAttachments","destinationDepthStencilAttachment","mask","getGLTextureView","sourceOrigin","destinationOrigin","blitFramebufferItem","Watcher","offFuncs","watchInfo","object","property","handler","thisObject","onlyChanged","topObject","fullProperty","propertys","object0","property0","object1","property1","func","__watchs__","_property","watchs","oldPropertyDescriptor","getPropertyDescriptor","orgSet","oldValue","notifyListener","propertywatchs","v","item","handlers","fun0","fun1","binds","notIndex","__watchchains__","watchchains","currentp","nextp","watchchainFun","newValue","ov","getObjectPropertyValue","nv","element","objectIsEmpty","getObjectPropertyChains","watcher","host","prototype","obj","hosts","parentPropertyIndices","index","cp","cv","vks","isBaseType","ps","ci","k","getGLBuffer","gl","webGLBuffer","size","writeBuffer","writeBuffers","bufferOffset","dataOffset","arrayBufferView","dataChange","deleteBuffer","getGLDrawMode","topology","drawMode","drawModeMap","getGLRenderbuffer","renderbuffer","sampleCount","webGLRenderbuffer","internalformat","width","height","deleteRenderbuffer","getGLTextureFormats","glTextureFormat","getGLRenderPassDescriptorWithMultisample","sourcePassDescriptor","_IGLRenderPassDescriptorWithMultisample","textureSize","renderbuffers","passDescriptor","texture","getGLRenderbufferInternalformat","blitFramebuffer","getGLTextureTarget","dimension","dimensionMap","defaultTexturePixelStore","getGLTexture","webGLTexture","type","sources","generateMipmap","depth","mipLevelCount","textureOrigin","mipLevel","zoffset","imageSource","image","imageOrigin","flipY","premultipliedAlpha","pixelStore","setTexturePixelStore","bindTarget","getTextureCubeMapTarget","bufferSource","dataLayout","dataImageOrigin","offset","updateSources","updateTexture","writeTextures","depthOrArrayLayers","xoffset","yoffset","resize","deleteTexture","packAlignment","unpackAlignment","unpackFlipY","unpackPremulAlpha","unpackColorSpaceConversion","packRowLength","packSkipPixels","packSkipRows","unpackRowLength","unpackImageHeight","unpackSkipPixels","unpackSkipRows","unpackSkipImages","textureCubeMapTarget","textureCubeMapTargetMap","getGLFramebuffer","_b","_c","_d","_e","webGLFramebuffer","drawBuffers","view","attachment","baseMipLevel","baseArrayLayer","textureTarget","deleteFramebuffer","handleMultisample","deleteRenderPassDescriptorWithMultisample","renderPassDescriptorWithMultisample","getWebGLUniformType","webGLUniformValueType","isWebGLUniformTextureType","webGLUniformTextureTypeValue","webGL1UniformBufferTypeValue","webGL1UniformTextureTypeValue","webGL2OnlyUniformBufferTypeValue","webGL2OnlyUniformTextureTypeValue","webGLUniformTypeValue","pv","getGLProgram","material","shaderKey","getKey","vertex","fragment","transformFeedbackVaryings","getWebGLProgram","deleteProgram","vshader","fshader","vertexShader","getWebGLShader","fragmentShader","program","createLinkProgram","numAttributes","attributes","activeInfo","name","location","typeString","getGLAttributeType","numUniforms","uniforms","textureID","isTexture","reg","names","baseName","j","items","paths","numUniformBlocks","uniformBlockActiveInfos","uniformIndices","uniformList","unifrom","info","getBufferBindingInfo","code","shader","error","uniformBlock","currentSize","structName","uniformInfo","uniformBufferType","alignSize","uniformBufferTypeAlignSizeMap","currentstructName","roundUp","itemInfo","itemInfoOffset","itemInfoSize","Cls","webglAttributeValueType","getGLRenderOcclusionQuery","renderObjects","defautRenderOcclusionQuery","renderOcclusionQuery","occlusionQueryObjects","init","getGLOcclusionQueryStep","resolve","renderPass","results","occlusionQuery","query","webGLQuery","reject","tick","getIGLCompareFunction","depthCompare","glDepthCompare","depthCompareMap","getGLSampler","sampler","webGLSampler","minFilter","getIGLTextureMinFilter","magFilter","getIGLTextureMagFilter","wrapS","getIGLTextureWrap","wrapT","wrapR","lodMinClamp","lodMaxClamp","compareMode","compare","deleteSampler","addressMode","textureWrap","addressModeMap","mipmapFilter","glMinFilter","glMagFilter","magFilterMap","getGLTransformFeedback","transformFeedback","webGLTransformFeedback","deleteTransformFeedback","_GL_Submit_Times","getIGLStencilFunc","compareMap","getIGLStencilOp","stencilOperation","stencilOperationMap","bufferBindingInfoMap","updateBufferBinding","bufferBindingInfo","uniformData","preVariableInfo","hasDefautValue","update","RunWebGL","submit","commandEncoder","passEncoder","transformFeedbackPass","transformFeedbackObject","attachmentSize","getGLRenderPassAttachmentSize","framebuffer","colorAttachment","clearValue","loadOp","depthStencilAttachment","depthClearValue","depthLoadOp","stencilClearValue","stencilLoadOp","renderObject","viewport","scissorRect","pipeline","vertices","indices","draw","primitive","drawIndexed","indexCount","firstIndex","instanceCount","drawArrays","vertexCount","firstVertex","webGLProgram","inBlock","typedArray","bufferBinding","samplerTexture","maxAnisotropy","extension","webGLVertexArrayObject","attribute","indexBuffer","stepMode","arrayStride","glVertexFormat","numComponents","normalized","renderPipeline","depthStencil","stencilFront","stencilBack","ref","readMask","writeMask","fail","zfail","zpass","depthWriteEnabled","factor","units","cullFace","frontFace","glCullMode","cullFaceMap","glFrontFace","frontFaceMap","targets","colorMask","blend","colorOperation","colorSrcFactor","colorDstFactor","alphaOperation","alphaSrcFactor","alphaDstFactor","isYup","x","y","scissor","read","blitFramebuffers","readFramebuffer","drawFramebuffer","srcX0","srcY0","srcX1","srcY1","dstX0","dstY0","dstX1","dstY1","filter","copyBuffer","write","readOffset","writeOffset","rb","wb","descriptor","colorAttachments","Capabilities","_gl","_precision","_getMaxPrecision","precision","getGLCanvasContext","canvasContext","canvas","getWebGLContext","_onContextLost","_onContextRestore","_onContextCreationError","event","contextAttributes","readPixels","bufferData","textureView","origin","attachmentPoint","DataConstructor","bufferSize","frameBuffer","WebGL","renderingContext","glReadPixels"],"mappings":"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","x_google_ignoreList":[3,5]}